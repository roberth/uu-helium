#-----------------------------------------------------------------------
#  The Helium Compiler
#-----------------------------------------------------------------------

# make		     - build everything that is needed
# make clean	 - remove .hi and .o files
# make cleanag - remove all .hs files that are derivatives of .ag files

default: all

.PHONY : default compiler all coreasm lvmrun libraries clean \
         texthint smaller install movetohome status

VERSION = 1.7

#directories
HELIUMBINDIR = ../bin
LVMLIBDIR  = ../../lvm/src/lib
LVMRUNTIMEDIR  = ../../lvm/src/runtime
OUTDIR = ../out

#the main program you want to generate
MAIN	= helium
UPX	= @UPX@
STRIP   = @STRIP@
EXE	= @EXEEXT@
INSTALL = @INSTALL@
MKDIR   = ../mkinstalldirs

# Installation paths
prefix      = @prefix@
basedir     = @prefix@/helium-$(VERSION)
exec_prefix = @exec_prefix@
bindir      = @bindir@          # Typically, this is in your path
hbindir     = $(basedir)/bin    # typically, this one is not. Used to support multiple versions.
libdir      = $(basedir)/lib
demodir     = $(basedir)/demo

status :
	@echo "*******************************************************************"
	@echo "Build process complete."
	@echo "Type \"make install\" to install."
	@echo "  Binaries will go into  $(bindir)"
	@echo "               and into  $(hbindir)"
	@echo "  Libraries will go into $(libdir)"
	@echo "  Demos will go into     $(demodir)"
	@echo "  To use this newly installed version, you might need to put a"
	@echo "  configuration file .hint.conf into your home directory: $(HOME)."
	@echo "  A default version of this configuration file, called hint.conf,"
	@echo "  can be found in $(basedir)."
	@echo "*******************************************************************"

HC	= @WithHc@
IFACES	= $(LVMLIBDIR):./StaticAnalysis/Directives:./StaticAnalysis/StaticChecks:./StaticAnalysis/Heuristics:./StaticAnalysis/Messages
GHCWARN = -Wall
HC_OPTS = --make $(GHCWARN) -odir $(OUTDIR) -hidir $(OUTDIR) -i$(IFACES) $(EXTRA_HC_OPTS)

AG      = @WithAG@
AG_OPTS = -mscfr

# AG sources
AGSOURCES = \
     Syntax/UHA_Pretty.hs Syntax/UHA_OneLine.hs \
     StaticAnalysis/StaticChecks/StaticChecks.hs StaticAnalysis/Inferencers/TypeInferencing.hs \
     StaticAnalysis/Inferencers/KindInferencing.hs \
     CodeGeneration/CodeGeneration.hs \
     Syntax/UHA_Syntax.hs ModuleSystem/ExtractImportDecls.hs StaticAnalysis/Directives/TS_Syntax.hs \
     StaticAnalysis/Directives/TS_Apply.hs StaticAnalysis/Directives/TS_Analyse.hs \
     StaticAnalysis/Directives/TS_CoreSyntax.hs \
     StaticAnalysis/Directives/TS_ToCore.hs Parser/ResolveOperators.hs

# The main target
compiler: $(AGSOURCES)
	@echo "****************************************************"
	@echo "  Helium: the Helium compiler"
	@echo "****************************************************"
	$(HC)	-o $(HELIUMBINDIR)/$(MAIN)$(EXE) $(HC_OPTS) main/Main.hs
ifdef STRIP
	$(STRIP) $(HELIUMBINDIR)/$(MAIN)$(EXE)
endif

all: ag compiler coreasm lvmrun libraries texthint status

coreasm:
	@echo "****************************************************"
	@echo "  COREASM: the Core code compiler"
	@echo "****************************************************"
	cd $(LVMLIBDIR); $(MAKE) EXTRA_HC_OPTS="$(EXTRA_HC_OPTS)"

lvmrun:
	@echo "****************************************************"
	@echo "  LVMRUN: the bytecode interpreter"
	@echo "****************************************************"
	cd $(LVMRUNTIMEDIR); $(MAKE)

.SUFFIXES : .o .hs .hi .lhs .hc	.s .ag

$(LVMLIBDIR)/common/ghc/Special.hi: $(LVMLIBDIR)/common/ghc/Special.hs
	# GHC Special.hs
	$(HC) -c $< -fglasgow-exts $(HC_OPTS) 

libraries:
	@echo "****************************************************"
	@echo "  Libraries (with overloading)"
	@echo "****************************************************"
	cd ../lib; $(MAKE) 
	@echo "****************************************************"
	@echo "  Simple libraries (without overloading)"
	@echo "****************************************************"
	cd ../lib/simple; $(MAKE) 

texthint:
	@echo "****************************************************"
	@echo "  TextHint: the textual Helium interpreter"
	@echo "****************************************************"
	$(HC) -o $(HELIUMBINDIR)/texthint$(EXE) $(HC_OPTS) texthint/Main.hs
	$(STRIP) $(HELIUMBINDIR)/texthint$(EXE)

# AG sources

ag : $(AGSOURCES)

cleanag : 
	$(RM) $(AGSOURCES)

ifdef AG
Parser/ResolveOperators.hs : \
		Parser/ResolveOperators.ag Syntax/UHA_Syntax.ag
	# AG ResolveOperators
	cd Parser;$(AG) $(AG_OPTS) --self --module=Parser.ResolveOperators ResolveOperators.ag;cd ..

Syntax/UHA_Pretty.hs : \
		Syntax/UHA_Pretty.ag Syntax/UHA_Syntax.ag
	# AG UHA_Pretty
	cd Syntax;$(AG) $(AG_OPTS) --module=Syntax.UHA_Pretty UHA_Pretty.ag;cd ..

Syntax/UHA_OneLine.hs : \
		Syntax/UHA_OneLine.ag Syntax/UHA_Syntax.ag
	# AG UHA_OneLine
	cd Syntax;$(AG) $(AG_OPTS) --self --module=Syntax.UHA_OneLine UHA_OneLine.ag;cd ..

StaticAnalysis/StaticChecks/StaticChecks.hs : \
		StaticAnalysis/StaticChecks/StaticChecks.ag \
		StaticAnalysis/StaticChecks/KindChecking.ag \
                StaticAnalysis/StaticChecks/TopLevelErrors.ag \
                StaticAnalysis/StaticChecks/MiscErrors.ag \
                StaticAnalysis/StaticChecks/Warnings.ag \
		StaticAnalysis/StaticChecks/ExportErrors.ag \
                StaticAnalysis/StaticChecks/Collect.ag \
                StaticAnalysis/StaticChecks/HeliumPartialSyntax.ag \
                StaticAnalysis/StaticChecks/Scope.ag \
                StaticAnalysis/StaticChecks/ScopeErrors.ag \
		Syntax/UHA_Syntax.ag 
                
	# AG StaticAnalysis
	cd StaticAnalysis/StaticChecks;$(AG) $(AG_OPTS) --self StaticChecks.ag;cd ../..

StaticAnalysis/Inferencers/TypeInferencing.hs : \
		StaticAnalysis/Inferencers/TypeInferencing.ag \
                StaticAnalysis/Inferencers/TypeInferenceRules.ag \
                StaticAnalysis/Inferencers/TypeInferenceOverloading.ag \
                StaticAnalysis/Inferencers/TypeInferenceCollect.ag \
                StaticAnalysis/Inferencers/TypeInferenceInfo.ag \
                StaticAnalysis/Inferencers/PatternMatchWarnings.ag \
                StaticAnalysis/Inferencers/LocalInfo.ag \
                StaticAnalysis/Inferencers/GlobalInfo.ag \
                StaticAnalysis/StaticChecks/HeliumPartialSyntax.ag \
		Syntax/UHA_Syntax.ag \
                StaticAnalysis/StaticChecks/Scope.ag\
                StaticAnalysis/Directives/TS_PatternMatching.ag
                
	# AG TypeInferencing
	cd StaticAnalysis/Inferencers;$(AG) $(AG_OPTS) --self --module=StaticAnalysis.Inferencers.TypeInferencing TypeInferencing.ag;cd ../..

StaticAnalysis/Inferencers/KindInferencing.hs : \
		StaticAnalysis/Inferencers/KindInferencing.ag \
                Syntax/UHA_Syntax.ag \
                
	# AG TypeInferencing
	cd StaticAnalysis/Inferencers;$(AG) $(AG_OPTS) --self --module=StaticAnalysis.Inferencers.KindInferencing KindInferencing.ag;cd ../..

CodeGeneration/CodeGeneration.hs : \
		CodeGeneration/CodeGeneration.ag \
		Syntax/UHA_Syntax.ag CodeGeneration/ToCoreModule.ag CodeGeneration/ToCoreDecl.ag \
		CodeGeneration/ToCoreExpr.ag CodeGeneration/ToCorePat.ag CodeGeneration/ToCoreName.ag
	# AG CodeGeneration
	cd CodeGeneration;$(AG) $(AG_OPTS) --self --module=CodeGeneration.CodeGeneration CodeGeneration.ag;cd ..

Syntax/UHA_Syntax.hs : Syntax/UHA_Syntax.ag
	# AG UHA_Syntax
	cd Syntax;$(AG) -dmr --module=Syntax.UHA_Syntax UHA_Syntax.ag;cd ..

ModuleSystem/ExtractImportDecls.hs : \
		ModuleSystem/ExtractImportDecls.ag CodeGeneration/ToCoreName.ag Syntax/UHA_Syntax.ag
	# AG ExtractImportDecls
	cd ModuleSystem;$(AG) $(AG_OPTS) --self --module=ModuleSystem.ExtractImportDecls ExtractImportDecls.ag;cd ..
        
StaticAnalysis/Directives/TS_Syntax.hs : \
	StaticAnalysis/Directives/TS_Syntax.ag
	# AG TS_Syntax
	cd StaticAnalysis/Directives;$(AG) -dmr TS_Syntax.ag;cd ../..

StaticAnalysis/Directives/TS_Analyse.hs : \
        StaticAnalysis/Directives/TS_Syntax.ag \
        StaticAnalysis/Directives/TS_Collect.ag \
        StaticAnalysis/Directives/TS_Analyse.ag \
        Syntax/UHA_Syntax.ag 
	# AG TS_Analyse
	cd StaticAnalysis/Directives;$(AG) $(AG_OPTS) --self TS_Analyse.ag;cd ../..

StaticAnalysis/Directives/TS_Apply.hs : \
        StaticAnalysis/Directives/TS_Syntax.ag \
        StaticAnalysis/Directives/TS_Collect.ag \
        StaticAnalysis/Directives/TS_Apply.ag \
        StaticAnalysis/Directives/TS_CoreSyntax.ag \
        Syntax/UHA_Syntax.ag \
	# AG TS_Syntax
	cd StaticAnalysis/Directives;$(AG) -mscf TS_Apply.ag;cd ../..

StaticAnalysis/Directives/TS_CoreSyntax.hs : \
	StaticAnalysis/Directives/TS_CoreSyntax.ag \
	# AG TS_CoreSyntax
	cd StaticAnalysis/Directives;$(AG) -md TS_CoreSyntax.ag;cd ../..

StaticAnalysis/Directives/TS_ToCore.hs : \
        StaticAnalysis/Directives/TS_Syntax.ag \
        StaticAnalysis/Directives/TS_Collect.ag \
        StaticAnalysis/Directives/TS_ToCore.ag \
        Syntax/UHA_Syntax.ag \
        Syntax/UHA_OneLine.ag 
	# AG TS_Syntax
	cd StaticAnalysis/Directives;$(AG) -mscrf --self TS_ToCore.ag;cd ../..
                        
endif

# Standard suffix rules
.o.hi:
	@:

.lhs.o:
	$(HC) -c $< $(HC_OPTS)

.hs.o:
	$(HC) -c $< $(HC_OPTS)

.hs.hi:
	$(HC) -c $< $(HC_OPTS) 

.lhs.hi:
	$(HC) -c $< $(HC_OPTS)

.ag.hs:
	$(AG) -a $<

# Ignoring files for SVN repository

ignore :
	svn propset -R svn:ignore -F ../svn-ignore ..


# Clean	up
clean:
	$(RM) -rf $(OUTDIR)
	$(RM) `find . -name "*.o" -print`
	$(RM) `find . -name "*.hi" -print`
	$(RM) `find . -name "*.class" -print`
	$(RM) ../lib/*.lvm
	$(RM) ../lib/simple/*.lvm
	$(RM) $(HELIUMBINDIR)/$(MAIN)$(EXE)
	$(RM) $(HELIUMBINDIR)/texthint$(EXE)	
	cd $(LVMLIBDIR); $(MAKE) clean
	cd $(LVMRUNTIMEDIR); $(MAKE) clean