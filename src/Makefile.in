#-----------------------------------------------------------------------
#  The Helium Compiler
#-----------------------------------------------------------------------

# make		     - build everything that is needed
# make clean	 - remove .hi and .o files

default: all

.PHONY : default compiler all coreasm lvmrun libraries clean \
         smaller install movetohome status

VERSION = 1.7

#directories
HELIUMBINDIR = ../bin
LVMLIBDIR  = ../../lvm/src/lib
LVMRUNTIMEDIR  = ../../lvm/src/runtime
TOPDIR = ../../Top/src/Top

#the main program you want to generate
MAIN	= helium
UPX	= @UPX@
STRIP   = @STRIP@
EXE	= @EXEEXT@
INSTALL = @INSTALL@
MKDIR   = ../mkinstalldirs

# Installation paths
prefix      = @prefix@
basedir     = @prefix@/helium-$(VERSION)
exec_prefix = @exec_prefix@
bindir      = @bindir@          # Typically, this is in your path
hbindir     = $(basedir)/bin    # typically, this one is not. Used to support multiple versions.
libdir      = $(basedir)/lib
demodir     = $(basedir)/demo

status :
	@echo "*******************************************************************"
	@echo "Build process complete."
	@echo "Type \"make install\" to install."
	@echo "  Binaries will go into  $(bindir)"
	@echo "               and into  $(hbindir)"
	@echo "  Libraries will go into $(libdir)"
	@echo "  Demos will go into     $(demodir)"
	@echo "  A default .hint-$(VERSION).conf will be generated in: $(HOME)" 
	@echo "  This ensures that Hint and texthint will use the newly installed"
	@echo "  version."
	@echo "*******************************************************************"

HC	= @WithHc@
IFACES	= $(LVMLIBDIR)/common:$(LVMLIBDIR)/common/ghc:$(LVMLIBDIR)/lvm:$(LVMLIBDIR)/asm:$(LVMLIBDIR)/core:./utils:./parser:./staticanalysis/miscellaneous:./staticanalysis/inferencers:./staticanalysis/directives:./staticanalysis/staticchecks:./staticanalysis/heuristics:./staticanalysis/messages:./syntax:./codegeneration:./main:./modulesystem:$(TOPDIR)/..:./texthint
GHCWARN = -W -fwarn-tabs -fwarn-duplicate-exports -fwarn-orphans -fwarn-unused-imports # -fwarn-missing-signatures
HC_OPTS = --make $(GHCWARN) -static -i$(IFACES) $(EXTRA_HC_OPTS)

AG      = @WithAG@
AG_OPTS = -mscfr

# AG sources
AGSOURCES = \
     syntax/UHA_Pretty.hs syntax/UHA_OneLine.hs \
     staticanalysis/staticchecks/StaticChecks.hs staticanalysis/inferencers/TypeInferencing.hs \
     staticanalysis/inferencers/KindInferencing.hs \
     codegeneration/CodeGeneration.hs \
     syntax/UHA_Syntax.hs modulesystem/ExtractImportDecls.hs staticanalysis/directives/TS_Syntax.hs \
     staticanalysis/directives/TS_Apply.hs staticanalysis/directives/TS_Analyse.hs \
     staticanalysis/directives/TS_CoreSyntax.hs \
     staticanalysis/directives/TS_ToCore.hs parser/ResolveOperators.hs

# The main target
compiler: $(AGSOURCES)
	@echo "****************************************************"
	@echo "  Helium: the Helium compiler"
	@echo "****************************************************"
	$(HC)	-o $(HELIUMBINDIR)/$(MAIN)$(EXE) $(HC_OPTS) main/Main.hs
ifdef STRIP
	$(STRIP) $(HELIUMBINDIR)/$(MAIN)$(EXE)
endif

all: ag compiler coreasm lvmrun libraries texthint status

coreasm:
	@echo "****************************************************"
	@echo "  COREASM: the Core code compiler"
	@echo "****************************************************"
	cd $(LVMLIBDIR); $(MAKE) EXTRA_HC_OPTS="$(EXTRA_HC_OPTS)"

lvmrun:
	@echo "****************************************************"
	@echo "  LVMRUN: the bytecode interpreter"
	@echo "****************************************************"
	cd $(LVMRUNTIMEDIR); $(MAKE)

.SUFFIXES : .o .hs .hi .lhs .hc	.s .ag

$(LVMLIBDIR)/common/ghc/Special.hi: $(LVMLIBDIR)/common/ghc/Special.hs
	# GHC Special.hs
	$(HC) -c $< -fglasgow-exts $(HC_OPTS) 

libraries:
	@echo "****************************************************"
	@echo "  Libraries (with overloading)"
	@echo "****************************************************"
	cd ../lib; $(MAKE) 
	@echo "****************************************************"
	@echo "  Simple libraries (without overloading)"
	@echo "****************************************************"
	cd ../lib/simple; $(MAKE) 

texthint:
	@echo "****************************************************"
	@echo "  TextHint: the textual Helium interpreter"
	@echo "****************************************************"
	$(HC) $(HC_OPTS) -o $(HELIUMBINDIR)/texthint$(EXE) texthint/Main.hs
	$(STRIP) $(HELIUMBINDIR)/texthint$(EXE)

# AG sources

ag : $(AGSOURCES)

cleanag : 
	$(RM) $(AGSOURCES)

ifdef AG
parser/ResolveOperators.hs : \
		parser/ResolveOperators.ag syntax/UHA_Syntax.ag
	# AG ResolveOperators
	cd parser;$(AG) $(AG_OPTS) --self ResolveOperators.ag;cd ..

syntax/UHA_Pretty.hs : \
		syntax/UHA_Pretty.ag syntax/UHA_Syntax.ag
	# AG UHA_Pretty
	cd syntax;$(AG) $(AG_OPTS) UHA_Pretty.ag;cd ..

syntax/UHA_OneLine.hs : \
		syntax/UHA_OneLine.ag syntax/UHA_Syntax.ag
	# AG UHA_OneLine
	cd syntax;$(AG) $(AG_OPTS) --self UHA_OneLine.ag;cd ..

staticanalysis/staticchecks/StaticChecks.hs : \
		staticanalysis/staticchecks/StaticChecks.ag \
		staticanalysis/staticchecks/KindChecking.ag \
                staticanalysis/staticchecks/TopLevelErrors.ag \
                staticanalysis/staticchecks/MiscErrors.ag \
                staticanalysis/staticchecks/Warnings.ag \
		staticanalysis/staticchecks/ExportErrors.ag \
                staticanalysis/staticchecks/Collect.ag \
                staticanalysis/staticchecks/HeliumPartialSyntax.ag \
                staticanalysis/staticchecks/Scope.ag \
                staticanalysis/staticchecks/ScopeErrors.ag \
		syntax/UHA_Syntax.ag 
                
	# AG StaticAnalysis
	cd staticanalysis/staticchecks;$(AG) $(AG_OPTS) --self StaticChecks.ag;cd ../..

staticanalysis/inferencers/TypeInferencing.hs : \
		staticanalysis/inferencers/TypeInferencing.ag \
                staticanalysis/inferencers/TypeInferenceRules.ag \
                staticanalysis/inferencers/TypeInferenceOverloading.ag \
                staticanalysis/inferencers/TypeInferenceCollect.ag \
                staticanalysis/inferencers/TypeInferenceInfo.ag \
                staticanalysis/inferencers/PatternMatchWarnings.ag \
                staticanalysis/inferencers/LocalInfo.ag \
                staticanalysis/inferencers/GlobalInfo.ag \
                staticanalysis/staticchecks/HeliumPartialSyntax.ag \
		syntax/UHA_Syntax.ag \
                staticanalysis/staticchecks/Scope.ag\
                staticanalysis/directives/TS_PatternMatching.ag
                
	# AG TypeInferencing
	cd staticanalysis/inferencers;$(AG) $(AG_OPTS) --self TypeInferencing.ag;cd ../..

staticanalysis/inferencers/KindInferencing.hs : \
		staticanalysis/inferencers/KindInferencing.ag \
                syntax/UHA_Syntax.ag \
                
	# AG TypeInferencing
	cd staticanalysis/inferencers;$(AG) $(AG_OPTS) --self KindInferencing.ag;cd ../..

codegeneration/CodeGeneration.hs : \
		codegeneration/CodeGeneration.ag \
		syntax/UHA_Syntax.ag codegeneration/ToCoreModule.ag codegeneration/ToCoreDecl.ag \
		codegeneration/ToCoreExpr.ag codegeneration/ToCorePat.ag codegeneration/ToCoreName.ag
	# AG CodeGeneration
	cd codegeneration;$(AG) $(AG_OPTS) --self CodeGeneration.ag;cd ..

syntax/UHA_Syntax.hs : syntax/UHA_Syntax.ag
	# AG UHA_Syntax
	cd syntax;$(AG) -dmr UHA_Syntax.ag;cd ..

modulesystem/ExtractImportDecls.hs : \
		modulesystem/ExtractImportDecls.ag codegeneration/ToCoreName.ag syntax/UHA_Syntax.ag
	# AG ExtractImportDecls
	cd modulesystem;$(AG) $(AG_OPTS) --self ExtractImportDecls.ag;cd ..
        
staticanalysis/directives/TS_Syntax.hs : \
	staticanalysis/directives/TS_Syntax.ag
	# AG TS_Syntax
	cd staticanalysis/directives;$(AG) -dmr TS_Syntax.ag;cd ../..

staticanalysis/directives/TS_Analyse.hs : \
        staticanalysis/directives/TS_Syntax.ag \
        staticanalysis/directives/TS_Collect.ag \
        staticanalysis/directives/TS_Analyse.ag \
        syntax/UHA_Syntax.ag 
	# AG TS_Analyse
	cd staticanalysis/directives;$(AG) $(AG_OPTS) --self TS_Analyse.ag;cd ../..

staticanalysis/directives/TS_Apply.hs : \
        staticanalysis/directives/TS_Syntax.ag \
        staticanalysis/directives/TS_Collect.ag \
        staticanalysis/directives/TS_Apply.ag \
        staticanalysis/directives/TS_CoreSyntax.ag \
        syntax/UHA_Syntax.ag \
	# AG TS_Syntax
	cd staticanalysis/directives;$(AG) -mscf TS_Apply.ag;cd ../..

staticanalysis/directives/TS_CoreSyntax.hs : \
	staticanalysis/directives/TS_CoreSyntax.ag \
	# AG TS_CoreSyntax
	cd staticanalysis/directives;$(AG) -md TS_CoreSyntax.ag;cd ../..

staticanalysis/directives/TS_ToCore.hs : \
        staticanalysis/directives/TS_Syntax.ag \
        staticanalysis/directives/TS_Collect.ag \
        staticanalysis/directives/TS_ToCore.ag \
        syntax/UHA_Syntax.ag \
        syntax/UHA_OneLine.ag 
	# AG TS_Syntax
	cd staticanalysis/directives;$(AG) -mscrf --self TS_ToCore.ag;cd ../..
                        
endif

# Standard suffix rules
.o.hi:
	@:

.lhs.o:
	$(HC) -c $< $(HC_OPTS)

.hs.o:
	$(HC) -c $< $(HC_OPTS)

.hs.hi:
	$(HC) -c $< $(HC_OPTS) 

.lhs.hi:
	$(HC) -c $< $(HC_OPTS)

.ag.hs:
	$(AG) -a $<

# Ignoring files for SVN repository

ignore :
	svn propset -R svn:ignore -F ../svn-ignore ..


# Clean	up
clean:
	$(RM) `find . -name "*.o" -print`
	$(RM) `find . -name "*.hi" -print`
	$(RM) `find . -name "*.class" -print`
	$(RM) ../lib/*.lvm
	$(RM) ../lib/simple/*.lvm
	$(RM) $(HELIUMBINDIR)/$(MAIN)$(EXE)
	$(RM) $(HELIUMBINDIR)/texthint$(EXE)	
	cd $(LVMLIBDIR); $(MAKE) clean
	cd $(LVMRUNTIMEDIR); $(MAKE) clean
	cd $(TOPDIR)/..; $(MAKE) clean 

# UTRECHT ONLY

smaller:
	# *** UPX helium, texthint & lvmrun
ifdef UPX
	$(UPX) -q -9 $(HELIUMBINDIR)/$(MAIN)$(EXE) || echo "helium is al gecomprimeerd"
	cd $(LVMRUNTIMEDIR); $(UPX) -q -9 lvmrun$(EXE)  || echo "lvmrun is al gecomprimeerd"
	$(UPX) -q -9 $(HELIUMBINDIR)/texthint$(EXE) || echo "texthint is al gecomprimeerd"
endif

install : smaller
	# *** Copy sources to library directory
	$(MKDIR) $(bindir) $(hbindir) $(libdir) $(libdir)/simple $(demodir) 
  # Copy library sources, non-overloaded
	$(INSTALL) -m 644 ../lib/simple/Prelude.hs $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/Char.hs $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/List.hs $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/Maybe.hs $(libdir)/simple
  # Copy library sources, overloaded
	$(INSTALL) -m 644 ../lib/Prelude.hs $(libdir)
	$(INSTALL) -m 644 ../lib/Char.hs $(libdir)
	$(INSTALL) -m 644 ../lib/List.hs $(libdir)
	$(INSTALL) -m 644 ../lib/Maybe.hs $(libdir)
  # Copy executables
	$(INSTALL) -m 755 $(HELIUMBINDIR)/$(MAIN)$(EXE) $(bindir)   # This now becomes the default helium
	$(INSTALL) -m 755 $(HELIUMBINDIR)/$(MAIN)$(EXE) $(hbindir)  # An additional one, to enable multiple heliums. I did not think it worthwhile to use symlinks.
	$(INSTALL) -m 755 $(LVMRUNTIMEDIR)/lvmrun$(EXE) $(bindir)
	$(INSTALL) -m 755 $(HELIUMBINDIR)/texthint$(EXE) $(bindir)
	$(INSTALL) -m 755 $(LVMRUNTIMEDIR)/lvmrun$(EXE) $(hbindir) # See above.
	$(INSTALL) -m 755 $(HELIUMBINDIR)/texthint$(EXE) $(hbindir) # See above.
	# *** Copying demos to demo directory
	$(INSTALL) -m 644 ../demo/Calendar.hs $(demodir)
	$(INSTALL) -m 644 ../demo/ParserLibrary.hs $(demodir)
	$(INSTALL) -m 644 ../demo/ParserDemo.hs $(demodir)
	$(INSTALL) -m 644 ../demo/TicTacToe.hs $(demodir)
        
	# *** Copy generated lvms and touch them
	$(INSTALL) -m 644 ../lib/simple/Char.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/HeliumLang.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/List.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/LvmException.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/LvmIO.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/LvmLang.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/Maybe.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/Prelude.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/PreludePrim.lvm $(libdir)/simple
	$(INSTALL) -m 644 ../lib/simple/Prelude.type $(libdir)/simple
	# *** Copy generated overloaded lvms and touch them
	$(INSTALL) -m 644 ../lib/Char.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/HeliumLang.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/List.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/LvmException.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/LvmIO.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/LvmLang.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/Maybe.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/Prelude.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/PreludePrim.lvm $(libdir)
	$(INSTALL) -m 644 ../lib/Prelude.type $(libdir)
	$(INSTALL) -m 644 hint.conf $(basedir)
	touch $(libdir)/simple/*.lvm
	touch $(libdir)/*.lvm
	# Maybe at some point we want a separate simple script for this. 
	$(INSTALL) -m -b 666 hint.conf "$(HOME)/.hint-$(VERSION).conf"  # Unfortunately, this will have root ownership
	ln -s -f "$(HOME)/.hint-$(VERSION).conf" "$(HOME)/.hint.conf"  # Makes it the default.

movetohome: smaller
	# *** Copying simple library sources to distribution directory
	cp ../lib/simple/Prelude.hs ../lib/simple/List.hs ../lib/simple/Maybe.hs ../distribution/helium/lib/simple
	# *** Copying overloaded library sources to distribution directory
	cp ../lib/simple/Prelude.hs ../lib/simple/List.hs ../lib/simple/Maybe.hs ../lib/Char.hs ../distribution/helium/lib
	# *** Copying executables to projects directory
	cp $(HELIUMBINDIR)/$(MAIN)$(EXE) ../distribution/helium/bin
	cp $(LVMRUNTIMEDIR)/lvmrun$(EXE) ../distribution/helium/bin
	cp $(HELIUMBINDIR)/texthint$(EXE) ../distribution/helium/bin
	# *** Copy simple and overloaded generated lvms and touch them
	cp ../lib/simple/*.lvm ../distribution/helium/lib/simple
	cp ../lib/*.lvm ../distribution/helium/lib
	touch ../distribution/helium/lib/*.lvm # so that they are seen as up to date
	touch ../distribution/helium/lib/simple/*.lvm # so that they are seen as up to date

movetobbl: smaller
	# *** Copying library sources to projects directory
	cp ../lib/simple/Prelude.hs ../lib/simple/List.hs ../lib/simple/Maybe.hs /cygdrive/r/helium/lib/simple
	# *** Copying overloaded library sources to projects directory
	cp ../lib/simple/Prelude.hs ../lib/simple/List.hs ../lib/simple/Maybe.hs ../lib/Char.hs /cygdrive/r/helium/lib	
	# *** Copying executables to projects directory
	cp $(HELIUMBINDIR)/$(MAIN)$(EXE) /cygdrive/r/helium/bin
	cp $(LVMRUNTIMEDIR)/lvmrun$(EXE) /cygdrive/r/helium/bin
	cp $(HELIUMBINDIR)/texthint$(EXE) /cygdrive/r/helium/bin
	# *** Copy generated simple and overloaded lvms and touch them
	cp ../lib/simple/*.lvm /cygdrive/r/helium/lib/simple
	cp ../lib/*.lvm /cygdrive/r/helium/lib
	touch /cygdrive/r/helium/lib/simple/*.lvm # so that they are seen as up to date	
	touch /cygdrive/r/helium/lib/*.lvm # so that they are seen as up to date
	# DON'T FORGET TO CHECK PERMISSIONS
	cp ../../hint/release/Hint.jar /cygdrive/r/helium/bin

