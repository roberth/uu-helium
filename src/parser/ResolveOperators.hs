-- do not edit; automatically generated by UU.AG
module ResolveOperators where

import UHA_Utils
import UHA_Syntax 
import UHA_Range
import OperatorTable
import Char
import ParseLibrary(intUnaryMinusName, floatUnaryMinusName)
import Utils
import Messages


data ResolveError = 
    Ambiguous Assoc Name Assoc Name

instance HasMessage ResolveError where
    getRanges (Ambiguous _ n1 _ n2) = 
        [ getNameRange n1, getNameRange n2 ]
    
    getMessage (Ambiguous assoc1 op1 assoc2 op2) = 
        let 
            assocString AssocRight = "right-associative"
            assocString AssocLeft  = "left-associative"
            assocString AssocNone  = "non-associative"

            firstLine =
                    "Ambiguous use of "
                ++  assocString (assoc1)
                ++  " operator "
                ++  show op1
            secondLine = 
                    "with "
                ++  assocString (assoc2)
                ++  " operator "
                ++  show op2
        in [ MessageOneLiner ( MessageString firstLine) 
           , MessageOneLiner ( MessageString ("    " ++ secondLine ))
           ]
        
resolveOperators :: OperatorTable -> Module -> (Module, [ResolveError])
resolveOperators opTable m = 
    let (errs, newModule) = sem_Module m opTable []
    in (newModule, errs)

expression opTable e = -- !!! errors ignored
    let (errs, newE) = sem_Expression e opTable [] 
    in newE

operatorsFromModule :: Module -> OperatorTable
operatorsFromModule m =
    concatMap declToOps (collectInfixdecls m)
  where
    declToOps (Declaration_Fixity _ f (MaybeInt_Just p) os) = 
        [ (o, (p, fixityToAssoc f)) | o <- os ]
    fixityToAssoc f = case f of
        Fixity_Infixl _ -> AssocLeft
        Fixity_Infixr _ -> AssocRight
        Fixity_Infix  _ -> AssocNone

collectInfixdecls :: Module -> [Declaration]
collectInfixdecls 
    (Module_Module _ _ _ (Body_Body _ _ ds)) = filter isInfixdecl ds
    where
        isInfixdecl (Declaration_Fixity _ _ _ _) = True
        isInfixdecl _ = False
            
type State expr = 
    ( [Name] -- operator stack
    , [expr] -- expression/pattern stack
    , [ResolveError]
    )

resolveExpression :: OperatorTable -> [Expression] -> (Expression, [ResolveError])
resolveExpression opTable es = resolve opTable es (getOp, applyMinus, applyBinary) ([], [], []) 
  where
    getOp (Expression_Variable (Range_Range Position_Unknown Position_Unknown) n) = Just n
    getOp (Expression_Constructor (Range_Range Position_Unknown Position_Unknown) n) = Just n
    getOp _ = Nothing
    
    applyMinus :: Name -> Expression -> Expression
    applyMinus n e
        | n == intUnaryMinusName =
            Expression_Negate      (mergeRanges (getNameRange n) (getExprRange e)) e
        | n == floatUnaryMinusName = 
            Expression_NegateFloat (mergeRanges (getNameRange n) (getExprRange e)) e
        | otherwise = internalError 
            "ResolveOperators.hs" "resolveExpression.applyMinus" "unknown unary operator"        
            
    applyBinary :: Name -> Expression -> Expression -> Expression
    applyBinary n e1 e2 =
        Expression_InfixApplication 
            (mergeRanges (getExprRange e1) (getExprRange e2)) 
            (MaybeExpression_Just e1) 
            ((if isConstructor n then Expression_Constructor else Expression_Variable) (getNameRange n) n)
            (MaybeExpression_Just e2)
        
resolvePattern :: OperatorTable -> [Pattern] -> (Pattern, [ResolveError])
resolvePattern opTable ps = resolve opTable ps (getOp, applyMinus, applyBinary) ([], [], []) 
  where
    getOp (Pattern_Variable (Range_Range Position_Unknown Position_Unknown) n) = Just n
    getOp _ = Nothing
    
    applyMinus :: Name -> Pattern -> Pattern
    applyMinus n p@(Pattern_Literal r l) 
        | n == intUnaryMinusName =
            Pattern_Negate (mergeRanges (getNameRange n) r) l
        | n == floatUnaryMinusName = 
            Pattern_NegateFloat (mergeRanges (getNameRange n) r) l            
        | otherwise = internalError 
                "ResolveOperators.hs" "resolvePattern.applyMinus" "unknown unary operator"        
    applyMinus n _ =
        internalError "ResolveOperators" "resolvePattern" "in patterns unary minus is only allowed in front of literals"         
        
    applyBinary :: Name -> Pattern -> Pattern -> Pattern
    applyBinary n p1 p2 =
        Pattern_InfixConstructor 
            (mergeRanges (getPatRange p1) (getPatRange p2)) 
            p1 n p2

resolve :: 
    OperatorTable -> 
    [expr] -> 
    ( expr -> Maybe Name -- get operator name (if it is one)
    , Name -> expr -> expr -- apply minus
    , Name -> expr -> expr -> expr -- apply binary
    ) 
    -> State expr -> (expr, [ResolveError])
resolve opTable exprs fs@(getOp, applyMinus, applyBinary) state = 
    case exprs of 
        [] -> cleanup state
        (expr:exprs) ->
            let newState = 
                    case getOp expr of
                        Nothing   -> pushExpr expr state
                        Just name -> pushOp opTable name state
            in
                resolve opTable exprs fs newState
  where
--    popOp :: State expr -> State expr
    popOp (op:ops, exprs, errs) 
        | isUnary op =
            case exprs of
                (expr:rest) -> (ops, applyMinus op expr : rest, errs)
                _ -> internalError "ResolveOperators" "popOp" "1"
        | otherwise =
            case exprs of
                (expr2:expr1:rest) -> (ops, applyBinary op expr1 expr2 : rest, errs)
                _ -> internalError "ResolveOperators" "popOp" "2"
--    pushOp :: Name -> State expr -> State expr
    pushOp opTable op state@(top:ops, exprs, errs) =
        case strongerOp opTable top op of
            Left True -> pushOp opTable op (popOp state)
            Left False -> (op:top:ops, exprs, errs)
            Right err -> (op:top:ops, exprs, err : errs) -- arbitrary choice
    pushOp _ op ([], exprs, errs) =
        ([op], exprs, errs)
--    cleanup :: State expr -> expr
    cleanup state@(_:_, _, _)       = cleanup (popOp state)
    cleanup state@(_, [expr], errs) = (expr, errs)
    cleanup _ = internalError "ResolveOperators" "cleanup" "invalid state"
    

pushExpr :: expr -> State expr -> State expr
pushExpr expr (ops, exprs, errs) =
    (ops, expr:exprs, errs)
                
strongerOp :: OperatorTable -> Name -> Name -> Either Bool ResolveError
strongerOp opTable op1 op2
    | isBinary op1 && isBinary op2 =
        if prio1 == prio2 then
            if assoc1 == AssocLeft && assoc2 == AssocLeft then
                Left True
            else if assoc1 == AssocRight && assoc2 == AssocRight then
                Left False
            else
                Right (Ambiguous assoc1 op1 assoc2 op2)
        else
            Left (prio1 > prio2)
    | isUnary  op1 && isBinary op2 = 
        Left (prio1 >= prio2)
    | isUnary  op2 = 
        Left False
    | otherwise = internalError "ResolveOperators" "strongerOp" "unable to determine which operator binds stronger"
  where
    assoc1 = assoc opTable op1
    assoc2 = assoc opTable op2
    prio1 = prio opTable op1
    prio2 = prio opTable op2

isUnary :: Name -> Bool
isUnary name = name `elem` [ intUnaryMinusName, floatUnaryMinusName ]

isBinary :: Name -> Bool
isBinary = not . isUnary

-- Alternative -------------------------------------------------
-- semantic domain
type T_Alternative = (OperatorTable) ->
                     ( [ResolveError] ) ->
                     ( ( [ResolveError] ),(Alternative))
-- cata
sem_Alternative :: (Alternative) ->
                   (T_Alternative)
sem_Alternative ((Alternative_Alternative (_range) (_pattern) (_righthandside))) =
    (sem_Alternative_Alternative ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_RightHandSide (_righthandside))))
sem_Alternative ((Alternative_Empty (_range))) =
    (sem_Alternative_Empty ((sem_Range (_range))))
sem_Alternative_Alternative :: (T_Range) ->
                               (T_Pattern) ->
                               (T_RightHandSide) ->
                               (T_Alternative)
sem_Alternative_Alternative (_range) (_pattern) (_righthandside) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Alternative_Alternative _range_self _pattern_self _righthandside_self
        ( _range_self) =
            (_range )
        ( _pattern_resolveErrors,_pattern_self) =
            (_pattern (_lhs_opTable) (_lhs_resolveErrors))
        ( _righthandside_resolveErrors,_righthandside_self) =
            (_righthandside (_lhs_opTable) (_pattern_resolveErrors))
    in  ( _righthandside_resolveErrors,_self)
sem_Alternative_Empty :: (T_Range) ->
                         (T_Alternative)
sem_Alternative_Empty (_range) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Alternative_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_resolveErrors,_self)
-- Alternatives ------------------------------------------------
-- semantic domain
type T_Alternatives = (OperatorTable) ->
                      ( [ResolveError] ) ->
                      ( ( [ResolveError] ),(Alternatives))
-- cata
sem_Alternatives :: (Alternatives) ->
                    (T_Alternatives)
sem_Alternatives (list) =
    (foldr (sem_Alternatives_Cons) (sem_Alternatives_Nil) ((map sem_Alternative list)))
sem_Alternatives_Cons :: (T_Alternative) ->
                         (T_Alternatives) ->
                         (T_Alternatives)
sem_Alternatives_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_Alternatives_Nil :: (T_Alternatives)
sem_Alternatives_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- AnnotatedType -----------------------------------------------
-- semantic domain
type T_AnnotatedType = ( (AnnotatedType))
-- cata
sem_AnnotatedType :: (AnnotatedType) ->
                     (T_AnnotatedType)
sem_AnnotatedType ((AnnotatedType_AnnotatedType (_range) (_strict) (_type))) =
    (sem_AnnotatedType_AnnotatedType ((sem_Range (_range))) (_strict) ((sem_Type (_type))))
sem_AnnotatedType_AnnotatedType :: (T_Range) ->
                                   (Bool) ->
                                   (T_Type) ->
                                   (T_AnnotatedType)
sem_AnnotatedType_AnnotatedType (_range) (_strict) (_type) =
    let (_self) =
            AnnotatedType_AnnotatedType _range_self _strict _type_self
        ( _range_self) =
            (_range )
        ( _type_self) =
            (_type )
    in  ( _self)
-- AnnotatedTypes ----------------------------------------------
-- semantic domain
type T_AnnotatedTypes = ( (AnnotatedTypes))
-- cata
sem_AnnotatedTypes :: (AnnotatedTypes) ->
                      (T_AnnotatedTypes)
sem_AnnotatedTypes (list) =
    (foldr (sem_AnnotatedTypes_Cons) (sem_AnnotatedTypes_Nil) ((map sem_AnnotatedType list)))
sem_AnnotatedTypes_Cons :: (T_AnnotatedType) ->
                           (T_AnnotatedTypes) ->
                           (T_AnnotatedTypes)
sem_AnnotatedTypes_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_AnnotatedTypes_Nil :: (T_AnnotatedTypes)
sem_AnnotatedTypes_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Body --------------------------------------------------------
-- semantic domain
type T_Body = (OperatorTable) ->
              ( [ResolveError] ) ->
              ( ( [ResolveError] ),(Body))
-- cata
sem_Body :: (Body) ->
            (T_Body)
sem_Body ((Body_Body (_range) (_importdeclarations) (_declarations))) =
    (sem_Body_Body ((sem_Range (_range))) ((sem_ImportDeclarations (_importdeclarations))) ((sem_Declarations (_declarations))))
sem_Body_Body :: (T_Range) ->
                 (T_ImportDeclarations) ->
                 (T_Declarations) ->
                 (T_Body)
sem_Body_Body (_range) (_importdeclarations) (_declarations) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Body_Body _range_self _importdeclarations_self _declarations_self
        ( _range_self) =
            (_range )
        ( _importdeclarations_self) =
            (_importdeclarations )
        ( _declarations_resolveErrors,_declarations_self) =
            (_declarations (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _declarations_resolveErrors,_self)
-- Constructor -------------------------------------------------
-- semantic domain
type T_Constructor = ( (Constructor))
-- cata
sem_Constructor :: (Constructor) ->
                   (T_Constructor)
sem_Constructor ((Constructor_Constructor (_range) (_constructor) (_types))) =
    (sem_Constructor_Constructor ((sem_Range (_range))) ((sem_Name (_constructor))) ((sem_AnnotatedTypes (_types))))
sem_Constructor ((Constructor_Infix (_range) (_leftType) (_constructorOperator) (_rightType))) =
    (sem_Constructor_Infix ((sem_Range (_range))) ((sem_AnnotatedType (_leftType))) ((sem_Name (_constructorOperator))) ((sem_AnnotatedType (_rightType))))
sem_Constructor ((Constructor_Record (_range) (_constructor) (_fieldDeclarations))) =
    (sem_Constructor_Record ((sem_Range (_range))) ((sem_Name (_constructor))) ((sem_FieldDeclarations (_fieldDeclarations))))
sem_Constructor_Constructor :: (T_Range) ->
                               (T_Name) ->
                               (T_AnnotatedTypes) ->
                               (T_Constructor)
sem_Constructor_Constructor (_range) (_constructor) (_types) =
    let (_self) =
            Constructor_Constructor _range_self _constructor_self _types_self
        ( _range_self) =
            (_range )
        ( _constructor_self) =
            (_constructor )
        ( _types_self) =
            (_types )
    in  ( _self)
sem_Constructor_Infix :: (T_Range) ->
                         (T_AnnotatedType) ->
                         (T_Name) ->
                         (T_AnnotatedType) ->
                         (T_Constructor)
sem_Constructor_Infix (_range) (_leftType) (_constructorOperator) (_rightType) =
    let (_self) =
            Constructor_Infix _range_self _leftType_self _constructorOperator_self _rightType_self
        ( _range_self) =
            (_range )
        ( _leftType_self) =
            (_leftType )
        ( _constructorOperator_self) =
            (_constructorOperator )
        ( _rightType_self) =
            (_rightType )
    in  ( _self)
sem_Constructor_Record :: (T_Range) ->
                          (T_Name) ->
                          (T_FieldDeclarations) ->
                          (T_Constructor)
sem_Constructor_Record (_range) (_constructor) (_fieldDeclarations) =
    let (_self) =
            Constructor_Record _range_self _constructor_self _fieldDeclarations_self
        ( _range_self) =
            (_range )
        ( _constructor_self) =
            (_constructor )
        ( _fieldDeclarations_self) =
            (_fieldDeclarations )
    in  ( _self)
-- Constructors ------------------------------------------------
-- semantic domain
type T_Constructors = ( (Constructors))
-- cata
sem_Constructors :: (Constructors) ->
                    (T_Constructors)
sem_Constructors (list) =
    (foldr (sem_Constructors_Cons) (sem_Constructors_Nil) ((map sem_Constructor list)))
sem_Constructors_Cons :: (T_Constructor) ->
                         (T_Constructors) ->
                         (T_Constructors)
sem_Constructors_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Constructors_Nil :: (T_Constructors)
sem_Constructors_Nil  =
    let (_self) =
            []
    in  ( _self)
-- ContextItem -------------------------------------------------
-- semantic domain
type T_ContextItem = ( (ContextItem))
-- cata
sem_ContextItem :: (ContextItem) ->
                   (T_ContextItem)
sem_ContextItem ((ContextItem_ContextItem (_range) (_name) (_types))) =
    (sem_ContextItem_ContextItem ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Types (_types))))
sem_ContextItem_ContextItem :: (T_Range) ->
                               (T_Name) ->
                               (T_Types) ->
                               (T_ContextItem)
sem_ContextItem_ContextItem (_range) (_name) (_types) =
    let (_self) =
            ContextItem_ContextItem _range_self _name_self _types_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _types_self) =
            (_types )
    in  ( _self)
-- ContextItems ------------------------------------------------
-- semantic domain
type T_ContextItems = ( (ContextItems))
-- cata
sem_ContextItems :: (ContextItems) ->
                    (T_ContextItems)
sem_ContextItems (list) =
    (foldr (sem_ContextItems_Cons) (sem_ContextItems_Nil) ((map sem_ContextItem list)))
sem_ContextItems_Cons :: (T_ContextItem) ->
                         (T_ContextItems) ->
                         (T_ContextItems)
sem_ContextItems_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_ContextItems_Nil :: (T_ContextItems)
sem_ContextItems_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Declaration -------------------------------------------------
-- semantic domain
type T_Declaration = (OperatorTable) ->
                     ( [ResolveError] ) ->
                     ( ( [ResolveError] ),(Declaration))
-- cata
sem_Declaration :: (Declaration) ->
                   (T_Declaration)
sem_Declaration ((Declaration_Class (_range) (_context) (_simpletype) (_where))) =
    (sem_Declaration_Class ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_MaybeDeclarations (_where))))
sem_Declaration ((Declaration_Data (_range) (_context) (_simpletype) (_constructors) (_derivings))) =
    (sem_Declaration_Data ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_Constructors (_constructors))) ((sem_Names (_derivings))))
sem_Declaration ((Declaration_Default (_range) (_types))) =
    (sem_Declaration_Default ((sem_Range (_range))) ((sem_Types (_types))))
sem_Declaration ((Declaration_Empty (_range))) =
    (sem_Declaration_Empty ((sem_Range (_range))))
sem_Declaration ((Declaration_Fixity (_range) (_fixity) (_priority) (_operators))) =
    (sem_Declaration_Fixity ((sem_Range (_range))) ((sem_Fixity (_fixity))) ((sem_MaybeInt (_priority))) ((sem_Names (_operators))))
sem_Declaration ((Declaration_FunctionBindings (_range) (_bindings))) =
    (sem_Declaration_FunctionBindings ((sem_Range (_range))) ((sem_FunctionBindings (_bindings))))
sem_Declaration ((Declaration_Instance (_range) (_context) (_name) (_types) (_where))) =
    (sem_Declaration_Instance ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_Name (_name))) ((sem_Types (_types))) ((sem_MaybeDeclarations (_where))))
sem_Declaration ((Declaration_Newtype (_range) (_context) (_simpletype) (_constructor) (_derivings))) =
    (sem_Declaration_Newtype ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_Constructor (_constructor))) ((sem_Names (_derivings))))
sem_Declaration ((Declaration_PatternBinding (_range) (_pattern) (_righthandside))) =
    (sem_Declaration_PatternBinding ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_RightHandSide (_righthandside))))
sem_Declaration ((Declaration_Type (_range) (_simpletype) (_type))) =
    (sem_Declaration_Type ((sem_Range (_range))) ((sem_SimpleType (_simpletype))) ((sem_Type (_type))))
sem_Declaration ((Declaration_TypeSignature (_range) (_names) (_type))) =
    (sem_Declaration_TypeSignature ((sem_Range (_range))) ((sem_Names (_names))) ((sem_Type (_type))))
sem_Declaration_Class :: (T_Range) ->
                         (T_ContextItems) ->
                         (T_SimpleType) ->
                         (T_MaybeDeclarations) ->
                         (T_Declaration)
sem_Declaration_Class (_range) (_context) (_simpletype) (_where) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_Class _range_self _context_self _simpletype_self _where_self
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_self) =
            (_simpletype )
        ( _where_resolveErrors,_where_self) =
            (_where (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _where_resolveErrors,_self)
sem_Declaration_Data :: (T_Range) ->
                        (T_ContextItems) ->
                        (T_SimpleType) ->
                        (T_Constructors) ->
                        (T_Names) ->
                        (T_Declaration)
sem_Declaration_Data (_range) (_context) (_simpletype) (_constructors) (_derivings) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_Data _range_self _context_self _simpletype_self _constructors_self _derivings_self
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_self) =
            (_simpletype )
        ( _constructors_self) =
            (_constructors )
        ( _derivings_self) =
            (_derivings )
    in  ( _lhs_resolveErrors,_self)
sem_Declaration_Default :: (T_Range) ->
                           (T_Types) ->
                           (T_Declaration)
sem_Declaration_Default (_range) (_types) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_Default _range_self _types_self
        ( _range_self) =
            (_range )
        ( _types_self) =
            (_types )
    in  ( _lhs_resolveErrors,_self)
sem_Declaration_Empty :: (T_Range) ->
                         (T_Declaration)
sem_Declaration_Empty (_range) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_resolveErrors,_self)
sem_Declaration_Fixity :: (T_Range) ->
                          (T_Fixity) ->
                          (T_MaybeInt) ->
                          (T_Names) ->
                          (T_Declaration)
sem_Declaration_Fixity (_range) (_fixity) (_priority) (_operators) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_Fixity _range_self _fixity_self _priority_self _operators_self
        ( _range_self) =
            (_range )
        ( _fixity_self) =
            (_fixity )
        ( _priority_self) =
            (_priority )
        ( _operators_self) =
            (_operators )
    in  ( _lhs_resolveErrors,_self)
sem_Declaration_FunctionBindings :: (T_Range) ->
                                    (T_FunctionBindings) ->
                                    (T_Declaration)
sem_Declaration_FunctionBindings (_range) (_bindings) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_FunctionBindings _range_self _bindings_self
        ( _range_self) =
            (_range )
        ( _bindings_resolveErrors,_bindings_self) =
            (_bindings (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _bindings_resolveErrors,_self)
sem_Declaration_Instance :: (T_Range) ->
                            (T_ContextItems) ->
                            (T_Name) ->
                            (T_Types) ->
                            (T_MaybeDeclarations) ->
                            (T_Declaration)
sem_Declaration_Instance (_range) (_context) (_name) (_types) (_where) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_Instance _range_self _context_self _name_self _types_self _where_self
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _name_self) =
            (_name )
        ( _types_self) =
            (_types )
        ( _where_resolveErrors,_where_self) =
            (_where (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _where_resolveErrors,_self)
sem_Declaration_Newtype :: (T_Range) ->
                           (T_ContextItems) ->
                           (T_SimpleType) ->
                           (T_Constructor) ->
                           (T_Names) ->
                           (T_Declaration)
sem_Declaration_Newtype (_range) (_context) (_simpletype) (_constructor) (_derivings) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_Newtype _range_self _context_self _simpletype_self _constructor_self _derivings_self
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_self) =
            (_simpletype )
        ( _constructor_self) =
            (_constructor )
        ( _derivings_self) =
            (_derivings )
    in  ( _lhs_resolveErrors,_self)
sem_Declaration_PatternBinding :: (T_Range) ->
                                  (T_Pattern) ->
                                  (T_RightHandSide) ->
                                  (T_Declaration)
sem_Declaration_PatternBinding (_range) (_pattern) (_righthandside) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_PatternBinding _range_self _pattern_self _righthandside_self
        ( _range_self) =
            (_range )
        ( _pattern_resolveErrors,_pattern_self) =
            (_pattern (_lhs_opTable) (_lhs_resolveErrors))
        ( _righthandside_resolveErrors,_righthandside_self) =
            (_righthandside (_lhs_opTable) (_pattern_resolveErrors))
    in  ( _righthandside_resolveErrors,_self)
sem_Declaration_Type :: (T_Range) ->
                        (T_SimpleType) ->
                        (T_Type) ->
                        (T_Declaration)
sem_Declaration_Type (_range) (_simpletype) (_type) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_Type _range_self _simpletype_self _type_self
        ( _range_self) =
            (_range )
        ( _simpletype_self) =
            (_simpletype )
        ( _type_self) =
            (_type )
    in  ( _lhs_resolveErrors,_self)
sem_Declaration_TypeSignature :: (T_Range) ->
                                 (T_Names) ->
                                 (T_Type) ->
                                 (T_Declaration)
sem_Declaration_TypeSignature (_range) (_names) (_type) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Declaration_TypeSignature _range_self _names_self _type_self
        ( _range_self) =
            (_range )
        ( _names_self) =
            (_names )
        ( _type_self) =
            (_type )
    in  ( _lhs_resolveErrors,_self)
-- Declarations ------------------------------------------------
-- semantic domain
type T_Declarations = (OperatorTable) ->
                      ( [ResolveError] ) ->
                      ( ( [ResolveError] ),(Declarations))
-- cata
sem_Declarations :: (Declarations) ->
                    (T_Declarations)
sem_Declarations (list) =
    (foldr (sem_Declarations_Cons) (sem_Declarations_Nil) ((map sem_Declaration list)))
sem_Declarations_Cons :: (T_Declaration) ->
                         (T_Declarations) ->
                         (T_Declarations)
sem_Declarations_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_Declarations_Nil :: (T_Declarations)
sem_Declarations_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- Export ------------------------------------------------------
-- semantic domain
type T_Export = ( (Export))
-- cata
sem_Export :: (Export) ->
              (T_Export)
sem_Export ((Export_Module (_range) (_name))) =
    (sem_Export_Module ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export ((Export_TypeOrClass (_range) (_name) (_names))) =
    (sem_Export_TypeOrClass ((sem_Range (_range))) ((sem_Name (_name))) ((sem_MaybeNames (_names))))
sem_Export ((Export_TypeOrClassComplete (_range) (_name))) =
    (sem_Export_TypeOrClassComplete ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export ((Export_Variable (_range) (_name))) =
    (sem_Export_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export_Module :: (T_Range) ->
                     (T_Name) ->
                     (T_Export)
sem_Export_Module (_range) (_name) =
    let (_self) =
            Export_Module _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Export_TypeOrClass :: (T_Range) ->
                          (T_Name) ->
                          (T_MaybeNames) ->
                          (T_Export)
sem_Export_TypeOrClass (_range) (_name) (_names) =
    let (_self) =
            Export_TypeOrClass _range_self _name_self _names_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _names_self) =
            (_names )
    in  ( _self)
sem_Export_TypeOrClassComplete :: (T_Range) ->
                                  (T_Name) ->
                                  (T_Export)
sem_Export_TypeOrClassComplete (_range) (_name) =
    let (_self) =
            Export_TypeOrClassComplete _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Export_Variable :: (T_Range) ->
                       (T_Name) ->
                       (T_Export)
sem_Export_Variable (_range) (_name) =
    let (_self) =
            Export_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
-- Exports -----------------------------------------------------
-- semantic domain
type T_Exports = ( (Exports))
-- cata
sem_Exports :: (Exports) ->
               (T_Exports)
sem_Exports (list) =
    (foldr (sem_Exports_Cons) (sem_Exports_Nil) ((map sem_Export list)))
sem_Exports_Cons :: (T_Export) ->
                    (T_Exports) ->
                    (T_Exports)
sem_Exports_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Exports_Nil :: (T_Exports)
sem_Exports_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Expression --------------------------------------------------
-- semantic domain
type T_Expression = (OperatorTable) ->
                    ( [ResolveError] ) ->
                    ( ( [ResolveError] ),(Expression))
-- cata
sem_Expression :: (Expression) ->
                  (T_Expression)
sem_Expression ((Expression_Case (_range) (_expression) (_alternatives))) =
    (sem_Expression_Case ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Alternatives (_alternatives))))
sem_Expression ((Expression_Comprehension (_range) (_expression) (_qualifiers))) =
    (sem_Expression_Comprehension ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Qualifiers (_qualifiers))))
sem_Expression ((Expression_Constructor (_range) (_name))) =
    (sem_Expression_Constructor ((sem_Range (_range))) ((sem_Name (_name))))
sem_Expression ((Expression_Do (_range) (_statements))) =
    (sem_Expression_Do ((sem_Range (_range))) ((sem_Statements (_statements))))
sem_Expression ((Expression_Enum (_range) (_from) (_then) (_to))) =
    (sem_Expression_Enum ((sem_Range (_range))) ((sem_Expression (_from))) ((sem_MaybeExpression (_then))) ((sem_MaybeExpression (_to))))
sem_Expression ((Expression_If (_range) (_guardExpression) (_thenExpression) (_elseExpression))) =
    (sem_Expression_If ((sem_Range (_range))) ((sem_Expression (_guardExpression))) ((sem_Expression (_thenExpression))) ((sem_Expression (_elseExpression))))
sem_Expression ((Expression_InfixApplication (_range) (_leftExpression) (_operator) (_rightExpression))) =
    (sem_Expression_InfixApplication ((sem_Range (_range))) ((sem_MaybeExpression (_leftExpression))) ((sem_Expression (_operator))) ((sem_MaybeExpression (_rightExpression))))
sem_Expression ((Expression_Lambda (_range) (_patterns) (_expression))) =
    (sem_Expression_Lambda ((sem_Range (_range))) ((sem_Patterns (_patterns))) ((sem_Expression (_expression))))
sem_Expression ((Expression_Let (_range) (_declarations) (_expression))) =
    (sem_Expression_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))) ((sem_Expression (_expression))))
sem_Expression ((Expression_List (_range) (_expressions))) =
    (sem_Expression_List ((sem_Range (_range))) ((sem_Expressions (_expressions))))
sem_Expression ((Expression_Literal (_range) (_literal))) =
    (sem_Expression_Literal ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Expression ((Expression_Negate (_range) (_expression))) =
    (sem_Expression_Negate ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_NegateFloat (_range) (_expression))) =
    (sem_Expression_NegateFloat ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_NormalApplication (_range) (_function) (_arguments))) =
    (sem_Expression_NormalApplication ((sem_Range (_range))) ((sem_Expression (_function))) ((sem_Expressions (_arguments))))
sem_Expression ((Expression_Parenthesized (_range) (_expression))) =
    (sem_Expression_Parenthesized ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_RecordConstruction (_range) (_name) (_recordExpressionBindings))) =
    (sem_Expression_RecordConstruction ((sem_Range (_range))) ((sem_Name (_name))) ((sem_RecordExpressionBindings (_recordExpressionBindings))))
sem_Expression ((Expression_RecordUpdate (_range) (_expression) (_recordExpressionBindings))) =
    (sem_Expression_RecordUpdate ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_RecordExpressionBindings (_recordExpressionBindings))))
sem_Expression ((Expression_Tuple (_range) (_expressions))) =
    (sem_Expression_Tuple ((sem_Range (_range))) ((sem_Expressions (_expressions))))
sem_Expression ((Expression_Typed (_range) (_expression) (_type))) =
    (sem_Expression_Typed ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Type (_type))))
sem_Expression ((Expression_Variable (_range) (_name))) =
    (sem_Expression_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Expression_Case :: (T_Range) ->
                       (T_Expression) ->
                       (T_Alternatives) ->
                       (T_Expression)
sem_Expression_Case (_range) (_expression) (_alternatives) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Case _range_self _expression_self _alternatives_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
        ( _alternatives_resolveErrors,_alternatives_self) =
            (_alternatives (_lhs_opTable) (_expression_resolveErrors))
    in  ( _alternatives_resolveErrors,_self)
sem_Expression_Comprehension :: (T_Range) ->
                                (T_Expression) ->
                                (T_Qualifiers) ->
                                (T_Expression)
sem_Expression_Comprehension (_range) (_expression) (_qualifiers) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Comprehension _range_self _expression_self _qualifiers_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
        ( _qualifiers_resolveErrors,_qualifiers_self) =
            (_qualifiers (_lhs_opTable) (_expression_resolveErrors))
    in  ( _qualifiers_resolveErrors,_self)
sem_Expression_Constructor :: (T_Range) ->
                              (T_Name) ->
                              (T_Expression)
sem_Expression_Constructor (_range) (_name) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Constructor _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _lhs_resolveErrors,_self)
sem_Expression_Do :: (T_Range) ->
                     (T_Statements) ->
                     (T_Expression)
sem_Expression_Do (_range) (_statements) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Do _range_self _statements_self
        ( _range_self) =
            (_range )
        ( _statements_resolveErrors,_statements_self) =
            (_statements (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _statements_resolveErrors,_self)
sem_Expression_Enum :: (T_Range) ->
                       (T_Expression) ->
                       (T_MaybeExpression) ->
                       (T_MaybeExpression) ->
                       (T_Expression)
sem_Expression_Enum (_range) (_from) (_then) (_to) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Enum _range_self _from_self _then_self _to_self
        ( _range_self) =
            (_range )
        ( _from_resolveErrors,_from_self) =
            (_from (_lhs_opTable) (_lhs_resolveErrors))
        ( _then_resolveErrors,_then_self) =
            (_then (_lhs_opTable) (_from_resolveErrors))
        ( _to_resolveErrors,_to_self) =
            (_to (_lhs_opTable) (_then_resolveErrors))
    in  ( _to_resolveErrors,_self)
sem_Expression_If :: (T_Range) ->
                     (T_Expression) ->
                     (T_Expression) ->
                     (T_Expression) ->
                     (T_Expression)
sem_Expression_If (_range) (_guardExpression) (_thenExpression) (_elseExpression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_If _range_self _guardExpression_self _thenExpression_self _elseExpression_self
        ( _range_self) =
            (_range )
        ( _guardExpression_resolveErrors,_guardExpression_self) =
            (_guardExpression (_lhs_opTable) (_lhs_resolveErrors))
        ( _thenExpression_resolveErrors,_thenExpression_self) =
            (_thenExpression (_lhs_opTable) (_guardExpression_resolveErrors))
        ( _elseExpression_resolveErrors,_elseExpression_self) =
            (_elseExpression (_lhs_opTable) (_thenExpression_resolveErrors))
    in  ( _elseExpression_resolveErrors,_self)
sem_Expression_InfixApplication :: (T_Range) ->
                                   (T_MaybeExpression) ->
                                   (T_Expression) ->
                                   (T_MaybeExpression) ->
                                   (T_Expression)
sem_Expression_InfixApplication (_range) (_leftExpression) (_operator) (_rightExpression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_InfixApplication _range_self _leftExpression_self _operator_self _rightExpression_self
        ( _range_self) =
            (_range )
        ( _leftExpression_resolveErrors,_leftExpression_self) =
            (_leftExpression (_lhs_opTable) (_lhs_resolveErrors))
        ( _operator_resolveErrors,_operator_self) =
            (_operator (_lhs_opTable) (_leftExpression_resolveErrors))
        ( _rightExpression_resolveErrors,_rightExpression_self) =
            (_rightExpression (_lhs_opTable) (_operator_resolveErrors))
    in  ( _rightExpression_resolveErrors,_self)
sem_Expression_Lambda :: (T_Range) ->
                         (T_Patterns) ->
                         (T_Expression) ->
                         (T_Expression)
sem_Expression_Lambda (_range) (_patterns) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Lambda _range_self _patterns_self _expression_self
        ( _range_self) =
            (_range )
        ( _patterns_resolveErrors,_patterns_self) =
            (_patterns (_lhs_opTable) (_lhs_resolveErrors))
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_patterns_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_Expression_Let :: (T_Range) ->
                      (T_Declarations) ->
                      (T_Expression) ->
                      (T_Expression)
sem_Expression_Let (_range) (_declarations) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Let _range_self _declarations_self _expression_self
        ( _range_self) =
            (_range )
        ( _declarations_resolveErrors,_declarations_self) =
            (_declarations (_lhs_opTable) (_lhs_resolveErrors))
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_declarations_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_Expression_List :: (T_Range) ->
                       (T_Expressions) ->
                       (T_Expression)
sem_Expression_List (_range) (_expressions) (_lhs_opTable) (_lhs_resolveErrors) =
    let ((_self,_errs)) =
            case _range of
                Range_Range Position_Unknown Position_Unknown ->
                    resolveExpression _lhs_opTable _expressions_self
                _ -> (Expression_List _range_self _expressions_self, [])
        ( _range_self) =
            (_range )
        ( _expressions_resolveErrors,_expressions_self) =
            (_expressions (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _errs ++ _lhs_resolveErrors,_self)
sem_Expression_Literal :: (T_Range) ->
                          (T_Literal) ->
                          (T_Expression)
sem_Expression_Literal (_range) (_literal) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Literal _range_self _literal_self
        ( _range_self) =
            (_range )
        ( _literal_self) =
            (_literal )
    in  ( _lhs_resolveErrors,_self)
sem_Expression_Negate :: (T_Range) ->
                         (T_Expression) ->
                         (T_Expression)
sem_Expression_Negate (_range) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Negate _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_Expression_NegateFloat :: (T_Range) ->
                              (T_Expression) ->
                              (T_Expression)
sem_Expression_NegateFloat (_range) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_NegateFloat _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_Expression_NormalApplication :: (T_Range) ->
                                    (T_Expression) ->
                                    (T_Expressions) ->
                                    (T_Expression)
sem_Expression_NormalApplication (_range) (_function) (_arguments) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_NormalApplication _range_self _function_self _arguments_self
        ( _range_self) =
            (_range )
        ( _function_resolveErrors,_function_self) =
            (_function (_lhs_opTable) (_lhs_resolveErrors))
        ( _arguments_resolveErrors,_arguments_self) =
            (_arguments (_lhs_opTable) (_function_resolveErrors))
    in  ( _arguments_resolveErrors,_self)
sem_Expression_Parenthesized :: (T_Range) ->
                                (T_Expression) ->
                                (T_Expression)
sem_Expression_Parenthesized (_range) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Parenthesized _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_Expression_RecordConstruction :: (T_Range) ->
                                     (T_Name) ->
                                     (T_RecordExpressionBindings) ->
                                     (T_Expression)
sem_Expression_RecordConstruction (_range) (_name) (_recordExpressionBindings) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_RecordConstruction _range_self _name_self _recordExpressionBindings_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _recordExpressionBindings_resolveErrors,_recordExpressionBindings_self) =
            (_recordExpressionBindings (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _recordExpressionBindings_resolveErrors,_self)
sem_Expression_RecordUpdate :: (T_Range) ->
                               (T_Expression) ->
                               (T_RecordExpressionBindings) ->
                               (T_Expression)
sem_Expression_RecordUpdate (_range) (_expression) (_recordExpressionBindings) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_RecordUpdate _range_self _expression_self _recordExpressionBindings_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
        ( _recordExpressionBindings_resolveErrors,_recordExpressionBindings_self) =
            (_recordExpressionBindings (_lhs_opTable) (_expression_resolveErrors))
    in  ( _recordExpressionBindings_resolveErrors,_self)
sem_Expression_Tuple :: (T_Range) ->
                        (T_Expressions) ->
                        (T_Expression)
sem_Expression_Tuple (_range) (_expressions) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Tuple _range_self _expressions_self
        ( _range_self) =
            (_range )
        ( _expressions_resolveErrors,_expressions_self) =
            (_expressions (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _expressions_resolveErrors,_self)
sem_Expression_Typed :: (T_Range) ->
                        (T_Expression) ->
                        (T_Type) ->
                        (T_Expression)
sem_Expression_Typed (_range) (_expression) (_type) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Typed _range_self _expression_self _type_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
        ( _type_self) =
            (_type )
    in  ( _expression_resolveErrors,_self)
sem_Expression_Variable :: (T_Range) ->
                           (T_Name) ->
                           (T_Expression)
sem_Expression_Variable (_range) (_name) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Expression_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _lhs_resolveErrors,_self)
-- Expressions -------------------------------------------------
-- semantic domain
type T_Expressions = (OperatorTable) ->
                     ( [ResolveError] ) ->
                     ( ( [ResolveError] ),(Expressions))
-- cata
sem_Expressions :: (Expressions) ->
                   (T_Expressions)
sem_Expressions (list) =
    (foldr (sem_Expressions_Cons) (sem_Expressions_Nil) ((map sem_Expression list)))
sem_Expressions_Cons :: (T_Expression) ->
                        (T_Expressions) ->
                        (T_Expressions)
sem_Expressions_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_Expressions_Nil :: (T_Expressions)
sem_Expressions_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- FieldDeclaration --------------------------------------------
-- semantic domain
type T_FieldDeclaration = ( (FieldDeclaration))
-- cata
sem_FieldDeclaration :: (FieldDeclaration) ->
                        (T_FieldDeclaration)
sem_FieldDeclaration ((FieldDeclaration_FieldDeclaration (_range) (_names) (_type))) =
    (sem_FieldDeclaration_FieldDeclaration ((sem_Range (_range))) ((sem_Names (_names))) ((sem_AnnotatedType (_type))))
sem_FieldDeclaration_FieldDeclaration :: (T_Range) ->
                                         (T_Names) ->
                                         (T_AnnotatedType) ->
                                         (T_FieldDeclaration)
sem_FieldDeclaration_FieldDeclaration (_range) (_names) (_type) =
    let (_self) =
            FieldDeclaration_FieldDeclaration _range_self _names_self _type_self
        ( _range_self) =
            (_range )
        ( _names_self) =
            (_names )
        ( _type_self) =
            (_type )
    in  ( _self)
-- FieldDeclarations -------------------------------------------
-- semantic domain
type T_FieldDeclarations = ( (FieldDeclarations))
-- cata
sem_FieldDeclarations :: (FieldDeclarations) ->
                         (T_FieldDeclarations)
sem_FieldDeclarations (list) =
    (foldr (sem_FieldDeclarations_Cons) (sem_FieldDeclarations_Nil) ((map sem_FieldDeclaration list)))
sem_FieldDeclarations_Cons :: (T_FieldDeclaration) ->
                              (T_FieldDeclarations) ->
                              (T_FieldDeclarations)
sem_FieldDeclarations_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_FieldDeclarations_Nil :: (T_FieldDeclarations)
sem_FieldDeclarations_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Fixity ------------------------------------------------------
-- semantic domain
type T_Fixity = ( (Fixity))
-- cata
sem_Fixity :: (Fixity) ->
              (T_Fixity)
sem_Fixity ((Fixity_Infix (_range))) =
    (sem_Fixity_Infix ((sem_Range (_range))))
sem_Fixity ((Fixity_Infixl (_range))) =
    (sem_Fixity_Infixl ((sem_Range (_range))))
sem_Fixity ((Fixity_Infixr (_range))) =
    (sem_Fixity_Infixr ((sem_Range (_range))))
sem_Fixity_Infix :: (T_Range) ->
                    (T_Fixity)
sem_Fixity_Infix (_range) =
    let (_self) =
            Fixity_Infix _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Fixity_Infixl :: (T_Range) ->
                     (T_Fixity)
sem_Fixity_Infixl (_range) =
    let (_self) =
            Fixity_Infixl _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Fixity_Infixr :: (T_Range) ->
                     (T_Fixity)
sem_Fixity_Infixr (_range) =
    let (_self) =
            Fixity_Infixr _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
-- FunctionBinding ---------------------------------------------
-- semantic domain
type T_FunctionBinding = (OperatorTable) ->
                         ( [ResolveError] ) ->
                         ( ( [ResolveError] ),(FunctionBinding))
-- cata
sem_FunctionBinding :: (FunctionBinding) ->
                       (T_FunctionBinding)
sem_FunctionBinding ((FunctionBinding_FunctionBinding (_range) (_lefthandside) (_righthandside))) =
    (sem_FunctionBinding_FunctionBinding ((sem_Range (_range))) ((sem_LeftHandSide (_lefthandside))) ((sem_RightHandSide (_righthandside))))
sem_FunctionBinding_FunctionBinding :: (T_Range) ->
                                       (T_LeftHandSide) ->
                                       (T_RightHandSide) ->
                                       (T_FunctionBinding)
sem_FunctionBinding_FunctionBinding (_range) (_lefthandside) (_righthandside) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            FunctionBinding_FunctionBinding _range_self _lefthandside_self _righthandside_self
        ( _range_self) =
            (_range )
        ( _lefthandside_resolveErrors,_lefthandside_self) =
            (_lefthandside (_lhs_opTable) (_lhs_resolveErrors))
        ( _righthandside_resolveErrors,_righthandside_self) =
            (_righthandside (_lhs_opTable) (_lefthandside_resolveErrors))
    in  ( _righthandside_resolveErrors,_self)
-- FunctionBindings --------------------------------------------
-- semantic domain
type T_FunctionBindings = (OperatorTable) ->
                          ( [ResolveError] ) ->
                          ( ( [ResolveError] ),(FunctionBindings))
-- cata
sem_FunctionBindings :: (FunctionBindings) ->
                        (T_FunctionBindings)
sem_FunctionBindings (list) =
    (foldr (sem_FunctionBindings_Cons) (sem_FunctionBindings_Nil) ((map sem_FunctionBinding list)))
sem_FunctionBindings_Cons :: (T_FunctionBinding) ->
                             (T_FunctionBindings) ->
                             (T_FunctionBindings)
sem_FunctionBindings_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_FunctionBindings_Nil :: (T_FunctionBindings)
sem_FunctionBindings_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- GuardedExpression -------------------------------------------
-- semantic domain
type T_GuardedExpression = (OperatorTable) ->
                           ( [ResolveError] ) ->
                           ( ( [ResolveError] ),(GuardedExpression))
-- cata
sem_GuardedExpression :: (GuardedExpression) ->
                         (T_GuardedExpression)
sem_GuardedExpression ((GuardedExpression_GuardedExpression (_range) (_guard) (_expression))) =
    (sem_GuardedExpression_GuardedExpression ((sem_Range (_range))) ((sem_Expression (_guard))) ((sem_Expression (_expression))))
sem_GuardedExpression_GuardedExpression :: (T_Range) ->
                                           (T_Expression) ->
                                           (T_Expression) ->
                                           (T_GuardedExpression)
sem_GuardedExpression_GuardedExpression (_range) (_guard) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            GuardedExpression_GuardedExpression _range_self _guard_self _expression_self
        ( _range_self) =
            (_range )
        ( _guard_resolveErrors,_guard_self) =
            (_guard (_lhs_opTable) (_lhs_resolveErrors))
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_guard_resolveErrors))
    in  ( _expression_resolveErrors,_self)
-- GuardedExpressions ------------------------------------------
-- semantic domain
type T_GuardedExpressions = (OperatorTable) ->
                            ( [ResolveError] ) ->
                            ( ( [ResolveError] ),(GuardedExpressions))
-- cata
sem_GuardedExpressions :: (GuardedExpressions) ->
                          (T_GuardedExpressions)
sem_GuardedExpressions (list) =
    (foldr (sem_GuardedExpressions_Cons) (sem_GuardedExpressions_Nil) ((map sem_GuardedExpression list)))
sem_GuardedExpressions_Cons :: (T_GuardedExpression) ->
                               (T_GuardedExpressions) ->
                               (T_GuardedExpressions)
sem_GuardedExpressions_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_GuardedExpressions_Nil :: (T_GuardedExpressions)
sem_GuardedExpressions_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- Import ------------------------------------------------------
-- semantic domain
type T_Import = ( (Import))
-- cata
sem_Import :: (Import) ->
              (T_Import)
sem_Import ((Import_TypeOrClass (_range) (_name) (_names))) =
    (sem_Import_TypeOrClass ((sem_Range (_range))) ((sem_Name (_name))) ((sem_MaybeNames (_names))))
sem_Import ((Import_TypeOrClassComplete (_range) (_name))) =
    (sem_Import_TypeOrClassComplete ((sem_Range (_range))) ((sem_Name (_name))))
sem_Import ((Import_Variable (_range) (_name))) =
    (sem_Import_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Import_TypeOrClass :: (T_Range) ->
                          (T_Name) ->
                          (T_MaybeNames) ->
                          (T_Import)
sem_Import_TypeOrClass (_range) (_name) (_names) =
    let (_self) =
            Import_TypeOrClass _range_self _name_self _names_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _names_self) =
            (_names )
    in  ( _self)
sem_Import_TypeOrClassComplete :: (T_Range) ->
                                  (T_Name) ->
                                  (T_Import)
sem_Import_TypeOrClassComplete (_range) (_name) =
    let (_self) =
            Import_TypeOrClassComplete _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Import_Variable :: (T_Range) ->
                       (T_Name) ->
                       (T_Import)
sem_Import_Variable (_range) (_name) =
    let (_self) =
            Import_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
-- ImportDeclaration -------------------------------------------
-- semantic domain
type T_ImportDeclaration = ( (ImportDeclaration))
-- cata
sem_ImportDeclaration :: (ImportDeclaration) ->
                         (T_ImportDeclaration)
sem_ImportDeclaration ((ImportDeclaration_Empty (_range))) =
    (sem_ImportDeclaration_Empty ((sem_Range (_range))))
sem_ImportDeclaration ((ImportDeclaration_Import (_range) (_qualified) (_name) (_asname) (_importspecification))) =
    (sem_ImportDeclaration_Import ((sem_Range (_range))) (_qualified) ((sem_Name (_name))) ((sem_MaybeName (_asname))) ((sem_MaybeImportSpecification (_importspecification))))
sem_ImportDeclaration_Empty :: (T_Range) ->
                               (T_ImportDeclaration)
sem_ImportDeclaration_Empty (_range) =
    let (_self) =
            ImportDeclaration_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
sem_ImportDeclaration_Import :: (T_Range) ->
                                (Bool) ->
                                (T_Name) ->
                                (T_MaybeName) ->
                                (T_MaybeImportSpecification) ->
                                (T_ImportDeclaration)
sem_ImportDeclaration_Import (_range) (_qualified) (_name) (_asname) (_importspecification) =
    let (_self) =
            ImportDeclaration_Import _range_self _qualified _name_self _asname_self _importspecification_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _asname_self) =
            (_asname )
        ( _importspecification_self) =
            (_importspecification )
    in  ( _self)
-- ImportDeclarations ------------------------------------------
-- semantic domain
type T_ImportDeclarations = ( (ImportDeclarations))
-- cata
sem_ImportDeclarations :: (ImportDeclarations) ->
                          (T_ImportDeclarations)
sem_ImportDeclarations (list) =
    (foldr (sem_ImportDeclarations_Cons) (sem_ImportDeclarations_Nil) ((map sem_ImportDeclaration list)))
sem_ImportDeclarations_Cons :: (T_ImportDeclaration) ->
                               (T_ImportDeclarations) ->
                               (T_ImportDeclarations)
sem_ImportDeclarations_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_ImportDeclarations_Nil :: (T_ImportDeclarations)
sem_ImportDeclarations_Nil  =
    let (_self) =
            []
    in  ( _self)
-- ImportSpecification -----------------------------------------
-- semantic domain
type T_ImportSpecification = ( (ImportSpecification))
-- cata
sem_ImportSpecification :: (ImportSpecification) ->
                           (T_ImportSpecification)
sem_ImportSpecification ((ImportSpecification_Import (_range) (_hiding) (_imports))) =
    (sem_ImportSpecification_Import ((sem_Range (_range))) (_hiding) ((sem_Imports (_imports))))
sem_ImportSpecification_Import :: (T_Range) ->
                                  (Bool) ->
                                  (T_Imports) ->
                                  (T_ImportSpecification)
sem_ImportSpecification_Import (_range) (_hiding) (_imports) =
    let (_self) =
            ImportSpecification_Import _range_self _hiding _imports_self
        ( _range_self) =
            (_range )
        ( _imports_self) =
            (_imports )
    in  ( _self)
-- Imports -----------------------------------------------------
-- semantic domain
type T_Imports = ( (Imports))
-- cata
sem_Imports :: (Imports) ->
               (T_Imports)
sem_Imports (list) =
    (foldr (sem_Imports_Cons) (sem_Imports_Nil) ((map sem_Import list)))
sem_Imports_Cons :: (T_Import) ->
                    (T_Imports) ->
                    (T_Imports)
sem_Imports_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Imports_Nil :: (T_Imports)
sem_Imports_Nil  =
    let (_self) =
            []
    in  ( _self)
-- LeftHandSide ------------------------------------------------
-- semantic domain
type T_LeftHandSide = (OperatorTable) ->
                      ( [ResolveError] ) ->
                      ( ( [ResolveError] ),(LeftHandSide))
-- cata
sem_LeftHandSide :: (LeftHandSide) ->
                    (T_LeftHandSide)
sem_LeftHandSide ((LeftHandSide_Function (_range) (_name) (_patterns))) =
    (sem_LeftHandSide_Function ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Patterns (_patterns))))
sem_LeftHandSide ((LeftHandSide_Infix (_range) (_leftPattern) (_operator) (_rightPattern))) =
    (sem_LeftHandSide_Infix ((sem_Range (_range))) ((sem_Pattern (_leftPattern))) ((sem_Name (_operator))) ((sem_Pattern (_rightPattern))))
sem_LeftHandSide ((LeftHandSide_Parenthesized (_range) (_lefthandside) (_patterns))) =
    (sem_LeftHandSide_Parenthesized ((sem_Range (_range))) ((sem_LeftHandSide (_lefthandside))) ((sem_Patterns (_patterns))))
sem_LeftHandSide_Function :: (T_Range) ->
                             (T_Name) ->
                             (T_Patterns) ->
                             (T_LeftHandSide)
sem_LeftHandSide_Function (_range) (_name) (_patterns) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            LeftHandSide_Function _range_self _name_self _patterns_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _patterns_resolveErrors,_patterns_self) =
            (_patterns (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _patterns_resolveErrors,_self)
sem_LeftHandSide_Infix :: (T_Range) ->
                          (T_Pattern) ->
                          (T_Name) ->
                          (T_Pattern) ->
                          (T_LeftHandSide)
sem_LeftHandSide_Infix (_range) (_leftPattern) (_operator) (_rightPattern) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            LeftHandSide_Infix _range_self _leftPattern_self _operator_self _rightPattern_self
        ( _range_self) =
            (_range )
        ( _leftPattern_resolveErrors,_leftPattern_self) =
            (_leftPattern (_lhs_opTable) (_lhs_resolveErrors))
        ( _operator_self) =
            (_operator )
        ( _rightPattern_resolveErrors,_rightPattern_self) =
            (_rightPattern (_lhs_opTable) (_leftPattern_resolveErrors))
    in  ( _rightPattern_resolveErrors,_self)
sem_LeftHandSide_Parenthesized :: (T_Range) ->
                                  (T_LeftHandSide) ->
                                  (T_Patterns) ->
                                  (T_LeftHandSide)
sem_LeftHandSide_Parenthesized (_range) (_lefthandside) (_patterns) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            LeftHandSide_Parenthesized _range_self _lefthandside_self _patterns_self
        ( _range_self) =
            (_range )
        ( _lefthandside_resolveErrors,_lefthandside_self) =
            (_lefthandside (_lhs_opTable) (_lhs_resolveErrors))
        ( _patterns_resolveErrors,_patterns_self) =
            (_patterns (_lhs_opTable) (_lefthandside_resolveErrors))
    in  ( _patterns_resolveErrors,_self)
-- Literal -----------------------------------------------------
-- semantic domain
type T_Literal = ( (Literal))
-- cata
sem_Literal :: (Literal) ->
               (T_Literal)
sem_Literal ((Literal_Char (_range) (_value))) =
    (sem_Literal_Char ((sem_Range (_range))) (_value))
sem_Literal ((Literal_Float (_range) (_value))) =
    (sem_Literal_Float ((sem_Range (_range))) (_value))
sem_Literal ((Literal_Int (_range) (_value))) =
    (sem_Literal_Int ((sem_Range (_range))) (_value))
sem_Literal ((Literal_String (_range) (_value))) =
    (sem_Literal_String ((sem_Range (_range))) (_value))
sem_Literal_Char :: (T_Range) ->
                    (String) ->
                    (T_Literal)
sem_Literal_Char (_range) (_value) =
    let (_self) =
            Literal_Char _range_self _value
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Literal_Float :: (T_Range) ->
                     (String) ->
                     (T_Literal)
sem_Literal_Float (_range) (_value) =
    let (_self) =
            Literal_Float _range_self _value
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Literal_Int :: (T_Range) ->
                   (String) ->
                   (T_Literal)
sem_Literal_Int (_range) (_value) =
    let (_self) =
            Literal_Int _range_self _value
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Literal_String :: (T_Range) ->
                      (String) ->
                      (T_Literal)
sem_Literal_String (_range) (_value) =
    let (_self) =
            Literal_String _range_self _value
        ( _range_self) =
            (_range )
    in  ( _self)
-- MaybeDeclarations -------------------------------------------
-- semantic domain
type T_MaybeDeclarations = (OperatorTable) ->
                           ( [ResolveError] ) ->
                           ( ( [ResolveError] ),(MaybeDeclarations))
-- cata
sem_MaybeDeclarations :: (MaybeDeclarations) ->
                         (T_MaybeDeclarations)
sem_MaybeDeclarations ((MaybeDeclarations_Just (_declarations))) =
    (sem_MaybeDeclarations_Just ((sem_Declarations (_declarations))))
sem_MaybeDeclarations ((MaybeDeclarations_Nothing )) =
    (sem_MaybeDeclarations_Nothing )
sem_MaybeDeclarations_Just :: (T_Declarations) ->
                              (T_MaybeDeclarations)
sem_MaybeDeclarations_Just (_declarations) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            MaybeDeclarations_Just _declarations_self
        ( _declarations_resolveErrors,_declarations_self) =
            (_declarations (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _declarations_resolveErrors,_self)
sem_MaybeDeclarations_Nothing :: (T_MaybeDeclarations)
sem_MaybeDeclarations_Nothing (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            MaybeDeclarations_Nothing
    in  ( _lhs_resolveErrors,_self)
-- MaybeExports ------------------------------------------------
-- semantic domain
type T_MaybeExports = ( (MaybeExports))
-- cata
sem_MaybeExports :: (MaybeExports) ->
                    (T_MaybeExports)
sem_MaybeExports ((MaybeExports_Just (_exports))) =
    (sem_MaybeExports_Just ((sem_Exports (_exports))))
sem_MaybeExports ((MaybeExports_Nothing )) =
    (sem_MaybeExports_Nothing )
sem_MaybeExports_Just :: (T_Exports) ->
                         (T_MaybeExports)
sem_MaybeExports_Just (_exports) =
    let (_self) =
            MaybeExports_Just _exports_self
        ( _exports_self) =
            (_exports )
    in  ( _self)
sem_MaybeExports_Nothing :: (T_MaybeExports)
sem_MaybeExports_Nothing  =
    let (_self) =
            MaybeExports_Nothing
    in  ( _self)
-- MaybeExpression ---------------------------------------------
-- semantic domain
type T_MaybeExpression = (OperatorTable) ->
                         ( [ResolveError] ) ->
                         ( ( [ResolveError] ),(MaybeExpression))
-- cata
sem_MaybeExpression :: (MaybeExpression) ->
                       (T_MaybeExpression)
sem_MaybeExpression ((MaybeExpression_Just (_expression))) =
    (sem_MaybeExpression_Just ((sem_Expression (_expression))))
sem_MaybeExpression ((MaybeExpression_Nothing )) =
    (sem_MaybeExpression_Nothing )
sem_MaybeExpression_Just :: (T_Expression) ->
                            (T_MaybeExpression)
sem_MaybeExpression_Just (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            MaybeExpression_Just _expression_self
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_MaybeExpression_Nothing :: (T_MaybeExpression)
sem_MaybeExpression_Nothing (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            MaybeExpression_Nothing
    in  ( _lhs_resolveErrors,_self)
-- MaybeImportSpecification ------------------------------------
-- semantic domain
type T_MaybeImportSpecification = ( (MaybeImportSpecification))
-- cata
sem_MaybeImportSpecification :: (MaybeImportSpecification) ->
                                (T_MaybeImportSpecification)
sem_MaybeImportSpecification ((MaybeImportSpecification_Just (_importspecification))) =
    (sem_MaybeImportSpecification_Just ((sem_ImportSpecification (_importspecification))))
sem_MaybeImportSpecification ((MaybeImportSpecification_Nothing )) =
    (sem_MaybeImportSpecification_Nothing )
sem_MaybeImportSpecification_Just :: (T_ImportSpecification) ->
                                     (T_MaybeImportSpecification)
sem_MaybeImportSpecification_Just (_importspecification) =
    let (_self) =
            MaybeImportSpecification_Just _importspecification_self
        ( _importspecification_self) =
            (_importspecification )
    in  ( _self)
sem_MaybeImportSpecification_Nothing :: (T_MaybeImportSpecification)
sem_MaybeImportSpecification_Nothing  =
    let (_self) =
            MaybeImportSpecification_Nothing
    in  ( _self)
-- MaybeInt ----------------------------------------------------
-- semantic domain
type T_MaybeInt = ( (MaybeInt))
-- cata
sem_MaybeInt :: (MaybeInt) ->
                (T_MaybeInt)
sem_MaybeInt ((MaybeInt_Just (_int))) =
    (sem_MaybeInt_Just (_int))
sem_MaybeInt ((MaybeInt_Nothing )) =
    (sem_MaybeInt_Nothing )
sem_MaybeInt_Just :: (Int) ->
                     (T_MaybeInt)
sem_MaybeInt_Just (_int) =
    let (_self) =
            MaybeInt_Just _int
    in  ( _self)
sem_MaybeInt_Nothing :: (T_MaybeInt)
sem_MaybeInt_Nothing  =
    let (_self) =
            MaybeInt_Nothing
    in  ( _self)
-- MaybeName ---------------------------------------------------
-- semantic domain
type T_MaybeName = ( (MaybeName))
-- cata
sem_MaybeName :: (MaybeName) ->
                 (T_MaybeName)
sem_MaybeName ((MaybeName_Just (_name))) =
    (sem_MaybeName_Just ((sem_Name (_name))))
sem_MaybeName ((MaybeName_Nothing )) =
    (sem_MaybeName_Nothing )
sem_MaybeName_Just :: (T_Name) ->
                      (T_MaybeName)
sem_MaybeName_Just (_name) =
    let (_self) =
            MaybeName_Just _name_self
        ( _name_self) =
            (_name )
    in  ( _self)
sem_MaybeName_Nothing :: (T_MaybeName)
sem_MaybeName_Nothing  =
    let (_self) =
            MaybeName_Nothing
    in  ( _self)
-- MaybeNames --------------------------------------------------
-- semantic domain
type T_MaybeNames = ( (MaybeNames))
-- cata
sem_MaybeNames :: (MaybeNames) ->
                  (T_MaybeNames)
sem_MaybeNames ((MaybeNames_Just (_names))) =
    (sem_MaybeNames_Just ((sem_Names (_names))))
sem_MaybeNames ((MaybeNames_Nothing )) =
    (sem_MaybeNames_Nothing )
sem_MaybeNames_Just :: (T_Names) ->
                       (T_MaybeNames)
sem_MaybeNames_Just (_names) =
    let (_self) =
            MaybeNames_Just _names_self
        ( _names_self) =
            (_names )
    in  ( _self)
sem_MaybeNames_Nothing :: (T_MaybeNames)
sem_MaybeNames_Nothing  =
    let (_self) =
            MaybeNames_Nothing
    in  ( _self)
-- Module ------------------------------------------------------
-- semantic domain
type T_Module = (OperatorTable) ->
                ( [ResolveError] ) ->
                ( ( [ResolveError] ),(Module))
-- cata
sem_Module :: (Module) ->
              (T_Module)
sem_Module ((Module_Module (_range) (_name) (_exports) (_body))) =
    (sem_Module_Module ((sem_Range (_range))) ((sem_MaybeName (_name))) ((sem_MaybeExports (_exports))) ((sem_Body (_body))))
sem_Module_Module :: (T_Range) ->
                     (T_MaybeName) ->
                     (T_MaybeExports) ->
                     (T_Body) ->
                     (T_Module)
sem_Module_Module (_range) (_name) (_exports) (_body) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Module_Module _range_self _name_self _exports_self _body_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _exports_self) =
            (_exports )
        ( _body_resolveErrors,_body_self) =
            (_body (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _body_resolveErrors,_self)
-- Name --------------------------------------------------------
-- semantic domain
type T_Name = ( (Name))
-- cata
sem_Name :: (Name) ->
            (T_Name)
sem_Name ((Name_Identifier (_range) (_module) (_name))) =
    (sem_Name_Identifier ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name ((Name_Operator (_range) (_module) (_name))) =
    (sem_Name_Operator ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name ((Name_Special (_range) (_module) (_name))) =
    (sem_Name_Special ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name_Identifier :: (T_Range) ->
                       (T_Strings) ->
                       (String) ->
                       (T_Name)
sem_Name_Identifier (_range) (_module) (_name) =
    let (_self) =
            Name_Identifier _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
sem_Name_Operator :: (T_Range) ->
                     (T_Strings) ->
                     (String) ->
                     (T_Name)
sem_Name_Operator (_range) (_module) (_name) =
    let (_self) =
            Name_Operator _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
sem_Name_Special :: (T_Range) ->
                    (T_Strings) ->
                    (String) ->
                    (T_Name)
sem_Name_Special (_range) (_module) (_name) =
    let (_self) =
            Name_Special _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
-- Names -------------------------------------------------------
-- semantic domain
type T_Names = ( (Names))
-- cata
sem_Names :: (Names) ->
             (T_Names)
sem_Names (list) =
    (foldr (sem_Names_Cons) (sem_Names_Nil) ((map sem_Name list)))
sem_Names_Cons :: (T_Name) ->
                  (T_Names) ->
                  (T_Names)
sem_Names_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Names_Nil :: (T_Names)
sem_Names_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Pattern -----------------------------------------------------
-- semantic domain
type T_Pattern = (OperatorTable) ->
                 ( [ResolveError] ) ->
                 ( ( [ResolveError] ),(Pattern))
-- cata
sem_Pattern :: (Pattern) ->
               (T_Pattern)
sem_Pattern ((Pattern_As (_range) (_name) (_pattern))) =
    (sem_Pattern_As ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_Constructor (_range) (_name) (_patterns))) =
    (sem_Pattern_Constructor ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_InfixConstructor (_range) (_leftPattern) (_constructorOperator) (_rightPattern))) =
    (sem_Pattern_InfixConstructor ((sem_Range (_range))) ((sem_Pattern (_leftPattern))) ((sem_Name (_constructorOperator))) ((sem_Pattern (_rightPattern))))
sem_Pattern ((Pattern_Irrefutable (_range) (_pattern))) =
    (sem_Pattern_Irrefutable ((sem_Range (_range))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_List (_range) (_patterns))) =
    (sem_Pattern_List ((sem_Range (_range))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_Literal (_range) (_literal))) =
    (sem_Pattern_Literal ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Negate (_range) (_literal))) =
    (sem_Pattern_Negate ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_NegateFloat (_range) (_literal))) =
    (sem_Pattern_NegateFloat ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Parenthesized (_range) (_pattern))) =
    (sem_Pattern_Parenthesized ((sem_Range (_range))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_Record (_range) (_name) (_recordPatternBindings))) =
    (sem_Pattern_Record ((sem_Range (_range))) ((sem_Name (_name))) ((sem_RecordPatternBindings (_recordPatternBindings))))
sem_Pattern ((Pattern_Successor (_range) (_name) (_literal))) =
    (sem_Pattern_Successor ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Tuple (_range) (_patterns))) =
    (sem_Pattern_Tuple ((sem_Range (_range))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_Variable (_range) (_name))) =
    (sem_Pattern_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Pattern ((Pattern_Wildcard (_range))) =
    (sem_Pattern_Wildcard ((sem_Range (_range))))
sem_Pattern_As :: (T_Range) ->
                  (T_Name) ->
                  (T_Pattern) ->
                  (T_Pattern)
sem_Pattern_As (_range) (_name) (_pattern) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_As _range_self _name_self _pattern_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _pattern_resolveErrors,_pattern_self) =
            (_pattern (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _pattern_resolveErrors,_self)
sem_Pattern_Constructor :: (T_Range) ->
                           (T_Name) ->
                           (T_Patterns) ->
                           (T_Pattern)
sem_Pattern_Constructor (_range) (_name) (_patterns) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Constructor _range_self _name_self _patterns_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _patterns_resolveErrors,_patterns_self) =
            (_patterns (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _patterns_resolveErrors,_self)
sem_Pattern_InfixConstructor :: (T_Range) ->
                                (T_Pattern) ->
                                (T_Name) ->
                                (T_Pattern) ->
                                (T_Pattern)
sem_Pattern_InfixConstructor (_range) (_leftPattern) (_constructorOperator) (_rightPattern) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_InfixConstructor _range_self _leftPattern_self _constructorOperator_self _rightPattern_self
        ( _range_self) =
            (_range )
        ( _leftPattern_resolveErrors,_leftPattern_self) =
            (_leftPattern (_lhs_opTable) (_lhs_resolveErrors))
        ( _constructorOperator_self) =
            (_constructorOperator )
        ( _rightPattern_resolveErrors,_rightPattern_self) =
            (_rightPattern (_lhs_opTable) (_leftPattern_resolveErrors))
    in  ( _rightPattern_resolveErrors,_self)
sem_Pattern_Irrefutable :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Pattern)
sem_Pattern_Irrefutable (_range) (_pattern) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Irrefutable _range_self _pattern_self
        ( _range_self) =
            (_range )
        ( _pattern_resolveErrors,_pattern_self) =
            (_pattern (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _pattern_resolveErrors,_self)
sem_Pattern_List :: (T_Range) ->
                    (T_Patterns) ->
                    (T_Pattern)
sem_Pattern_List (_range) (_patterns) (_lhs_opTable) (_lhs_resolveErrors) =
    let ((_self,_errs)) =
            case _range of
                Range_Range Position_Unknown Position_Unknown ->
                    resolvePattern _lhs_opTable _patterns_self
                _ ->
                    (Pattern_List _range_self _patterns_self, [])
        ( _range_self) =
            (_range )
        ( _patterns_resolveErrors,_patterns_self) =
            (_patterns (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _errs ++ _lhs_resolveErrors,_self)
sem_Pattern_Literal :: (T_Range) ->
                       (T_Literal) ->
                       (T_Pattern)
sem_Pattern_Literal (_range) (_literal) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Literal _range_self _literal_self
        ( _range_self) =
            (_range )
        ( _literal_self) =
            (_literal )
    in  ( _lhs_resolveErrors,_self)
sem_Pattern_Negate :: (T_Range) ->
                      (T_Literal) ->
                      (T_Pattern)
sem_Pattern_Negate (_range) (_literal) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Negate _range_self _literal_self
        ( _range_self) =
            (_range )
        ( _literal_self) =
            (_literal )
    in  ( _lhs_resolveErrors,_self)
sem_Pattern_NegateFloat :: (T_Range) ->
                           (T_Literal) ->
                           (T_Pattern)
sem_Pattern_NegateFloat (_range) (_literal) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_NegateFloat _range_self _literal_self
        ( _range_self) =
            (_range )
        ( _literal_self) =
            (_literal )
    in  ( _lhs_resolveErrors,_self)
sem_Pattern_Parenthesized :: (T_Range) ->
                             (T_Pattern) ->
                             (T_Pattern)
sem_Pattern_Parenthesized (_range) (_pattern) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Parenthesized _range_self _pattern_self
        ( _range_self) =
            (_range )
        ( _pattern_resolveErrors,_pattern_self) =
            (_pattern (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _pattern_resolveErrors,_self)
sem_Pattern_Record :: (T_Range) ->
                      (T_Name) ->
                      (T_RecordPatternBindings) ->
                      (T_Pattern)
sem_Pattern_Record (_range) (_name) (_recordPatternBindings) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Record _range_self _name_self _recordPatternBindings_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _recordPatternBindings_resolveErrors,_recordPatternBindings_self) =
            (_recordPatternBindings (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _recordPatternBindings_resolveErrors,_self)
sem_Pattern_Successor :: (T_Range) ->
                         (T_Name) ->
                         (T_Literal) ->
                         (T_Pattern)
sem_Pattern_Successor (_range) (_name) (_literal) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Successor _range_self _name_self _literal_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _literal_self) =
            (_literal )
    in  ( _lhs_resolveErrors,_self)
sem_Pattern_Tuple :: (T_Range) ->
                     (T_Patterns) ->
                     (T_Pattern)
sem_Pattern_Tuple (_range) (_patterns) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Tuple _range_self _patterns_self
        ( _range_self) =
            (_range )
        ( _patterns_resolveErrors,_patterns_self) =
            (_patterns (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _patterns_resolveErrors,_self)
sem_Pattern_Variable :: (T_Range) ->
                        (T_Name) ->
                        (T_Pattern)
sem_Pattern_Variable (_range) (_name) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _lhs_resolveErrors,_self)
sem_Pattern_Wildcard :: (T_Range) ->
                        (T_Pattern)
sem_Pattern_Wildcard (_range) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Pattern_Wildcard _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_resolveErrors,_self)
-- Patterns ----------------------------------------------------
-- semantic domain
type T_Patterns = (OperatorTable) ->
                  ( [ResolveError] ) ->
                  ( ( [ResolveError] ),(Patterns))
-- cata
sem_Patterns :: (Patterns) ->
                (T_Patterns)
sem_Patterns (list) =
    (foldr (sem_Patterns_Cons) (sem_Patterns_Nil) ((map sem_Pattern list)))
sem_Patterns_Cons :: (T_Pattern) ->
                     (T_Patterns) ->
                     (T_Patterns)
sem_Patterns_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_Patterns_Nil :: (T_Patterns)
sem_Patterns_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- Position ----------------------------------------------------
-- semantic domain
type T_Position = ( (Position))
-- cata
sem_Position :: (Position) ->
                (T_Position)
sem_Position ((Position_Position (_filename) (_line) (_column))) =
    (sem_Position_Position (_filename) (_line) (_column))
sem_Position ((Position_Unknown )) =
    (sem_Position_Unknown )
sem_Position_Position :: (String) ->
                         (Int) ->
                         (Int) ->
                         (T_Position)
sem_Position_Position (_filename) (_line) (_column) =
    let (_self) =
            Position_Position _filename _line _column
    in  ( _self)
sem_Position_Unknown :: (T_Position)
sem_Position_Unknown  =
    let (_self) =
            Position_Unknown
    in  ( _self)
-- Qualifier ---------------------------------------------------
-- semantic domain
type T_Qualifier = (OperatorTable) ->
                   ( [ResolveError] ) ->
                   ( ( [ResolveError] ),(Qualifier))
-- cata
sem_Qualifier :: (Qualifier) ->
                 (T_Qualifier)
sem_Qualifier ((Qualifier_Empty (_range))) =
    (sem_Qualifier_Empty ((sem_Range (_range))))
sem_Qualifier ((Qualifier_Generator (_range) (_pattern) (_expression))) =
    (sem_Qualifier_Generator ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_Expression (_expression))))
sem_Qualifier ((Qualifier_Guard (_range) (_guard))) =
    (sem_Qualifier_Guard ((sem_Range (_range))) ((sem_Expression (_guard))))
sem_Qualifier ((Qualifier_Let (_range) (_declarations))) =
    (sem_Qualifier_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))))
sem_Qualifier_Empty :: (T_Range) ->
                       (T_Qualifier)
sem_Qualifier_Empty (_range) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Qualifier_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_resolveErrors,_self)
sem_Qualifier_Generator :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Expression) ->
                           (T_Qualifier)
sem_Qualifier_Generator (_range) (_pattern) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Qualifier_Generator _range_self _pattern_self _expression_self
        ( _range_self) =
            (_range )
        ( _pattern_resolveErrors,_pattern_self) =
            (_pattern (_lhs_opTable) (_lhs_resolveErrors))
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_pattern_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_Qualifier_Guard :: (T_Range) ->
                       (T_Expression) ->
                       (T_Qualifier)
sem_Qualifier_Guard (_range) (_guard) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Qualifier_Guard _range_self _guard_self
        ( _range_self) =
            (_range )
        ( _guard_resolveErrors,_guard_self) =
            (_guard (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _guard_resolveErrors,_self)
sem_Qualifier_Let :: (T_Range) ->
                     (T_Declarations) ->
                     (T_Qualifier)
sem_Qualifier_Let (_range) (_declarations) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Qualifier_Let _range_self _declarations_self
        ( _range_self) =
            (_range )
        ( _declarations_resolveErrors,_declarations_self) =
            (_declarations (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _declarations_resolveErrors,_self)
-- Qualifiers --------------------------------------------------
-- semantic domain
type T_Qualifiers = (OperatorTable) ->
                    ( [ResolveError] ) ->
                    ( ( [ResolveError] ),(Qualifiers))
-- cata
sem_Qualifiers :: (Qualifiers) ->
                  (T_Qualifiers)
sem_Qualifiers (list) =
    (foldr (sem_Qualifiers_Cons) (sem_Qualifiers_Nil) ((map sem_Qualifier list)))
sem_Qualifiers_Cons :: (T_Qualifier) ->
                       (T_Qualifiers) ->
                       (T_Qualifiers)
sem_Qualifiers_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_Qualifiers_Nil :: (T_Qualifiers)
sem_Qualifiers_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- Range -------------------------------------------------------
-- semantic domain
type T_Range = ( (Range))
-- cata
sem_Range :: (Range) ->
             (T_Range)
sem_Range ((Range_Range (_start) (_stop))) =
    (sem_Range_Range ((sem_Position (_start))) ((sem_Position (_stop))))
sem_Range_Range :: (T_Position) ->
                   (T_Position) ->
                   (T_Range)
sem_Range_Range (_start) (_stop) =
    let (_self) =
            Range_Range _start_self _stop_self
        ( _start_self) =
            (_start )
        ( _stop_self) =
            (_stop )
    in  ( _self)
-- RecordExpressionBinding -------------------------------------
-- semantic domain
type T_RecordExpressionBinding = (OperatorTable) ->
                                 ( [ResolveError] ) ->
                                 ( ( [ResolveError] ),(RecordExpressionBinding))
-- cata
sem_RecordExpressionBinding :: (RecordExpressionBinding) ->
                               (T_RecordExpressionBinding)
sem_RecordExpressionBinding ((RecordExpressionBinding_RecordExpressionBinding (_range) (_name) (_expression))) =
    (sem_RecordExpressionBinding_RecordExpressionBinding ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Expression (_expression))))
sem_RecordExpressionBinding_RecordExpressionBinding :: (T_Range) ->
                                                       (T_Name) ->
                                                       (T_Expression) ->
                                                       (T_RecordExpressionBinding)
sem_RecordExpressionBinding_RecordExpressionBinding (_range) (_name) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            RecordExpressionBinding_RecordExpressionBinding _range_self _name_self _expression_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _expression_resolveErrors,_self)
-- RecordExpressionBindings ------------------------------------
-- semantic domain
type T_RecordExpressionBindings = (OperatorTable) ->
                                  ( [ResolveError] ) ->
                                  ( ( [ResolveError] ),(RecordExpressionBindings))
-- cata
sem_RecordExpressionBindings :: (RecordExpressionBindings) ->
                                (T_RecordExpressionBindings)
sem_RecordExpressionBindings (list) =
    (foldr (sem_RecordExpressionBindings_Cons) (sem_RecordExpressionBindings_Nil) ((map sem_RecordExpressionBinding list)))
sem_RecordExpressionBindings_Cons :: (T_RecordExpressionBinding) ->
                                     (T_RecordExpressionBindings) ->
                                     (T_RecordExpressionBindings)
sem_RecordExpressionBindings_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_RecordExpressionBindings_Nil :: (T_RecordExpressionBindings)
sem_RecordExpressionBindings_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- RecordPatternBinding ----------------------------------------
-- semantic domain
type T_RecordPatternBinding = (OperatorTable) ->
                              ( [ResolveError] ) ->
                              ( ( [ResolveError] ),(RecordPatternBinding))
-- cata
sem_RecordPatternBinding :: (RecordPatternBinding) ->
                            (T_RecordPatternBinding)
sem_RecordPatternBinding ((RecordPatternBinding_RecordPatternBinding (_range) (_name) (_pattern))) =
    (sem_RecordPatternBinding_RecordPatternBinding ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Pattern (_pattern))))
sem_RecordPatternBinding_RecordPatternBinding :: (T_Range) ->
                                                 (T_Name) ->
                                                 (T_Pattern) ->
                                                 (T_RecordPatternBinding)
sem_RecordPatternBinding_RecordPatternBinding (_range) (_name) (_pattern) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            RecordPatternBinding_RecordPatternBinding _range_self _name_self _pattern_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _pattern_resolveErrors,_pattern_self) =
            (_pattern (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _pattern_resolveErrors,_self)
-- RecordPatternBindings ---------------------------------------
-- semantic domain
type T_RecordPatternBindings = (OperatorTable) ->
                               ( [ResolveError] ) ->
                               ( ( [ResolveError] ),(RecordPatternBindings))
-- cata
sem_RecordPatternBindings :: (RecordPatternBindings) ->
                             (T_RecordPatternBindings)
sem_RecordPatternBindings (list) =
    (foldr (sem_RecordPatternBindings_Cons) (sem_RecordPatternBindings_Nil) ((map sem_RecordPatternBinding list)))
sem_RecordPatternBindings_Cons :: (T_RecordPatternBinding) ->
                                  (T_RecordPatternBindings) ->
                                  (T_RecordPatternBindings)
sem_RecordPatternBindings_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_RecordPatternBindings_Nil :: (T_RecordPatternBindings)
sem_RecordPatternBindings_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- RightHandSide -----------------------------------------------
-- semantic domain
type T_RightHandSide = (OperatorTable) ->
                       ( [ResolveError] ) ->
                       ( ( [ResolveError] ),(RightHandSide))
-- cata
sem_RightHandSide :: (RightHandSide) ->
                     (T_RightHandSide)
sem_RightHandSide ((RightHandSide_Expression (_range) (_expression) (_where))) =
    (sem_RightHandSide_Expression ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_MaybeDeclarations (_where))))
sem_RightHandSide ((RightHandSide_Guarded (_range) (_guardedexpressions) (_where))) =
    (sem_RightHandSide_Guarded ((sem_Range (_range))) ((sem_GuardedExpressions (_guardedexpressions))) ((sem_MaybeDeclarations (_where))))
sem_RightHandSide_Expression :: (T_Range) ->
                                (T_Expression) ->
                                (T_MaybeDeclarations) ->
                                (T_RightHandSide)
sem_RightHandSide_Expression (_range) (_expression) (_where) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            RightHandSide_Expression _range_self _expression_self _where_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
        ( _where_resolveErrors,_where_self) =
            (_where (_lhs_opTable) (_expression_resolveErrors))
    in  ( _where_resolveErrors,_self)
sem_RightHandSide_Guarded :: (T_Range) ->
                             (T_GuardedExpressions) ->
                             (T_MaybeDeclarations) ->
                             (T_RightHandSide)
sem_RightHandSide_Guarded (_range) (_guardedexpressions) (_where) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            RightHandSide_Guarded _range_self _guardedexpressions_self _where_self
        ( _range_self) =
            (_range )
        ( _guardedexpressions_resolveErrors,_guardedexpressions_self) =
            (_guardedexpressions (_lhs_opTable) (_lhs_resolveErrors))
        ( _where_resolveErrors,_where_self) =
            (_where (_lhs_opTable) (_guardedexpressions_resolveErrors))
    in  ( _where_resolveErrors,_self)
-- SimpleType --------------------------------------------------
-- semantic domain
type T_SimpleType = ( (SimpleType))
-- cata
sem_SimpleType :: (SimpleType) ->
                  (T_SimpleType)
sem_SimpleType ((SimpleType_SimpleType (_range) (_name) (_typevariables))) =
    (sem_SimpleType_SimpleType ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Names (_typevariables))))
sem_SimpleType_SimpleType :: (T_Range) ->
                             (T_Name) ->
                             (T_Names) ->
                             (T_SimpleType)
sem_SimpleType_SimpleType (_range) (_name) (_typevariables) =
    let (_self) =
            SimpleType_SimpleType _range_self _name_self _typevariables_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _typevariables_self) =
            (_typevariables )
    in  ( _self)
-- Statement ---------------------------------------------------
-- semantic domain
type T_Statement = (OperatorTable) ->
                   ( [ResolveError] ) ->
                   ( ( [ResolveError] ),(Statement))
-- cata
sem_Statement :: (Statement) ->
                 (T_Statement)
sem_Statement ((Statement_Empty (_range))) =
    (sem_Statement_Empty ((sem_Range (_range))))
sem_Statement ((Statement_Expression (_range) (_expression))) =
    (sem_Statement_Expression ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Statement ((Statement_Generator (_range) (_pattern) (_expression))) =
    (sem_Statement_Generator ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_Expression (_expression))))
sem_Statement ((Statement_Let (_range) (_declarations))) =
    (sem_Statement_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))))
sem_Statement_Empty :: (T_Range) ->
                       (T_Statement)
sem_Statement_Empty (_range) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Statement_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_resolveErrors,_self)
sem_Statement_Expression :: (T_Range) ->
                            (T_Expression) ->
                            (T_Statement)
sem_Statement_Expression (_range) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Statement_Expression _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_Statement_Generator :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Expression) ->
                           (T_Statement)
sem_Statement_Generator (_range) (_pattern) (_expression) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Statement_Generator _range_self _pattern_self _expression_self
        ( _range_self) =
            (_range )
        ( _pattern_resolveErrors,_pattern_self) =
            (_pattern (_lhs_opTable) (_lhs_resolveErrors))
        ( _expression_resolveErrors,_expression_self) =
            (_expression (_lhs_opTable) (_pattern_resolveErrors))
    in  ( _expression_resolveErrors,_self)
sem_Statement_Let :: (T_Range) ->
                     (T_Declarations) ->
                     (T_Statement)
sem_Statement_Let (_range) (_declarations) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            Statement_Let _range_self _declarations_self
        ( _range_self) =
            (_range )
        ( _declarations_resolveErrors,_declarations_self) =
            (_declarations (_lhs_opTable) (_lhs_resolveErrors))
    in  ( _declarations_resolveErrors,_self)
-- Statements --------------------------------------------------
-- semantic domain
type T_Statements = (OperatorTable) ->
                    ( [ResolveError] ) ->
                    ( ( [ResolveError] ),(Statements))
-- cata
sem_Statements :: (Statements) ->
                  (T_Statements)
sem_Statements (list) =
    (foldr (sem_Statements_Cons) (sem_Statements_Nil) ((map sem_Statement list)))
sem_Statements_Cons :: (T_Statement) ->
                       (T_Statements) ->
                       (T_Statements)
sem_Statements_Cons (_hd) (_tl) (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_resolveErrors,_hd_self) =
            (_hd (_lhs_opTable) (_lhs_resolveErrors))
        ( _tl_resolveErrors,_tl_self) =
            (_tl (_lhs_opTable) (_hd_resolveErrors))
    in  ( _tl_resolveErrors,_self)
sem_Statements_Nil :: (T_Statements)
sem_Statements_Nil (_lhs_opTable) (_lhs_resolveErrors) =
    let (_self) =
            []
    in  ( _lhs_resolveErrors,_self)
-- Strings -----------------------------------------------------
-- semantic domain
type T_Strings = ( (Strings))
-- cata
sem_Strings :: (Strings) ->
               (T_Strings)
sem_Strings (list) =
    (foldr (sem_Strings_Cons) (sem_Strings_Nil) (list))
sem_Strings_Cons :: (String) ->
                    (T_Strings) ->
                    (T_Strings)
sem_Strings_Cons (_hd) (_tl) =
    let (_self) =
            _hd : _tl_self
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Strings_Nil :: (T_Strings)
sem_Strings_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Type --------------------------------------------------------
-- semantic domain
type T_Type = ( (Type))
-- cata
sem_Type :: (Type) ->
            (T_Type)
sem_Type ((Type_Application (_range) (_prefix) (_function) (_arguments))) =
    (sem_Type_Application ((sem_Range (_range))) (_prefix) ((sem_Type (_function))) ((sem_Types (_arguments))))
sem_Type ((Type_Constructor (_range) (_name))) =
    (sem_Type_Constructor ((sem_Range (_range))) ((sem_Name (_name))))
sem_Type ((Type_Exists (_range) (_typevariables) (_type))) =
    (sem_Type_Exists ((sem_Range (_range))) ((sem_Names (_typevariables))) ((sem_Type (_type))))
sem_Type ((Type_Forall (_range) (_typevariables) (_type))) =
    (sem_Type_Forall ((sem_Range (_range))) ((sem_Names (_typevariables))) ((sem_Type (_type))))
sem_Type ((Type_Parenthesized (_range) (_type))) =
    (sem_Type_Parenthesized ((sem_Range (_range))) ((sem_Type (_type))))
sem_Type ((Type_Qualified (_range) (_context) (_type))) =
    (sem_Type_Qualified ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_Type (_type))))
sem_Type ((Type_Variable (_range) (_name))) =
    (sem_Type_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Type_Application :: (T_Range) ->
                        (Bool) ->
                        (T_Type) ->
                        (T_Types) ->
                        (T_Type)
sem_Type_Application (_range) (_prefix) (_function) (_arguments) =
    let (_self) =
            Type_Application _range_self _prefix _function_self _arguments_self
        ( _range_self) =
            (_range )
        ( _function_self) =
            (_function )
        ( _arguments_self) =
            (_arguments )
    in  ( _self)
sem_Type_Constructor :: (T_Range) ->
                        (T_Name) ->
                        (T_Type)
sem_Type_Constructor (_range) (_name) =
    let (_self) =
            Type_Constructor _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Type_Exists :: (T_Range) ->
                   (T_Names) ->
                   (T_Type) ->
                   (T_Type)
sem_Type_Exists (_range) (_typevariables) (_type) =
    let (_self) =
            Type_Exists _range_self _typevariables_self _type_self
        ( _range_self) =
            (_range )
        ( _typevariables_self) =
            (_typevariables )
        ( _type_self) =
            (_type )
    in  ( _self)
sem_Type_Forall :: (T_Range) ->
                   (T_Names) ->
                   (T_Type) ->
                   (T_Type)
sem_Type_Forall (_range) (_typevariables) (_type) =
    let (_self) =
            Type_Forall _range_self _typevariables_self _type_self
        ( _range_self) =
            (_range )
        ( _typevariables_self) =
            (_typevariables )
        ( _type_self) =
            (_type )
    in  ( _self)
sem_Type_Parenthesized :: (T_Range) ->
                          (T_Type) ->
                          (T_Type)
sem_Type_Parenthesized (_range) (_type) =
    let (_self) =
            Type_Parenthesized _range_self _type_self
        ( _range_self) =
            (_range )
        ( _type_self) =
            (_type )
    in  ( _self)
sem_Type_Qualified :: (T_Range) ->
                      (T_ContextItems) ->
                      (T_Type) ->
                      (T_Type)
sem_Type_Qualified (_range) (_context) (_type) =
    let (_self) =
            Type_Qualified _range_self _context_self _type_self
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _type_self) =
            (_type )
    in  ( _self)
sem_Type_Variable :: (T_Range) ->
                     (T_Name) ->
                     (T_Type)
sem_Type_Variable (_range) (_name) =
    let (_self) =
            Type_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
-- Types -------------------------------------------------------
-- semantic domain
type T_Types = ( (Types))
-- cata
sem_Types :: (Types) ->
             (T_Types)
sem_Types (list) =
    (foldr (sem_Types_Cons) (sem_Types_Nil) ((map sem_Type list)))
sem_Types_Cons :: (T_Type) ->
                  (T_Types) ->
                  (T_Types)
sem_Types_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Types_Nil :: (T_Types)
sem_Types_Nil  =
    let (_self) =
            []
    in  ( _self)

