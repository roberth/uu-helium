-- do not edit; automatically generated by UU_AG
module StaticAnalysis where

import UHA_Syntax


-- standard
import Monad                   ( when )
import List                    ( intersperse, partition, nub, zipWith4, union )
-- types
import Types
import TypeConversion
-- constraints
import Constraints
import LiftedConstraints
import ConstraintTree
import Strategy
-- messages
import Messages
-- solvers
import SolveConstraints 
import SolveEquivalenceGroups  ( solveEquivalenceGroups )
import SolveGreedy             ( solveGreedy )
import ConstraintInfo
import TypeGraphConstraintInfo
import EquivalenceGroupsImplementation ( ) -- only import instance declaration
import HeliumConstraintInfo
-- common
import EnvironmentSynonyms
import SortedAssocList
-- other
import TopSort                 ( topSort )
import Utils                   ( internalError )
import UHA_Utils               ( noRange, getNameRange, getExprRange )
import DerivingShow            ( typeOfShowFunction, nameOfShowFunction ) 

 
import OneLiner
import Char
{-
import List (intersperse)
import SATypes (isTupleConstructor)
-}

import ImportEnvironment

import List       ( sort, group, nubBy )
import UHA_Utils  ( getNameName, getPatRange, getStatementRange )
import Utils      ( fst3 )
import Similarity ( similar )

-- filter undefined errors that are caused by the removal of a duplicate definition
filterRemovedNames :: [(Name,Entity)] -> Error -> Bool
filterRemovedNames list err = 
   case err of  
      Undefined entity name _ _ -> (name,entity) `notElem` list
      _                         -> True
                                  

type BindingGroups = [BindingGroup]
type BindingGroup  = (PatternAssumptions,Assumptions,ConstraintSets)
type MonoTable = [(PatternAssumptions,Tps)]

emptyBindingGroup :: BindingGroup
emptyBindingGroup = (empty,empty,[])

combineBindingGroup :: BindingGroup -> BindingGroup -> BindingGroup
combineBindingGroup (e1,a1,c1) (e2,a2,c2) = (e1 `combine` e2,a1 `combine` a2,c1++c2)

concatBindingGroups :: BindingGroups -> BindingGroup
concatBindingGroups = foldr combineBindingGroup emptyBindingGroup

checkForErrors :: Bool -> Tps -> TypeEnvironment -> BindingGroups -> (BindingGroups,[Error],[Warning],[(Name,Tps,Tp,Bool)],[((Tps,Tp),TpScheme,(Tree,Range))])
checkForErrors toplevel monos typeSignatures bdg = 
                    let
                        (completeEnvironment,completeAssumptions,_) = concatBindingGroups bdg
                        (typeSignaturesUnique,doubles) = onlyUniqueKeys typeSignatures
                        (unused,binds,rest) = typeSignaturesUnique ./\. completeEnvironment
          -- ERR : unused=type signatures that do not have a declaration
          -- ERR : doubles = type signatures that appear twice
          -- WAR : rest = declarations without a type signature
                        (completeEnvironmentUnique,doubles') = onlyUniqueKeys completeEnvironment 
                        (unused',_,_) = completeEnvironmentUnique ./\. completeAssumptions
          -- WAR : unused'=declaration is not used
          -- ERR : doubles'=multiple declarations
                        doubleNames = map head (doubles++doubles')
                        namesToBeRemoved = [n | (e,_,_) <-bdg, let ns = keys e, any (`elem` doubleNames) ns,n<-ns]
                        f (e,a,c) = (removes namesToBeRemoved e,removes namesToBeRemoved a,c)
                        warnings = makeUnused Definition (keys unused') toplevel
                        errors = makeNoFunDef TypeSignature (keys unused) (keys rest) ++                                             
                                 makeDuplicated TypeSignature doubles ++
                                 (if toplevel then [] else makeDuplicated Definition doubles')
                        typeAnnotations = [ ((monos,tp),ts,(Text (show n),getNameRange n')) | (as,bs) <- binds, (n',ts) <- as, (n,tp) <- bs ]
                        notypedef = [ (n,monos,t,toplevel) 
                                    | (n,t) <- filter ((`notElem` namesToBeRemoved) . fst) (toList rest)
                                    ]
                    in (map f bdg,errors,warnings,notypedef,typeAnnotations)

performAndCheckBindingGroup :: Bool -> Tps -> TypeEnvironment -> BindingGroup -> BindingGroups -> (PatternAssumptions,Assumptions,ConstraintSet,MonoTable,[Error],[Warning],[(Name,Tps,Tp,Bool)],[((Tps,Tp),TpScheme,(Tree,Range))])
performAndCheckBindingGroup toplevel monos typeSignatures context xs =
   let bdg = reverse (context : xs)
       (bdgs',errs,wars,notypedef,anns) = checkForErrors toplevel monos typeSignatures bdg
       (env,aset,cset,mt) = performBindingGroup monos typeSignatures (reverse (context : xs))
   in (env,aset,cset,mt,errs,wars,notypedef,anns)
                    
performBindingGroup :: Tps -> TypeEnvironment -> BindingGroups -> (PatternAssumptions,Assumptions,ConstraintSet,MonoTable)
performBindingGroup monos typeSignatures bdgs =
   variableDependencies (bindingGroupAnalysis bdgs)

   where
        bindingGroupAnalysis :: BindingGroups -> BindingGroups
        bindingGroupAnalysis cs
                        = let explicits = map fst (toList typeSignatures)
                              indexMap = concat (zipWith f cs [0..])
                              f (env,_,_) i = [(n,i) | (n,_)<-toList env, n `notElem` explicits]
                              edges    = concat (zipWith f' cs [0..])
                              f' (_,ass,_) i = [(i,j)|(n,_)<-toList ass,(n',j)<-indexMap,n==n']
                              list = topSort (length cs-1) edges
                          in map (concatBindingGroups . map (cs !!)) list

        variableDependencies :: BindingGroups -> (PatternAssumptions,Assumptions,ConstraintSet,MonoTable)
        variableDependencies = foldr op (empty,empty,ctEmpty,[]) where
            op (e,a,c) (env,aset,cset,mt) =
               let (cset1,e'     ) = (typeSignatures .:::. e) cinfoBindingGroupExplicitTypedBinding
                   (cset5,aset'  ) = (.<==.) monos e' aset    cinfoBindingGroupImplicit
                   (cset2,a'     ) = (typeSignatures .:::. a) cinfoBindingGroupExplicit
                   (cset3,a'',_,_) = (e' !===! a')            cinfoSameBindingGroup
               in ( e' `combine` env
                  , a'' `combine` aset'
                  , cset2 .>>. cset3 .>>. cset5 .>>. 
                    ctStrictOrder [ cset1 .<<. ctNode (reverse c)
                                  , cset
                                  ] 
                  , (e,elts e'):mt
                  )

findMono :: Tp -> MonoTable -> Tps
findMono i = let p = elem i . map snd . toList . fst
             in snd . head . filter p

cinfoBindingGroupExplicitTypedBinding :: Name -> (Tp,Tp) -> HeliumConstraintInfo
cinfoBindingGroupExplicitTypedBinding =
  \name tppair ->
  CInfo { info       = (NTBindingGroup,AltBindingGroup,"explicit typed binding, "++show name)
        , location   = "explicitly typed binding"
        , errorrange = getNameRange name
        , sources    = [ SD_Term (Text (show name))]
        , typepair   = tppair
        , properties = [ {- FolkloreConstraint
                       , -} HighlyTrusted
                       , ExplicitTypedBinding
                       , Size 1 ]  
        }

variableBindingCInfo :: (InfoNT,InfoAlt) -> Name -> (Tp,Tp) -> HeliumConstraintInfo
variableBindingCInfo (infoNT,infoAlt) var tppair =
  CInfo { info       = (infoNT,infoAlt,show var) 
        , location   = "variable"
        , errorrange = getNameRange var
        , sources    = [ SD_Expr (Text (show var)) ]
        , typepair   = tppair
        , properties = [ FolkloreConstraint
                       , UnifierTypeVariable (tpToInt (fst tppair))
                       , Size 1 ]  
        }
        
cinfoSameBindingGroup :: Name -> (Tp,Tp) -> HeliumConstraintInfo
cinfoSameBindingGroup var = variableBindingCInfo (NTBindingGroup,AltBindingGroup) var

cinfoBindingGroupImplicit :: Name -> (Tp,Tp) -> HeliumConstraintInfo
cinfoBindingGroupImplicit =
  \var tppair ->   
  CInfo { info       = (NTBindingGroup,AltBindingGroup,"implicit, "++show var)
        , location   = "variable"
        , errorrange = getNameRange var
        , sources    = [ SD_Expr (Text (show var)) ]
        , typepair   = tppair
        , properties = [ FolkloreConstraint
                       , HighlyTrusted
                       , Size 1 ]   
        }

cinfoBindingGroupExplicit :: Name -> (Tp,Tp) -> HeliumConstraintInfo
cinfoBindingGroupExplicit =
  \var tppair ->
  CInfo { info       = (NTBindingGroup,AltBindingGroup,"explicit, "++show var)
        , location   = "variable"
        , errorrange = getNameRange var
        , sources    = [ SD_Expr (Text (show var)) ]
        , typepair   = tppair
        , properties = [ FolkloreConstraint
                       , UnifierTypeVariable (tpToInt (fst tppair))
                       , Size 1 ]  
        }

convertMaybeOneLineTree :: Maybe Tree -> Tree
convertMaybeOneLineTree = maybe (Text "") id
    
getRHSRange :: RightHandSide -> Range
getRHSRange (RightHandSide_Expression r _ _) = r
getRHSRange (RightHandSide_Guarded r _ _) = r

getMaybeExprRange :: MaybeExpression -> Range
getMaybeExprRange (MaybeExpression_Just expr) = getExprRange expr
getMaybeExprRange (MaybeExpression_Nothing)   = noRange

tpToInt :: Tp -> Int
tpToInt tp = case ftv tp of 
               [i] -> i
               _   -> (-1)


encloseSep :: String -> String -> String -> [Tree] -> Tree
encloseSep left sep right [] = Node [Text left, Text right]
encloseSep left sep right (t:ts) =
    Node ([ Text left] ++ (t : concatMap (\t -> [Text sep,t]) ts) ++ [Text right] )

punctuate :: String -> [Tree] -> Tree
punctuate _ [] = Text ""
punctuate _ [t] = t
punctuate s (t:ts) = Node (t : concatMap (\t -> [Text s,t]) ts)
    
parens :: Tree -> Tree
parens tree = Node [ Text "(", tree, Text ")" ]

sepBy :: Tree -> [Tree] -> [Tree]
sepBy separator list =
    intersperse separator (map (\x -> Node [x]) list)

intErr :: String -> String -> a
intErr node message = internalError "UHA_OneLine" node message


checkRecursionTypeSynonyms :: TypeSynonymEnvironment -> (OrderedTypeSynonyms,[Names])
checkRecursionTypeSynonyms assoclist = 
    let synonyms  = toList assoclist
        nameTable = zip (map fst synonyms) [0..]
        synTable  = zip [0..] synonyms 
        edges = concat [ let Just i1 = lookup n1 nameTable
                         in maybe [] (\i2 -> [(i2,i1)]) (lookup n2 nameTable)
                       | (n1,(_,f)) <- synonyms
                       , s2         <- constantsInType (f (map TVar [0..]))
               , let n2 = Name_Identifier noRange [] s2
                       ]
        list = topSort (length synonyms-1) edges  
        op [i] (as,bs)
           | (i,i) `elem` edges = (as,[ n | (n,i') <- nameTable, i==i' ] : bs)
           | otherwise          = let Just (name,(arity,tf)) = lookup i synTable
                                  in ((show name,arity,tf):as,bs)
        op is  (as,bs) = (as,[ n | i <- is, (n,i') <- nameTable, i==i'] : bs)
    in foldr op ([],[]) list

addToScope :: Names -> Names -> (Names,[Warning])
addToScope as bs = foldr op (bs,[]) (nub as)
   where op a (names,wars) = case partition (==a) names of
                               ([name],rest) -> (a : rest,Shadow name a : wars)
                               _             -> (a : names,wars)

checkType :: TypeConstructorEnvironment -> Names -> Type -> [Error]
checkType tyconEnv namesInScope t =
    let (f, xs) = walkSpine t
        xsErrors = concatMap (checkType tyconEnv namesInScope) xs
    in
        xsErrors
        ++
        case f of
            Type_Constructor _ c ->
                checkKind c tyconEnv (length xs) namesInScope
            Type_Variable _ v ->
                if length xs /= 0 then
                    [ TypeVarApplication v ]
                else
                    []
            _ ->
                internalError "StaticAnalysis" "checkType" "unexpected type"

walkSpine :: Type -> (Type, [Type])
walkSpine t =
    case t of
        Type_Variable _ _ -> (t, [])
        Type_Constructor _ _ -> (t, [])
        Type_Application _ _ f xs ->
            let (t, ys) = walkSpine f
            in (t, ys ++ xs)
        Type_Parenthesized _ t -> walkSpine t

checkKind :: Name -> TypeConstructorEnvironment -> Int -> Names -> [Error]
checkKind tycon@(Name_Special _ _ ('(':commas)) _ useArity namesInScope =
    if expected == useArity then
        []
    else
        [ ArityMismatch TypeConstructor tycon expected useArity]
    where
        expected =
            case length (takeWhile (== ',') commas) of
                 0 -> 0  -- ()
                 n -> n + 1 -- (,) (,,) ...

checkKind tycon tyconEnv useArity namesInScope =
    case lookupAL tycon tyconEnv of
        Nothing ->
            let hint = if tycon `elem` namesInScope 
                         then Just ("Constructor "++show (show tycon)++" cannot be used in a type") 
                         else Nothing 
            in [ Undefined TypeConstructor tycon (keys tyconEnv) hint ]
        Just defArity ->
            if useArity /= defArity then
                [ ArityMismatch TypeConstructor tycon defArity useArity ]
            else
                [ ]

findSimilarFunctionBindings :: TypeEnvironment -> [(Name,Name)] -> [Warning]
findSimilarFunctionBindings environment candidates = 
   [ uncurry SimilarFunctionBindings pair
   | (n1,n2) <- candidates
   , let bool1 = n1 `elem` keys environment
         bool2 = n2 `elem` keys environment
         pair  = if bool1 then (n2,n1) else (n1,n2)
   , bool1 `xor` bool2
   ]

xor :: Bool -> Bool -> Bool
xor b1 b2 = not (b1 == b2)

listToAssocList :: Ord a => [a] -> AssocList a ()
listToAssocList list = fromList (zip list (repeat ()))

mode :: Ord a => [a] -> Maybe a -- Just ... IF any of the elements is more common
mode xs = 
    case filter ((== maxFreq) . snd) fs of
        [(x, _)] -> Just x
        _ -> Nothing        
  where
    maxFreq = maximum (map snd fs)
    fs = frequencies xs

frequencies :: Ord a => [a] -> [(a, Int)]
frequencies = map (\ys -> (head ys, length ys)) . group . sort

patternConstructorErrors :: Maybe TpScheme -> Name -> Names -> Int -> Names -> [Error]
patternConstructorErrors maybetparity name env useArity namesTyconEnv =
    case maybetparity of
        Nothing -> 
            [ undefinedConstructor name env namesTyconEnv ]
        Just tpScheme -> 
            let arity = arityOfTpScheme tpScheme
            in if arity /= useArity
               then [ ArityMismatch Constructor name arity useArity ]
               else []

checkExport entity name inScope =
    makeUndefined entity
        (if name `elem` inScope then
            []
         else
            [name]
        )
        (nubBy equalName inScope)

equalName x y =
    getNameName x == getNameName y        
-- Alternative -------------------------------------------------
{-
   inherited attributes:
      betaLeft             : Tp
      betaRight            : Tp
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      constraints          : ConstraintSet
      oneLineTree          : Tree
      self                 : Alternative
      size                 : Int

-}
{-
   local variables for Alternative.Alternative:
      shadowing
      namesInScope
      oneLineTree
      size
      cinfoRight
      cinfoLeft
      cinfoBind
      conRight
      conLeft
      unused
      duplicated
      assumptions'
      csetBinds
      self

-}
{-
   local variables for Alternative.Empty:
      oneLineTree
      size
      self

-}
-- semantic domain
type T_Alternative = (Tp) ->
                     (Tp) ->
                     (Int) ->
                     ([(Name,Tps,Tp,Bool)]) ->
                     (ConstructorEnvironment) ->
                     ([Error]) ->
                     ([Error]) ->
                     (Tps) ->
                     (Names) ->
                     (TypeConstructorEnvironment) ->
                     ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                     ([Warning]) ->
                     ((Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),(Tree),(Alternative),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_Alternative :: (Alternative) ->
                   (T_Alternative)
sem_Alternative ((Alternative_Alternative (_range) (_pattern) (_righthandside))) =
    (sem_Alternative_Alternative ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_RightHandSide (_righthandside))))
sem_Alternative ((Alternative_Empty (_range))) =
    (sem_Alternative_Empty ((sem_Range (_range))))
sem_Alternative_Alternative :: (T_Range) ->
                               (T_Pattern) ->
                               (T_RightHandSide) ->
                               (T_Alternative)
sem_Alternative_Alternative (_range) (_pattern) (_righthandside) (_lhs_betaLeft) (_lhs_betaRight) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Alternative_Alternative _range_self _pattern_self _righthandside_self
        ((_csetBinds,_assumptions',_duplicated,_unused)) =
            (_pattern_environment !===! _righthandside_assumptions) _cinfoBind
        (_conLeft) =
            [ (_pattern_beta .==. _lhs_betaLeft) _cinfoLeft ]
        (_conRight) =
            [ (_righthandside_beta .==. _lhs_betaRight) _cinfoRight ]
        (_cinfoBind) =
            variableBindingCInfo (NTAlternative,AltAlternative)
        (_cinfoLeft) =
            \tppair ->
            CInfo { info       = (NTAlternative,AltAlternative,"left")
                  , location   = "case pattern"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _pattern_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ UnifierTypeVariable (tpToInt _lhs_betaLeft)
                                 , Size _size ]
                  }
        (_cinfoRight) =
            \tppair ->
            CInfo { info       = (NTAlternative,AltAlternative,"right")
                  , location   = "right-hand side of case alternative"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr (_righthandside_oneLineTree "") ]
                  , typepair   = tppair
                  , properties = [ UnifierTypeVariable (tpToInt _lhs_betaRight)
                                 , Size _size ]
                  }
        (_size) =
            _pattern_size + _righthandside_size
        (_oneLineTree) =
            Node [ _pattern_oneLineTree, _righthandside_oneLineTree "->" ]
        ((_namesInScope,_shadowing)) =
            addToScope (keys _pattern_environment) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_pattern_oneLineTree,_pattern_self,_pattern_size,_pattern_warnings) =
            (_pattern (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _righthandside_assumptions,_righthandside_beta,_righthandside_betaUnique,_righthandside_collectednotypedef,_righthandside_constraints,_righthandside_kindErrors,_righthandside_miscerrors,_righthandside_oneLineTree,_righthandside_self,_righthandside_size,_righthandside_typeAnnotations,_righthandside_warnings) =
            (_righthandside (_pattern_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_pattern_miscerrors) (elts _pattern_environment ++ _lhs_monos) (_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_pattern_warnings))
    in  (_assumptions'
        ,_righthandside_betaUnique
        ,_righthandside_collectednotypedef
        ,_csetBinds .>>.
         ctNode [ _conLeft  .<. _pattern_constraints
                , _conRight .<. _righthandside_constraints
                ]
        ,_righthandside_kindErrors
        ,makeDuplicated Variable _duplicated ++ _righthandside_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_righthandside_typeAnnotations
        ,_shadowing ++
         makeUnused Variable _unused False ++
         _righthandside_warnings
        )
sem_Alternative_Empty :: (T_Range) ->
                         (T_Alternative)
sem_Alternative_Empty (_range) (_lhs_betaLeft) (_lhs_betaRight) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Alternative_Empty _range_self
        (_size) =
            0
        (_oneLineTree) =
            Text ""
        ( _range_self) =
            (_range )
    in  (empty,_lhs_betaUnique,_lhs_collectednotypedef,ctEmpty,_lhs_kindErrors,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_typeAnnotations,_lhs_warnings)
-- Alternatives ------------------------------------------------
{-
   inherited attributes:
      betaLeft             : Tp
      betaRight            : Tp
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      constraintslist      : ConstraintSets
      oneLineTree          :  [ Tree] 
      self                 : Alternatives
      size                 : Int

-}
{-
   local variables for Alternatives.Cons:
      self

-}
{-
   local variables for Alternatives.Nil:
      self

-}
-- semantic domain
type T_Alternatives = (Tp) ->
                      (Tp) ->
                      (Int) ->
                      ([(Name,Tps,Tp,Bool)]) ->
                      (ConstructorEnvironment) ->
                      ([Error]) ->
                      ([Error]) ->
                      (Tps) ->
                      (Names) ->
                      (TypeConstructorEnvironment) ->
                      ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                      ([Warning]) ->
                      ((Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSets),([Error]),([Error]),( [ Tree] ),(Alternatives),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_Alternatives :: (Alternatives) ->
                    (T_Alternatives)
sem_Alternatives (list) =
    (foldr (sem_Alternatives_Cons) (sem_Alternatives_Nil) ((map sem_Alternative list)))
sem_Alternatives_Cons :: (T_Alternative) ->
                         (T_Alternatives) ->
                         (T_Alternatives)
sem_Alternatives_Cons (_hd) (_tl) (_lhs_betaLeft) (_lhs_betaRight) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_assumptions,_hd_betaUnique,_hd_collectednotypedef,_hd_constraints,_hd_kindErrors,_hd_miscerrors,_hd_oneLineTree,_hd_self,_hd_size,_hd_typeAnnotations,_hd_warnings) =
            (_hd (_lhs_betaLeft) (_lhs_betaRight) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _tl_assumptions,_tl_betaUnique,_tl_collectednotypedef,_tl_constraintslist,_tl_kindErrors,_tl_miscerrors,_tl_oneLineTree,_tl_self,_tl_size,_tl_typeAnnotations,_tl_warnings) =
            (_tl (_lhs_betaLeft) (_lhs_betaRight) (_hd_betaUnique) (_hd_collectednotypedef) (_lhs_constructorenv) (_hd_kindErrors) (_hd_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_hd_typeAnnotations) (_hd_warnings))
    in  (_hd_assumptions `combine` _tl_assumptions,_tl_betaUnique,_tl_collectednotypedef,_hd_constraints : _tl_constraintslist,_tl_kindErrors,_tl_miscerrors,_hd_oneLineTree  :  _tl_oneLineTree,_self,_hd_size  +  _tl_size,_tl_typeAnnotations,_tl_warnings)
sem_Alternatives_Nil :: (T_Alternatives)
sem_Alternatives_Nil (_lhs_betaLeft) (_lhs_betaRight) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            []
    in  (empty,_lhs_betaUnique,_lhs_collectednotypedef,[],_lhs_kindErrors,_lhs_miscerrors,[],_self,0,_lhs_typeAnnotations,_lhs_warnings)
-- AnnotatedType -----------------------------------------------
{-
   inherited attributes:
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      kindErrors           : [Error]

   synthesised attributes:
      self                 : AnnotatedType
      type                 : Type
      typevariables        : Names

-}
{-
   local variables for AnnotatedType.AnnotatedType:
      self

-}
-- semantic domain
type T_AnnotatedType = ([Error]) ->
                       (Names) ->
                       (TypeConstructorEnvironment) ->
                       (([Error]),(AnnotatedType),(Type),(Names))
-- cata
sem_AnnotatedType :: (AnnotatedType) ->
                     (T_AnnotatedType)
sem_AnnotatedType ((AnnotatedType_AnnotatedType (_range) (_strict) (_type))) =
    (sem_AnnotatedType_AnnotatedType ((sem_Range (_range))) (_strict) ((sem_Type (_type))))
sem_AnnotatedType_AnnotatedType :: (T_Range) ->
                                   (Bool) ->
                                   (T_Type) ->
                                   (T_AnnotatedType)
sem_AnnotatedType_AnnotatedType (_range) (_strict) (_type) (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_tyconEnv) =
    let (_self) =
            AnnotatedType_AnnotatedType _range_self _strict _type_self
        ( _range_self) =
            (_range )
        ( _type_self,_type_typevariables) =
            (_type (_lhs_tyconEnv))
    in  (checkType _lhs_tyconEnv _lhs_namesInScope _type_self ++ _lhs_kindErrors,_self,_type_self,_type_typevariables)
-- AnnotatedTypes ----------------------------------------------
{-
   inherited attributes:
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      kindErrors           : [Error]

   synthesised attributes:
      self                 : AnnotatedTypes
      types                : Types
      typevariables        : Names

-}
{-
   local variables for AnnotatedTypes.Cons:
      self

-}
{-
   local variables for AnnotatedTypes.Nil:
      self

-}
-- semantic domain
type T_AnnotatedTypes = ([Error]) ->
                        (Names) ->
                        (TypeConstructorEnvironment) ->
                        (([Error]),(AnnotatedTypes),(Types),(Names))
-- cata
sem_AnnotatedTypes :: (AnnotatedTypes) ->
                      (T_AnnotatedTypes)
sem_AnnotatedTypes (list) =
    (foldr (sem_AnnotatedTypes_Cons) (sem_AnnotatedTypes_Nil) ((map sem_AnnotatedType list)))
sem_AnnotatedTypes_Cons :: (T_AnnotatedType) ->
                           (T_AnnotatedTypes) ->
                           (T_AnnotatedTypes)
sem_AnnotatedTypes_Cons (_hd) (_tl) (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_tyconEnv) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_kindErrors,_hd_self,_hd_type,_hd_typevariables) =
            (_hd (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_tyconEnv))
        ( _tl_kindErrors,_tl_self,_tl_types,_tl_typevariables) =
            (_tl (_hd_kindErrors) (_lhs_namesInScope) (_lhs_tyconEnv))
    in  (_tl_kindErrors,_self,_hd_type : _tl_types,_hd_typevariables  ++  _tl_typevariables)
sem_AnnotatedTypes_Nil :: (T_AnnotatedTypes)
sem_AnnotatedTypes_Nil (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_tyconEnv) =
    let (_self) =
            []
    in  (_lhs_kindErrors,_self,[],[])
-- Body --------------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      importTypeEnv        : TypeEnvironment
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectEnvironment   : ImportEnvironment
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      namesInScope         : Names
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      constraints          : ConstraintSet
      derivedFunctions     : TypeEnvironment
      environment          : PatternAssumptions
      fixOps               : Names
      importedModules      : Names
      self                 : Body
      size                 : Int
      toplevelNames        : Names
      typeSignatures       : TypeEnvironment

-}
{-
   local variables for Body.Body:
      suspiciousErrors
      shadowing
      namesInScope
      assumptions
      environment
      cinfo
      aset'
      csetBinds
      anns
      tiNoTypeDefinition
      tiWarnings
      tiErrors
      monoTable
      cset
      aset
      env
      self

-}
-- semantic domain
type T_Body = (Int) ->
              (ImportEnvironment) ->
              ([(Name,Tps,Tp,Bool)]) ->
              (ConstructorEnvironment) ->
              (TypeEnvironment) ->
              ([Error]) ->
              ([Error]) ->
              (Names) ->
              (TypeConstructorEnvironment) ->
              ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
              ([Warning]) ->
              ((Assumptions),(Int),(ImportEnvironment),([(Name,Tps,Tp,Bool)]),(ConstraintSet),(TypeEnvironment),(PatternAssumptions),(Names),(Names),([Error]),([Error]),(Names),(Body),(Int),(Names),([((Tps,Tp),TpScheme,(Tree,Range))]),(TypeEnvironment),([Warning]))
-- cata
sem_Body :: (Body) ->
            (T_Body)
sem_Body ((Body_Body (_range) (_importdeclarations) (_declarations))) =
    (sem_Body_Body ((sem_Range (_range))) ((sem_ImportDeclarations (_importdeclarations))) ((sem_Declarations (_declarations))))
sem_Body_Body :: (T_Range) ->
                 (T_ImportDeclarations) ->
                 (T_Declarations) ->
                 (T_Body)
sem_Body_Body (_range) (_importdeclarations) (_declarations) (_lhs_betaUnique) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_importTypeEnv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Body_Body _range_self _importdeclarations_self _declarations_self
        ((_env,_aset,_cset,_monoTable,_tiErrors,_tiWarnings,_tiNoTypeDefinition,_anns)) =
            performAndCheckBindingGroup True [] _declarations_typeSignatures emptyBindingGroup _declarations_bindingGroups
        ((_csetBinds,_aset')) =
            (combine _declarations_derivedFunctions _lhs_importTypeEnv .:::. _aset) _cinfo
        (_cinfo) =
            \var tppair ->
            CInfo { info       = (NTBody,AltBody,show var)
                  , location   = "variable"
                  , errorrange = getNameRange var
                  , sources    = [ SD_Expr (Text (show var)) ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , HighlyTrusted
                                 , IsImported var
                                 , Size _declarations_size ]
                  }
        ((_environment,_assumptions,_)) =
            concatBindingGroups _declarations_bindingGroups
        ((_namesInScope,_shadowing)) =
            addToScope (keys _environment) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ( _range_self) =
            (_range )
        ( _importdeclarations_importedModules,_importdeclarations_self) =
            (_importdeclarations ([]))
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectEnvironment,_declarations_collectednotypedef,_declarations_derivedFunctions,_declarations_fixOps,_declarations_kindErrors,_declarations_miscerrors,_declarations_oneLineTree,_declarations_previousWasAlsoFB,_declarations_self,_declarations_size,_declarations_suspiciousFBs,_declarations_typeAnnotations,_declarations_typeSignatures,_declarations_warnings) =
            (_declarations (_lhs_betaUnique) ([]) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (empty) ([]) (_lhs_kindErrors) (_lhs_miscerrors) (_monoTable) ([]) (_namesInScope) (Nothing) ([]) (_lhs_tyconEnv) (_lhs_typeAnnotations) (empty) (_lhs_warnings))
    in  (_aset'
        ,_declarations_betaUnique
        ,_declarations_collectEnvironment
        ,_tiNoTypeDefinition ++ _declarations_collectednotypedef
        ,ctNode [ _csetBinds .<<. _cset ]
        ,_declarations_derivedFunctions
        ,_env
        ,_declarations_fixOps
        ,_importdeclarations_importedModules
        ,_declarations_kindErrors
        ,_tiErrors ++ _declarations_miscerrors
        ,_namesInScope
        ,_self
        ,_declarations_size
        ,concatMap ( keys . fst3 ) _declarations_bindingGroups
        ,_anns ++ _declarations_typeAnnotations
        ,_declarations_typeSignatures
        ,_shadowing ++
         _tiWarnings ++
         _declarations_warnings ++
         _suspiciousErrors
        )
-- Constructor -------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      namesInScope         : Names
      simpletype           : SimpleType
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      collectEnvironment   : ImportEnvironment
      kindErrors           : [Error]

   synthesised attributes:
      self                 : Constructor
      typevariables        : Names

-}
{-
   local variables for Constructor.Constructor:
      tps
      tp
      typeScheme
      self

-}
{-
   local variables for Constructor.Infix:
      tps
      tp
      typeScheme
      self

-}
{-
   local variables for Constructor.Record:
      self

-}
-- semantic domain
type T_Constructor = (ImportEnvironment) ->
                     (ConstructorEnvironment) ->
                     ([Error]) ->
                     (Names) ->
                     (SimpleType) ->
                     (TypeConstructorEnvironment) ->
                     ((ImportEnvironment),([Error]),(Constructor),(Names))
-- cata
sem_Constructor :: (Constructor) ->
                   (T_Constructor)
sem_Constructor ((Constructor_Constructor (_range) (_constructor) (_types))) =
    (sem_Constructor_Constructor ((sem_Range (_range))) ((sem_Name (_constructor))) ((sem_AnnotatedTypes (_types))))
sem_Constructor ((Constructor_Infix (_range) (_leftType) (_constructorOperator) (_rightType))) =
    (sem_Constructor_Infix ((sem_Range (_range))) ((sem_AnnotatedType (_leftType))) ((sem_Name (_constructorOperator))) ((sem_AnnotatedType (_rightType))))
sem_Constructor ((Constructor_Record (_range) (_constructor) (_fieldDeclarations))) =
    (sem_Constructor_Record ((sem_Range (_range))) ((sem_Name (_constructor))) ((sem_FieldDeclarations (_fieldDeclarations))))
sem_Constructor_Constructor :: (T_Range) ->
                               (T_Name) ->
                               (T_AnnotatedTypes) ->
                               (T_Constructor)
sem_Constructor_Constructor (_range) (_constructor) (_types) (_lhs_collectEnvironment) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_tyconEnv) =
    let (_self) =
            Constructor_Constructor _range_self _constructor_self _types_self
        (_typeScheme) =
            generalizeAll (foldr (.->.) _tp _tps)
        ((_tp,_tps)) =
            convertFromSimpleTypeAndTypes _lhs_simpletype _types_types
        ( _range_self) =
            (_range )
        ( _constructor_isIdentifier,_constructor_isOperator,_constructor_isSpecial,_constructor_oneLineTree,_constructor_self) =
            (_constructor )
        ( _types_kindErrors,_types_self,_types_types,_types_typevariables) =
            (_types (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_tyconEnv))
    in  (addValueConstructor _constructor_self _typeScheme _lhs_collectEnvironment,_types_kindErrors,_self,_types_typevariables)
sem_Constructor_Infix :: (T_Range) ->
                         (T_AnnotatedType) ->
                         (T_Name) ->
                         (T_AnnotatedType) ->
                         (T_Constructor)
sem_Constructor_Infix (_range) (_leftType) (_constructorOperator) (_rightType) (_lhs_collectEnvironment) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_tyconEnv) =
    let (_self) =
            Constructor_Infix _range_self _leftType_self _constructorOperator_self _rightType_self
        (_typeScheme) =
            generalizeAll (foldr (.->.) _tp _tps)
        ((_tp,_tps)) =
            convertFromSimpleTypeAndTypes _lhs_simpletype [_leftType_type,_rightType_type]
        ( _range_self) =
            (_range )
        ( _leftType_kindErrors,_leftType_self,_leftType_type,_leftType_typevariables) =
            (_leftType (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_tyconEnv))
        ( _constructorOperator_isIdentifier,_constructorOperator_isOperator,_constructorOperator_isSpecial,_constructorOperator_oneLineTree,_constructorOperator_self) =
            (_constructorOperator )
        ( _rightType_kindErrors,_rightType_self,_rightType_type,_rightType_typevariables) =
            (_rightType (_leftType_kindErrors) (_lhs_namesInScope) (_lhs_tyconEnv))
    in  (addValueConstructor _constructorOperator_self _typeScheme _lhs_collectEnvironment,_rightType_kindErrors,_self,_leftType_typevariables  ++  _rightType_typevariables)
sem_Constructor_Record :: (T_Range) ->
                          (T_Name) ->
                          (T_FieldDeclarations) ->
                          (T_Constructor)
sem_Constructor_Record (_range) (_constructor) (_fieldDeclarations) (_lhs_collectEnvironment) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_tyconEnv) =
    let (_self) =
            Constructor_Record _range_self _constructor_self _fieldDeclarations_self
        ( _range_self) =
            (_range )
        ( _constructor_isIdentifier,_constructor_isOperator,_constructor_isSpecial,_constructor_oneLineTree,_constructor_self) =
            (_constructor )
        ( _fieldDeclarations_self) =
            (_fieldDeclarations (_lhs_namesInScope))
    in  (_lhs_collectEnvironment,_lhs_kindErrors,_self,[])
-- Constructors ------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      namesInScope         : Names
      simpletype           : SimpleType
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      collectEnvironment   : ImportEnvironment
      kindErrors           : [Error]

   synthesised attributes:
      self                 : Constructors
      typevariables        : Names

-}
{-
   local variables for Constructors.Cons:
      self

-}
{-
   local variables for Constructors.Nil:
      self

-}
-- semantic domain
type T_Constructors = (ImportEnvironment) ->
                      (ConstructorEnvironment) ->
                      ([Error]) ->
                      (Names) ->
                      (SimpleType) ->
                      (TypeConstructorEnvironment) ->
                      ((ImportEnvironment),([Error]),(Constructors),(Names))
-- cata
sem_Constructors :: (Constructors) ->
                    (T_Constructors)
sem_Constructors (list) =
    (foldr (sem_Constructors_Cons) (sem_Constructors_Nil) ((map sem_Constructor list)))
sem_Constructors_Cons :: (T_Constructor) ->
                         (T_Constructors) ->
                         (T_Constructors)
sem_Constructors_Cons (_hd) (_tl) (_lhs_collectEnvironment) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_tyconEnv) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_collectEnvironment,_hd_kindErrors,_hd_self,_hd_typevariables) =
            (_hd (_lhs_collectEnvironment) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_tyconEnv))
        ( _tl_collectEnvironment,_tl_kindErrors,_tl_self,_tl_typevariables) =
            (_tl (_hd_collectEnvironment) (_lhs_constructorenv) (_hd_kindErrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_tyconEnv))
    in  (_tl_collectEnvironment,_tl_kindErrors,_self,_hd_typevariables  ++  _tl_typevariables)
sem_Constructors_Nil :: (T_Constructors)
sem_Constructors_Nil (_lhs_collectEnvironment) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_tyconEnv) =
    let (_self) =
            []
    in  (_lhs_collectEnvironment,_lhs_kindErrors,_self,[])
-- ContextItem -------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : ContextItem

-}
{-
   local variables for ContextItem.ContextItem:
      tyconEnv
      self

-}
-- semantic domain
type T_ContextItem = ((ContextItem))
-- cata
sem_ContextItem :: (ContextItem) ->
                   (T_ContextItem)
sem_ContextItem ((ContextItem_ContextItem (_range) (_name) (_types))) =
    (sem_ContextItem_ContextItem ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Types (_types))))
sem_ContextItem_ContextItem :: (T_Range) ->
                               (T_Name) ->
                               (T_Types) ->
                               (T_ContextItem)
sem_ContextItem_ContextItem (_range) (_name) (_types) =
    let (_self) =
            ContextItem_ContextItem _range_self _name_self _types_self
        (_tyconEnv) =
            internalError "PartialSyntax.ag" "n/a" "ContextItem.ContextItem"
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _types_self,_types_typevariables) =
            (_types (_tyconEnv))
    in  (_self)
-- ContextItems ------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : ContextItems

-}
{-
   local variables for ContextItems.Cons:
      self

-}
{-
   local variables for ContextItems.Nil:
      self

-}
-- semantic domain
type T_ContextItems = ((ContextItems))
-- cata
sem_ContextItems :: (ContextItems) ->
                    (T_ContextItems)
sem_ContextItems (list) =
    (foldr (sem_ContextItems_Cons) (sem_ContextItems_Nil) ((map sem_ContextItem list)))
sem_ContextItems_Cons :: (T_ContextItem) ->
                         (T_ContextItems) ->
                         (T_ContextItems)
sem_ContextItems_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  (_self)
sem_ContextItems_Nil :: (T_ContextItems)
sem_ContextItems_Nil  =
    let (_self) =
            []
    in  (_self)
-- Declaration -------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monoTable            : MonoTable
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      bindingGroups        : BindingGroups
      collectEnvironment   : ImportEnvironment
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      derivedFunctions     : TypeEnvironment
      fixOps               : Names
      kindErrors           : [Error]
      miscerrors           : [Error]
      previousWasAlsoFB    : Maybe Name
      suspiciousFBs        : [(Name,Name)]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      typeSignatures       : TypeEnvironment
      warnings             : [Warning]

   synthesised attributes:
      oneLineTree          : Tree
      self                 : Declaration
      size                 : Int

-}
{-
   local variables for Declaration.Class:
      constraints
      assumptions
      oneLineTree
      size
      self

-}
{-
   local variables for Declaration.Data:
      undef
      doubles
      unused
      oneLineTree
      size
      self

-}
{-
   local variables for Declaration.Default:
      oneLineTree
      size
      self

-}
{-
   local variables for Declaration.Empty:
      oneLineTree
      size
      self

-}
{-
   local variables for Declaration.Fixity:
      oneLineTree
      size
      self

-}
{-
   local variables for Declaration.FunctionBindings:
      arityErrors
      oneLineTree
      cinfo
      mybdggrp
      newcon
      betasLeft
      betaRight
      beta
      self

-}
{-
   local variables for Declaration.Instance:
      constraints
      assumptions
      oneLineTree
      size
      self

-}
{-
   local variables for Declaration.Newtype:
      oneLineTree
      size
      self

-}
{-
   local variables for Declaration.PatternBinding:
      patternDefinesNoVarsErrors
      oneLineTree
      size
      cinfo
      mybdggrp
      newcon
      self

-}
{-
   local variables for Declaration.Type:
      undef
      doubles
      unused
      typeSynonymInfo
      oneLineTree
      size
      self

-}
{-
   local variables for Declaration.TypeSignature:
      oneLineTree
      size
      typeScheme
      self

-}
-- semantic domain
type T_Declaration = (Int) ->
                     (BindingGroups) ->
                     (ImportEnvironment) ->
                     ([(Name,Tps,Tp,Bool)]) ->
                     (ConstructorEnvironment) ->
                     (TypeEnvironment) ->
                     (Names) ->
                     ([Error]) ->
                     ([Error]) ->
                     (MonoTable) ->
                     (Tps) ->
                     (Names) ->
                     (Maybe Name) ->
                     ([(Name,Name)]) ->
                     (TypeConstructorEnvironment) ->
                     ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                     (TypeEnvironment) ->
                     ([Warning]) ->
                     ((Int),(BindingGroups),(ImportEnvironment),([(Name,Tps,Tp,Bool)]),(TypeEnvironment),(Names),([Error]),([Error]),(Tree),(Maybe Name),(Declaration),(Int),([(Name,Name)]),([((Tps,Tp),TpScheme,(Tree,Range))]),(TypeEnvironment),([Warning]))
-- cata
sem_Declaration :: (Declaration) ->
                   (T_Declaration)
sem_Declaration ((Declaration_Class (_range) (_context) (_simpletype) (_where))) =
    (sem_Declaration_Class ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_MaybeDeclarations (_where))))
sem_Declaration ((Declaration_Data (_range) (_context) (_simpletype) (_constructors) (_derivings))) =
    (sem_Declaration_Data ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_Constructors (_constructors))) ((sem_Names (_derivings))))
sem_Declaration ((Declaration_Default (_range) (_types))) =
    (sem_Declaration_Default ((sem_Range (_range))) ((sem_Types (_types))))
sem_Declaration ((Declaration_Empty (_range))) =
    (sem_Declaration_Empty ((sem_Range (_range))))
sem_Declaration ((Declaration_Fixity (_range) (_fixity) (_priority) (_operators))) =
    (sem_Declaration_Fixity ((sem_Range (_range))) ((sem_Fixity (_fixity))) ((sem_MaybeInt (_priority))) ((sem_Names (_operators))))
sem_Declaration ((Declaration_FunctionBindings (_range) (_bindings))) =
    (sem_Declaration_FunctionBindings ((sem_Range (_range))) ((sem_FunctionBindings (_bindings))))
sem_Declaration ((Declaration_Instance (_range) (_context) (_name) (_types) (_where))) =
    (sem_Declaration_Instance ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_Name (_name))) ((sem_Types (_types))) ((sem_MaybeDeclarations (_where))))
sem_Declaration ((Declaration_Newtype (_range) (_context) (_simpletype) (_constructor) (_derivings))) =
    (sem_Declaration_Newtype ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_Constructor (_constructor))) ((sem_Names (_derivings))))
sem_Declaration ((Declaration_PatternBinding (_range) (_pattern) (_righthandside))) =
    (sem_Declaration_PatternBinding ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_RightHandSide (_righthandside))))
sem_Declaration ((Declaration_Type (_range) (_simpletype) (_type))) =
    (sem_Declaration_Type ((sem_Range (_range))) ((sem_SimpleType (_simpletype))) ((sem_Type (_type))))
sem_Declaration ((Declaration_TypeSignature (_range) (_names) (_type))) =
    (sem_Declaration_TypeSignature ((sem_Range (_range))) ((sem_Names (_names))) ((sem_Type (_type))))
sem_Declaration_Class :: (T_Range) ->
                         (T_ContextItems) ->
                         (T_SimpleType) ->
                         (T_MaybeDeclarations) ->
                         (T_Declaration)
sem_Declaration_Class (_range) (_context) (_simpletype) (_where) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_Class _range_self _context_self _simpletype_self _where_self
        (_size) =
            0
        (_oneLineTree) =
            intErr "Declaration" "class"
        ((_assumptions,_constraints)) =
            internalError "PartialSyntax.ag" "n/a" "Declaration.Class"
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_name,_simpletype_self,_simpletype_typevariables) =
            (_simpletype )
        ( _where_assumptions,_where_betaUnique,_where_collectednotypedef,_where_constraints,_where_kindErrors,_where_miscerrors,_where_namesInScope,_where_oneLineTree,_where_self,_where_size,_where_typeAnnotations,_where_warnings) =
            (_where (_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_where_betaUnique,_lhs_bindingGroups,_lhs_collectEnvironment,_where_collectednotypedef,_lhs_derivedFunctions,_lhs_fixOps,_where_kindErrors,_where_miscerrors,_oneLineTree,Nothing,_self,_size,_lhs_suspiciousFBs,_where_typeAnnotations,_lhs_typeSignatures,_where_warnings)
sem_Declaration_Data :: (T_Range) ->
                        (T_ContextItems) ->
                        (T_SimpleType) ->
                        (T_Constructors) ->
                        (T_Names) ->
                        (T_Declaration)
sem_Declaration_Data (_range) (_context) (_simpletype) (_constructors) (_derivings) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_Data _range_self _context_self _simpletype_self _constructors_self _derivings_self
        (_size) =
            0
        (_oneLineTree) =
            intErr "Declaration" "data"
        (_unused) =
            filter (`notElem` _constructors_typevariables) _simpletype_typevariables
        (_doubles) =
            filter ((>1) . length) . group . sort $        _simpletype_typevariables
        (_undef) =
            filter (`notElem` _simpletype_typevariables)   _constructors_typevariables
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_name,_simpletype_self,_simpletype_typevariables) =
            (_simpletype )
        ( _constructors_collectEnvironment,_constructors_kindErrors,_constructors_self,_constructors_typevariables) =
            (_constructors (_lhs_collectEnvironment) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_namesInScope) (_simpletype_self) (_lhs_tyconEnv))
        ( _derivings_isIdentifier,_derivings_isOperator,_derivings_isSpecial,_derivings_oneLineTree,_derivings_self) =
            (_derivings )
    in  (_lhs_betaUnique
        ,_lhs_bindingGroups
        ,addTypeConstructor _simpletype_name (length _simpletype_typevariables) _constructors_collectEnvironment
        ,_lhs_collectednotypedef
        ,add
             (nameOfShowFunction _simpletype_name)
             (typeOfShowFunction _simpletype_name _simpletype_typevariables)
             _lhs_derivedFunctions
        ,_lhs_fixOps
        ,_constructors_kindErrors
        ,concat [ makeDuplicated TypeVariable _doubles
                , makeUndefined TypeVariable _undef _simpletype_typevariables
                , _lhs_miscerrors
                ]
        ,_oneLineTree
        ,Nothing
        ,_self
        ,_size
        ,_lhs_suspiciousFBs
        ,_lhs_typeAnnotations
        ,_lhs_typeSignatures
        ,makeUnused TypeVariable _unused False ++ _lhs_warnings
        )
sem_Declaration_Default :: (T_Range) ->
                           (T_Types) ->
                           (T_Declaration)
sem_Declaration_Default (_range) (_types) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_Default _range_self _types_self
        (_size) =
            0
        (_oneLineTree) =
            intErr "Declaration" "default"
        ( _range_self) =
            (_range )
        ( _types_self,_types_typevariables) =
            (_types (_lhs_tyconEnv))
    in  (_lhs_betaUnique,_lhs_bindingGroups,_lhs_collectEnvironment,_lhs_collectednotypedef,_lhs_derivedFunctions,_lhs_fixOps,_lhs_kindErrors,_lhs_miscerrors,_oneLineTree,Nothing,_self,_size,_lhs_suspiciousFBs,_lhs_typeAnnotations,_lhs_typeSignatures,_lhs_warnings)
sem_Declaration_Empty :: (T_Range) ->
                         (T_Declaration)
sem_Declaration_Empty (_range) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_Empty _range_self
        (_size) =
            0
        (_oneLineTree) =
            Text ""
        ( _range_self) =
            (_range )
    in  (_lhs_betaUnique,_lhs_bindingGroups,_lhs_collectEnvironment,_lhs_collectednotypedef,_lhs_derivedFunctions,_lhs_fixOps,_lhs_kindErrors,_lhs_miscerrors,_oneLineTree,_lhs_previousWasAlsoFB,_self,_size,_lhs_suspiciousFBs,_lhs_typeAnnotations,_lhs_typeSignatures,_lhs_warnings)
sem_Declaration_Fixity :: (T_Range) ->
                          (T_Fixity) ->
                          (T_MaybeInt) ->
                          (T_Names) ->
                          (T_Declaration)
sem_Declaration_Fixity (_range) (_fixity) (_priority) (_operators) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_Fixity _range_self _fixity_self _priority_self _operators_self
        (_size) =
            0
        (_oneLineTree) =
            intErr "Declaration" "fixity"
        ( _range_self) =
            (_range )
        ( _fixity_self) =
            (_fixity )
        ( _priority_self) =
            (_priority )
        ( _operators_isIdentifier,_operators_isOperator,_operators_isSpecial,_operators_oneLineTree,_operators_self) =
            (_operators )
    in  (_lhs_betaUnique,_lhs_bindingGroups,_lhs_collectEnvironment,_lhs_collectednotypedef,_lhs_derivedFunctions,_operators_self ++ _lhs_fixOps,_lhs_kindErrors,_lhs_miscerrors,_oneLineTree,Nothing,_self,_size,_lhs_suspiciousFBs,_lhs_typeAnnotations,_lhs_typeSignatures,_lhs_warnings)
sem_Declaration_FunctionBindings :: (T_Range) ->
                                    (T_FunctionBindings) ->
                                    (T_Declaration)
sem_Declaration_FunctionBindings (_range) (_bindings) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_FunctionBindings _range_self _bindings_self
        (_beta) =
            TVar _lhs_betaUnique
        (_betaRight) =
            TVar (_lhs_betaUnique + 1)
        (_betasLeft) =
            take _bindings_numberOfPatterns (map TVar [_lhs_betaUnique + 2..])
        (_newcon) =
            [ (_beta .==. foldr (.->.) _betaRight _betasLeft) _cinfo ]
        (_mybdggrp) =
            ( single _bindings_name _beta
            , _bindings_assumptions
            , [ _newcon !<!
                ctNode [ ctVariable _lhs_betaUnique
                       , ctNode _bindings_constraintslist
                       ]
              ]
            )
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTDeclaration,AltFunctionBindings,show _bindings_name)
                  , location   = "function bindings (INTERNAL ERROR)"
                  , errorrange = _range_self
                  , sources    = [ ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , SuperHighlyTrusted
                                 , FuntionBindingEdge _bindings_numberOfPatterns
                                 , Size _bindings_size ]
                  }
        (_oneLineTree) =
            punctuate ";" _bindings_oneLineTree
        (_arityErrors) =
            if all (== head _bindings_arities) _bindings_arities
              then []
              else [ DefArityMismatch _bindings_name (mode _bindings_arities) _range_self ]
        ( _range_self) =
            (_range )
        ( _bindings_arities,_bindings_assumptions,_bindings_betaUnique,_bindings_collectednotypedef,_bindings_constraintslist,_bindings_kindErrors,_bindings_miscerrors,_bindings_name,_bindings_numberOfPatterns,_bindings_oneLineTree,_bindings_self,_bindings_size,_bindings_typeAnnotations,_bindings_warnings) =
            (_bindings (_betaRight) (_lhs_betaUnique + 2 + _bindings_numberOfPatterns) (_betasLeft) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (findMono _beta _lhs_monoTable ++ _lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_bindings_betaUnique
        ,_mybdggrp : _lhs_bindingGroups
        ,_lhs_collectEnvironment
        ,_bindings_collectednotypedef
        ,_lhs_derivedFunctions
        ,_lhs_fixOps
        ,_bindings_kindErrors
        ,_arityErrors ++ _bindings_miscerrors
        ,_oneLineTree
        ,Just _bindings_name
        ,_self
        ,_bindings_size
        ,case _lhs_previousWasAlsoFB of
            Just name | show name `similar` show _bindings_name
               -> (name,_bindings_name) : _lhs_suspiciousFBs
            _  -> _lhs_suspiciousFBs
        ,_bindings_typeAnnotations
        ,_lhs_typeSignatures
        ,_bindings_warnings
        )
sem_Declaration_Instance :: (T_Range) ->
                            (T_ContextItems) ->
                            (T_Name) ->
                            (T_Types) ->
                            (T_MaybeDeclarations) ->
                            (T_Declaration)
sem_Declaration_Instance (_range) (_context) (_name) (_types) (_where) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_Instance _range_self _context_self _name_self _types_self _where_self
        (_size) =
            0
        (_oneLineTree) =
            intErr "Declaration" "instance"
        ((_assumptions,_constraints)) =
            internalError "PartialSyntax.ag" "n/a" "Declaration.Instance"
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _types_self,_types_typevariables) =
            (_types (_lhs_tyconEnv))
        ( _where_assumptions,_where_betaUnique,_where_collectednotypedef,_where_constraints,_where_kindErrors,_where_miscerrors,_where_namesInScope,_where_oneLineTree,_where_self,_where_size,_where_typeAnnotations,_where_warnings) =
            (_where (_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_where_betaUnique,_lhs_bindingGroups,_lhs_collectEnvironment,_where_collectednotypedef,_lhs_derivedFunctions,_lhs_fixOps,_where_kindErrors,_where_miscerrors,_oneLineTree,Nothing,_self,_size,_lhs_suspiciousFBs,_where_typeAnnotations,_lhs_typeSignatures,_where_warnings)
sem_Declaration_Newtype :: (T_Range) ->
                           (T_ContextItems) ->
                           (T_SimpleType) ->
                           (T_Constructor) ->
                           (T_Names) ->
                           (T_Declaration)
sem_Declaration_Newtype (_range) (_context) (_simpletype) (_constructor) (_derivings) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_Newtype _range_self _context_self _simpletype_self _constructor_self _derivings_self
        (_size) =
            0
        (_oneLineTree) =
            intErr "Declaration" "newtype"
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_name,_simpletype_self,_simpletype_typevariables) =
            (_simpletype )
        ( _constructor_collectEnvironment,_constructor_kindErrors,_constructor_self,_constructor_typevariables) =
            (_constructor (_lhs_collectEnvironment) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_namesInScope) (_simpletype_self) (_lhs_tyconEnv))
        ( _derivings_isIdentifier,_derivings_isOperator,_derivings_isSpecial,_derivings_oneLineTree,_derivings_self) =
            (_derivings )
    in  (_lhs_betaUnique,_lhs_bindingGroups,_constructor_collectEnvironment,_lhs_collectednotypedef,_lhs_derivedFunctions,_lhs_fixOps,_constructor_kindErrors,_lhs_miscerrors,_oneLineTree,Nothing,_self,_size,_lhs_suspiciousFBs,_lhs_typeAnnotations,_lhs_typeSignatures,_lhs_warnings)
sem_Declaration_PatternBinding :: (T_Range) ->
                                  (T_Pattern) ->
                                  (T_RightHandSide) ->
                                  (T_Declaration)
sem_Declaration_PatternBinding (_range) (_pattern) (_righthandside) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_PatternBinding _range_self _pattern_self _righthandside_self
        (_newcon) =
            [ (_righthandside_beta .==. _pattern_beta) _cinfo ]
        (_mybdggrp) =
            ( _pattern_environment
            , _righthandside_assumptions
            , [ _newcon .>.
                ctNode [ _pattern_constraints
                       , _righthandside_constraints
                       ]
              ]
            )
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTDeclaration,AltPatternBinding,"")
                  , location   = "right hand side"
                  , errorrange = getRHSRange _righthandside_self
                  , sources    = [ SD_Expr (_righthandside_oneLineTree "") ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_size) =
            _pattern_size + _righthandside_size
        (_oneLineTree) =
            Node
                [ Node [_pattern_oneLineTree]
                , Node [_righthandside_oneLineTree "="]
                ]
        (_patternDefinesNoVarsErrors) =
            if size _pattern_environment == 0
              then [ PatternDefinesNoVars (getPatRange _pattern_self) ]
              else []
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_pattern_oneLineTree,_pattern_self,_pattern_size,_pattern_warnings) =
            (_pattern (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _righthandside_assumptions,_righthandside_beta,_righthandside_betaUnique,_righthandside_collectednotypedef,_righthandside_constraints,_righthandside_kindErrors,_righthandside_miscerrors,_righthandside_oneLineTree,_righthandside_self,_righthandside_size,_righthandside_typeAnnotations,_righthandside_warnings) =
            (_righthandside (_pattern_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_pattern_miscerrors) (findMono (head (elts _pattern_environment)) _lhs_monoTable ++ _lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_pattern_warnings))
    in  (_righthandside_betaUnique,_mybdggrp : _lhs_bindingGroups,_lhs_collectEnvironment,_righthandside_collectednotypedef,_lhs_derivedFunctions,_lhs_fixOps,_righthandside_kindErrors,_patternDefinesNoVarsErrors ++ _righthandside_miscerrors,_oneLineTree,Nothing,_self,_size,_lhs_suspiciousFBs,_righthandside_typeAnnotations,_lhs_typeSignatures,_righthandside_warnings)
sem_Declaration_Type :: (T_Range) ->
                        (T_SimpleType) ->
                        (T_Type) ->
                        (T_Declaration)
sem_Declaration_Type (_range) (_simpletype) (_type) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_Type _range_self _simpletype_self _type_self
        (_size) =
            0
        (_oneLineTree) =
            intErr "Declaration" "type"
        (_typeSynonymInfo) =
            (length _simpletype_typevariables,\tps -> makeTpFromType (zip _simpletype_typevariables tps) _type_self)
        (_unused) =
            filter (`notElem` _type_typevariables)       _simpletype_typevariables
        (_doubles) =
            filter ((>1) . length) . group . sort $      _simpletype_typevariables
        (_undef) =
            filter (`notElem` _simpletype_typevariables) _type_typevariables
        ( _range_self) =
            (_range )
        ( _simpletype_name,_simpletype_self,_simpletype_typevariables) =
            (_simpletype )
        ( _type_self,_type_typevariables) =
            (_type (_lhs_tyconEnv))
    in  (_lhs_betaUnique
        ,_lhs_bindingGroups
        ,addTypeSynonym     _simpletype_name _typeSynonymInfo _lhs_collectEnvironment
        ,_lhs_collectednotypedef
        ,add
             (nameOfShowFunction _simpletype_name)
             (typeOfShowFunction _simpletype_name _simpletype_typevariables)
             _lhs_derivedFunctions
        ,_lhs_fixOps
        ,checkType _lhs_tyconEnv _lhs_namesInScope _type_self ++ _lhs_kindErrors
        ,concat [ makeDuplicated TypeVariable _doubles
                , makeUndefined TypeVariable _undef _simpletype_typevariables
                , _lhs_miscerrors
                ]
        ,_oneLineTree
        ,Nothing
        ,_self
        ,_size
        ,_lhs_suspiciousFBs
        ,_lhs_typeAnnotations
        ,_lhs_typeSignatures
        ,makeUnused TypeVariable _unused False ++ _lhs_warnings
        )
sem_Declaration_TypeSignature :: (T_Range) ->
                                 (T_Names) ->
                                 (T_Type) ->
                                 (T_Declaration)
sem_Declaration_TypeSignature (_range) (_names) (_type) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            Declaration_TypeSignature _range_self _names_self _type_self
        (_typeScheme) =
            makeTpSchemeFromType _type_self
        (_size) =
            0
        (_oneLineTree) =
            intErr "Declaration" "type signature"
        ( _range_self) =
            (_range )
        ( _names_isIdentifier,_names_isOperator,_names_isSpecial,_names_oneLineTree,_names_self) =
            (_names )
        ( _type_self,_type_typevariables) =
            (_type (_lhs_tyconEnv))
    in  (_lhs_betaUnique,_lhs_bindingGroups,_lhs_collectEnvironment,_lhs_collectednotypedef,_lhs_derivedFunctions,_lhs_fixOps,checkType _lhs_tyconEnv _lhs_namesInScope _type_self ++ _lhs_kindErrors,_lhs_miscerrors,_oneLineTree,Nothing,_self,_size,_lhs_suspiciousFBs,_lhs_typeAnnotations,foldr (uncurry add) _lhs_typeSignatures [ (n,_typeScheme) | n <- _names_self ],_lhs_warnings)
-- Declarations ------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monoTable            : MonoTable
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      bindingGroups        : BindingGroups
      collectEnvironment   : ImportEnvironment
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      derivedFunctions     : TypeEnvironment
      fixOps               : Names
      kindErrors           : [Error]
      miscerrors           : [Error]
      previousWasAlsoFB    : Maybe Name
      suspiciousFBs        : [(Name,Name)]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      typeSignatures       : TypeEnvironment
      warnings             : [Warning]

   synthesised attributes:
      oneLineTree          :  [ Tree] 
      self                 : Declarations
      size                 : Int

-}
{-
   local variables for Declarations.Cons:
      self

-}
{-
   local variables for Declarations.Nil:
      self

-}
-- semantic domain
type T_Declarations = (Int) ->
                      (BindingGroups) ->
                      (ImportEnvironment) ->
                      ([(Name,Tps,Tp,Bool)]) ->
                      (ConstructorEnvironment) ->
                      (TypeEnvironment) ->
                      (Names) ->
                      ([Error]) ->
                      ([Error]) ->
                      (MonoTable) ->
                      (Tps) ->
                      (Names) ->
                      (Maybe Name) ->
                      ([(Name,Name)]) ->
                      (TypeConstructorEnvironment) ->
                      ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                      (TypeEnvironment) ->
                      ([Warning]) ->
                      ((Int),(BindingGroups),(ImportEnvironment),([(Name,Tps,Tp,Bool)]),(TypeEnvironment),(Names),([Error]),([Error]),( [ Tree] ),(Maybe Name),(Declarations),(Int),([(Name,Name)]),([((Tps,Tp),TpScheme,(Tree,Range))]),(TypeEnvironment),([Warning]))
-- cata
sem_Declarations :: (Declarations) ->
                    (T_Declarations)
sem_Declarations (list) =
    (foldr (sem_Declarations_Cons) (sem_Declarations_Nil) ((map sem_Declaration list)))
sem_Declarations_Cons :: (T_Declaration) ->
                         (T_Declarations) ->
                         (T_Declarations)
sem_Declarations_Cons (_hd) (_tl) (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_betaUnique,_hd_bindingGroups,_hd_collectEnvironment,_hd_collectednotypedef,_hd_derivedFunctions,_hd_fixOps,_hd_kindErrors,_hd_miscerrors,_hd_oneLineTree,_hd_previousWasAlsoFB,_hd_self,_hd_size,_hd_suspiciousFBs,_hd_typeAnnotations,_hd_typeSignatures,_hd_warnings) =
            (_hd (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings))
        ( _tl_betaUnique,_tl_bindingGroups,_tl_collectEnvironment,_tl_collectednotypedef,_tl_derivedFunctions,_tl_fixOps,_tl_kindErrors,_tl_miscerrors,_tl_oneLineTree,_tl_previousWasAlsoFB,_tl_self,_tl_size,_tl_suspiciousFBs,_tl_typeAnnotations,_tl_typeSignatures,_tl_warnings) =
            (_tl (_hd_betaUnique) (_hd_bindingGroups) (_hd_collectEnvironment) (_hd_collectednotypedef) (_lhs_constructorenv) (_hd_derivedFunctions) (_hd_fixOps) (_hd_kindErrors) (_hd_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_hd_previousWasAlsoFB) (_hd_suspiciousFBs) (_lhs_tyconEnv) (_hd_typeAnnotations) (_hd_typeSignatures) (_hd_warnings))
    in  (_tl_betaUnique,_tl_bindingGroups,_tl_collectEnvironment,_tl_collectednotypedef,_tl_derivedFunctions,_tl_fixOps,_tl_kindErrors,_tl_miscerrors,_hd_oneLineTree  :  _tl_oneLineTree,_tl_previousWasAlsoFB,_self,_hd_size  +  _tl_size,_tl_suspiciousFBs,_tl_typeAnnotations,_tl_typeSignatures,_tl_warnings)
sem_Declarations_Nil :: (T_Declarations)
sem_Declarations_Nil (_lhs_betaUnique) (_lhs_bindingGroups) (_lhs_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_derivedFunctions) (_lhs_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monoTable) (_lhs_monos) (_lhs_namesInScope) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_typeSignatures) (_lhs_warnings) =
    let (_self) =
            []
    in  (_lhs_betaUnique,_lhs_bindingGroups,_lhs_collectEnvironment,_lhs_collectednotypedef,_lhs_derivedFunctions,_lhs_fixOps,_lhs_kindErrors,_lhs_miscerrors,[],_lhs_previousWasAlsoFB,_self,0,_lhs_suspiciousFBs,_lhs_typeAnnotations,_lhs_typeSignatures,_lhs_warnings)
-- Export ------------------------------------------------------
{-
   inherited attributes:
      consInScope          : Names
      modulesInScope       : Names
      namesInScope         : Names
      tyconsInScope        : Names

   chained attributes:

   synthesised attributes:
      exportErrors         : [Error]
      self                 : Export

-}
{-
   local variables for Export.Module:
      self

-}
{-
   local variables for Export.TypeOrClass:
      self

-}
{-
   local variables for Export.TypeOrClassComplete:
      self

-}
{-
   local variables for Export.Variable:
      self

-}
-- semantic domain
type T_Export = (Names) ->
                (Names) ->
                (Names) ->
                (Names) ->
                (([Error]),(Export))
-- cata
sem_Export :: (Export) ->
              (T_Export)
sem_Export ((Export_Module (_range) (_name))) =
    (sem_Export_Module ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export ((Export_TypeOrClass (_range) (_name) (_names))) =
    (sem_Export_TypeOrClass ((sem_Range (_range))) ((sem_Name (_name))) ((sem_MaybeNames (_names))))
sem_Export ((Export_TypeOrClassComplete (_range) (_name))) =
    (sem_Export_TypeOrClassComplete ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export ((Export_Variable (_range) (_name))) =
    (sem_Export_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export_Module :: (T_Range) ->
                     (T_Name) ->
                     (T_Export)
sem_Export_Module (_range) (_name) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope) =
    let (_self) =
            Export_Module _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (checkExport ExportModule _name_self
            _lhs_modulesInScope
        ,_self
        )
sem_Export_TypeOrClass :: (T_Range) ->
                          (T_Name) ->
                          (T_MaybeNames) ->
                          (T_Export)
sem_Export_TypeOrClass (_range) (_name) (_names) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope) =
    let (_self) =
            Export_TypeOrClass _range_self _name_self _names_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _names_self) =
            (_names )
    in  ([],_self)
sem_Export_TypeOrClassComplete :: (T_Range) ->
                                  (T_Name) ->
                                  (T_Export)
sem_Export_TypeOrClassComplete (_range) (_name) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope) =
    let (_self) =
            Export_TypeOrClassComplete _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  ([],_self)
sem_Export_Variable :: (T_Range) ->
                       (T_Name) ->
                       (T_Export)
sem_Export_Variable (_range) (_name) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope) =
    let (_self) =
            Export_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (checkExport ExportVariable _name_self
            _lhs_namesInScope
        ,_self
        )
-- Exports -----------------------------------------------------
{-
   inherited attributes:
      consInScope          : Names
      modulesInScope       : Names
      namesInScope         : Names
      tyconsInScope        : Names

   chained attributes:

   synthesised attributes:
      exportErrors         : [Error]
      self                 : Exports

-}
{-
   local variables for Exports.Cons:
      self

-}
{-
   local variables for Exports.Nil:
      self

-}
-- semantic domain
type T_Exports = (Names) ->
                 (Names) ->
                 (Names) ->
                 (Names) ->
                 (([Error]),(Exports))
-- cata
sem_Exports :: (Exports) ->
               (T_Exports)
sem_Exports (list) =
    (foldr (sem_Exports_Cons) (sem_Exports_Nil) ((map sem_Export list)))
sem_Exports_Cons :: (T_Export) ->
                    (T_Exports) ->
                    (T_Exports)
sem_Exports_Cons (_hd) (_tl) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_exportErrors,_hd_self) =
            (_hd (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope))
        ( _tl_exportErrors,_tl_self) =
            (_tl (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope))
    in  (_hd_exportErrors  ++  _tl_exportErrors,_self)
sem_Exports_Nil :: (T_Exports)
sem_Exports_Nil (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope) =
    let (_self) =
            []
    in  ([],_self)
-- Expression --------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      beta                 : Tp
      constraints          : ConstraintSet
      oneLineTree          : Tree
      self                 : Expression
      size                 : Int

-}
{-
   local variables for Expression.Case:
      oneLineTree
      size
      cinfo
      newcon
      beta'
      beta
      self

-}
{-
   local variables for Expression.Comprehension:
      oneLineTree
      size
      cinfo
      newcon
      beta
      self

-}
{-
   local variables for Expression.Constructor:
      undefinedConstructorErrors
      oneLineTree
      size
      cinfo
      newcon
      maybetp
      beta
      self

-}
{-
   local variables for Expression.Do:
      lastStatementErrors
      oneLineTree
      size
      cinfo
      newcon
      beta
      self

-}
{-
   local variables for Expression.Enum:
      oneLineTree
      size
      cinfoResult
      cinfoTo
      cinfoThen
      cinfoFrom
      conTo
      conThen
      conFrom
      beta
      self

-}
{-
   local variables for Expression.If:
      oneLineTree
      size
      cinfoElse
      cinfoThen
      cinfoGuard
      conElse
      conThen
      conGuard
      beta
      self

-}
{-
   local variables for Expression.InfixApplication:
      oneLineTree
      size
      cinfoOperator
      cinfoEmpty
      cinfoComplete
      conResult
      conOperator
      betaResOp
      beta
      self

-}
{-
   local variables for Expression.Lambda:
      shadowing
      namesInScope
      oneLineTree
      size
      cinfoType
      cinfoBind
      newcon
      unused
      duplicated
      assumptions'
      csetBinds
      beta
      self

-}
{-
   local variables for Expression.Let:
      suspiciousErrors
      shadowing
      namesInScope
      assumptions
      environment
      collectDataTypes
      fixOps
      derivedFunctions
      typeSynonyms
      collectConstructorEnv
      collectEnvironment
      oneLineTree
      size
      cinfoType
      anns
      tiNoTypeDefinition
      tiWarnings
      tiErrors
      monoTable
      cset
      aset
      env
      mybdggroup
      beta
      self

-}
{-
   local variables for Expression.List:
      oneLineTree
      size
      cinfoElem
      cinfoResult
      zipf
      newcon
      beta'
      beta
      self

-}
{-
   local variables for Expression.Literal:
      oneLineTree
      size
      cinfo
      beta
      self

-}
{-
   local variables for Expression.Negate:
      oneLineTree
      size
      cinfoExpr
      cinfoResult
      conExpr
      conResult
      beta
      self

-}
{-
   local variables for Expression.NegateFloat:
      oneLineTree
      size
      cinfoExpr
      cinfoResult
      conExpr
      conResult
      beta
      self

-}
{-
   local variables for Expression.NormalApplication:
      oneLineTree
      size
      cinfo
      newcon
      beta
      self

-}
{-
   local variables for Expression.Parenthesized:
      oneLineTree
      self

-}
{-
   local variables for Expression.RecordConstruction:
      beta
      constraints
      assumptions
      oneLineTree
      size
      self

-}
{-
   local variables for Expression.RecordUpdate:
      oneLineTree
      size
      self

-}
{-
   local variables for Expression.Tuple:
      oneLineTree
      size
      cinfo
      newcon
      beta
      self

-}
{-
   local variables for Expression.Typed:
      oneLineTree
      size
      cinfoResult
      cinfoExpr
      conExpr
      conResult
      typeScheme
      beta
      self

-}
{-
   local variables for Expression.Variable:
      undefinedErrors
      oneLineTree
      size
      beta
      self

-}
-- semantic domain
type T_Expression = (Int) ->
                    ([(Name,Tps,Tp,Bool)]) ->
                    (ConstructorEnvironment) ->
                    ([Error]) ->
                    ([Error]) ->
                    (Tps) ->
                    (Names) ->
                    (TypeConstructorEnvironment) ->
                    ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                    ([Warning]) ->
                    ((Assumptions),(Tp),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),(Tree),(Expression),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_Expression :: (Expression) ->
                  (T_Expression)
sem_Expression ((Expression_Case (_range) (_expression) (_alternatives))) =
    (sem_Expression_Case ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Alternatives (_alternatives))))
sem_Expression ((Expression_Comprehension (_range) (_expression) (_qualifiers))) =
    (sem_Expression_Comprehension ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Qualifiers (_qualifiers))))
sem_Expression ((Expression_Constructor (_range) (_name))) =
    (sem_Expression_Constructor ((sem_Range (_range))) ((sem_Name (_name))))
sem_Expression ((Expression_Do (_range) (_statements))) =
    (sem_Expression_Do ((sem_Range (_range))) ((sem_Statements (_statements))))
sem_Expression ((Expression_Enum (_range) (_from) (_then) (_to))) =
    (sem_Expression_Enum ((sem_Range (_range))) ((sem_Expression (_from))) ((sem_MaybeExpression (_then))) ((sem_MaybeExpression (_to))))
sem_Expression ((Expression_If (_range) (_guardExpression) (_thenExpression) (_elseExpression))) =
    (sem_Expression_If ((sem_Range (_range))) ((sem_Expression (_guardExpression))) ((sem_Expression (_thenExpression))) ((sem_Expression (_elseExpression))))
sem_Expression ((Expression_InfixApplication (_range) (_leftExpression) (_operator) (_rightExpression))) =
    (sem_Expression_InfixApplication ((sem_Range (_range))) ((sem_MaybeExpression (_leftExpression))) ((sem_Expression (_operator))) ((sem_MaybeExpression (_rightExpression))))
sem_Expression ((Expression_Lambda (_range) (_patterns) (_expression))) =
    (sem_Expression_Lambda ((sem_Range (_range))) ((sem_Patterns (_patterns))) ((sem_Expression (_expression))))
sem_Expression ((Expression_Let (_range) (_declarations) (_expression))) =
    (sem_Expression_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))) ((sem_Expression (_expression))))
sem_Expression ((Expression_List (_range) (_expressions))) =
    (sem_Expression_List ((sem_Range (_range))) ((sem_Expressions (_expressions))))
sem_Expression ((Expression_Literal (_range) (_literal))) =
    (sem_Expression_Literal ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Expression ((Expression_Negate (_range) (_expression))) =
    (sem_Expression_Negate ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_NegateFloat (_range) (_expression))) =
    (sem_Expression_NegateFloat ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_NormalApplication (_range) (_function) (_arguments))) =
    (sem_Expression_NormalApplication ((sem_Range (_range))) ((sem_Expression (_function))) ((sem_Expressions (_arguments))))
sem_Expression ((Expression_Parenthesized (_range) (_expression))) =
    (sem_Expression_Parenthesized ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_RecordConstruction (_range) (_name) (_recordExpressionBindings))) =
    (sem_Expression_RecordConstruction ((sem_Range (_range))) ((sem_Name (_name))) ((sem_RecordExpressionBindings (_recordExpressionBindings))))
sem_Expression ((Expression_RecordUpdate (_range) (_expression) (_recordExpressionBindings))) =
    (sem_Expression_RecordUpdate ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_RecordExpressionBindings (_recordExpressionBindings))))
sem_Expression ((Expression_Tuple (_range) (_expressions))) =
    (sem_Expression_Tuple ((sem_Range (_range))) ((sem_Expressions (_expressions))))
sem_Expression ((Expression_Typed (_range) (_expression) (_type))) =
    (sem_Expression_Typed ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Type (_type))))
sem_Expression ((Expression_Variable (_range) (_name))) =
    (sem_Expression_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Expression_Case :: (T_Range) ->
                       (T_Expression) ->
                       (T_Alternatives) ->
                       (T_Expression)
sem_Expression_Case (_range) (_expression) (_alternatives) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Case _range_self _expression_self _alternatives_self
        (_beta) =
            TVar _lhs_betaUnique
        (_beta') =
            TVar (_lhs_betaUnique + 1)
        (_newcon) =
            [ (_expression_beta .==. _beta') _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTExpression,AltCase,"")
                  , location   = "scrutinee of case expression"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _expression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_size) =
            1 + _expression_size + _alternatives_size
        (_oneLineTree) =
            Node
                [ Text "case "
                , Node [_expression_oneLineTree]
                , Text " of "
                , encloseSep "{" ";" "}" _alternatives_oneLineTree
                ]
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique + 2) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _alternatives_assumptions,_alternatives_betaUnique,_alternatives_collectednotypedef,_alternatives_constraintslist,_alternatives_kindErrors,_alternatives_miscerrors,_alternatives_oneLineTree,_alternatives_self,_alternatives_size,_alternatives_typeAnnotations,_alternatives_warnings) =
            (_alternatives (_beta') (_beta) (_expression_betaUnique) (_expression_collectednotypedef) (_lhs_constructorenv) (_expression_kindErrors) (_expression_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_expression_typeAnnotations) (_expression_warnings))
    in  (_expression_assumptions `combine` _alternatives_assumptions
        ,_beta
        ,_alternatives_betaUnique
        ,_alternatives_collectednotypedef
        ,ctNode [ _newcon .<. _expression_constraints
                , ctNode _alternatives_constraintslist
                ]
        ,_alternatives_kindErrors
        ,_alternatives_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_alternatives_typeAnnotations
        ,_alternatives_warnings
        )
sem_Expression_Comprehension :: (T_Range) ->
                                (T_Expression) ->
                                (T_Qualifiers) ->
                                (T_Expression)
sem_Expression_Comprehension (_range) (_expression) (_qualifiers) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Comprehension _range_self _expression_self _qualifiers_self
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (listType _expression_beta .==. _beta) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTExpression,AltComprehension,"")
                  , location   = "list comprehension"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _size ]
                  }
        (_size) =
            1 + _expression_size + _qualifiers_size
        (_oneLineTree) =
            Node
                [ Text "["
                , Node [_expression_oneLineTree]
                , Text " | "
                , Node [ punctuate "," _qualifiers_oneLineTree ]
                , Text "]"
                ]
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_qualifiers_monos) (_qualifiers_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _qualifiers_assumptions,_qualifiers_betaUnique,_qualifiers_collectednotypedef,_qualifiers_constraints,_qualifiers_kindErrors,_qualifiers_miscerrors,_qualifiers_monos,_qualifiers_namesInScope,_qualifiers_oneLineTree,_qualifiers_self,_qualifiers_size,_qualifiers_typeAnnotations,_qualifiers_warnings) =
            (_qualifiers (_expression_assumptions) (_expression_betaUnique) (_expression_collectednotypedef) (_expression_constraints) (_lhs_constructorenv) (_expression_kindErrors) (_expression_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_expression_typeAnnotations) (_expression_warnings))
    in  (_qualifiers_assumptions,_beta,_qualifiers_betaUnique,_qualifiers_collectednotypedef,_newcon .>. ctNode [ _qualifiers_constraints ],_qualifiers_kindErrors,_qualifiers_miscerrors,_oneLineTree,_self,_size,_qualifiers_typeAnnotations,_qualifiers_warnings)
sem_Expression_Constructor :: (T_Range) ->
                              (T_Name) ->
                              (T_Expression)
sem_Expression_Constructor (_range) (_name) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Constructor _range_self _name_self
        (_beta) =
            TVar _lhs_betaUnique
        (_maybetp) =
            lookupAL _name_self _lhs_constructorenv
        (_newcon) =
            case _maybetp of
               Nothing  -> []
               Just ctp -> [ (_beta .::. ctp) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTExpression,AltConstructor,"")
                  , location   = "constructor"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _name_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , HighlyTrusted
                                 , IsImported _name_self
                                 , Size _size ]
                  }
        (_size) =
            1
        (_oneLineTree) =
            Node [_name_oneLineTree]
        (_undefinedConstructorErrors) =
            case _maybetp of
               Nothing -> [ undefinedConstructor _name_self _lhs_namesInScope (keys _lhs_tyconEnv) ]
               Just _  -> []
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (empty,_beta,_lhs_betaUnique + 1,_lhs_collectednotypedef,ctSingle _newcon,_lhs_kindErrors,_undefinedConstructorErrors ++ _lhs_miscerrors,_oneLineTree,_self,_size,_lhs_typeAnnotations,_lhs_warnings)
sem_Expression_Do :: (T_Range) ->
                     (T_Statements) ->
                     (T_Expression)
sem_Expression_Do (_range) (_statements) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Do _range_self _statements_self
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            case _statements_generatorBeta of
               Nothing -> []
               Just b  -> [ (b .==. _beta) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTExpression,AltDo,"")
                  , location   = "do-expression (INTERNAL ERROR)"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , SuperHighlyTrusted
                                 , Size _size ]
                  }
        (_size) =
            1 + _statements_size
        (_oneLineTree) =
            Node
                [ Text "do "
                , Node (sepBy (Text "; ") _statements_oneLineTree)
                ]
        (_lastStatementErrors) =
            case _statements_generatorBeta of
               Nothing | not (null _statements_self) ->
                  let range = getStatementRange (last _statements_self)
                  in [ LastStatementNotExpr range ]
               _ -> []
        ( _range_self) =
            (_range )
        ( _statements_assumptions,_statements_betaUnique,_statements_collectednotypedef,_statements_constraints,_statements_generatorBeta,_statements_kindErrors,_statements_miscerrors,_statements_oneLineTree,_statements_self,_statements_size,_statements_typeAnnotations,_statements_warnings) =
            (_statements (empty) (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (ctEmpty) (_lhs_constructorenv) (Nothing) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_statements_assumptions,_beta,_statements_betaUnique,_statements_collectednotypedef,ctNode [ _newcon .<. _statements_constraints ],_statements_kindErrors,_lastStatementErrors ++ _statements_miscerrors,_oneLineTree,_self,_size,_statements_typeAnnotations,_statements_warnings)
sem_Expression_Enum :: (T_Range) ->
                       (T_Expression) ->
                       (T_MaybeExpression) ->
                       (T_MaybeExpression) ->
                       (T_Expression)
sem_Expression_Enum (_range) (_from) (_then) (_to) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Enum _range_self _from_self _then_self _to_self
        (_beta) =
            TVar _lhs_betaUnique
        (_conFrom) =
            [ (_from_beta .==. intType) _cinfoFrom ]
        (_conThen) =
            [ (_then_beta .==. intType) _cinfoThen ]
        (_conTo) =
            [ (_to_beta   .==. intType) _cinfoTo   ]
        (_cinfoFrom) =
            \tppair ->
            CInfo { info       = (NTExpression,AltEnum,"from")
                  , location   = "enumeration"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _from_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size]
                  }
        (_cinfoThen) =
            \tppair ->
            CInfo { info       = (NTExpression,AltEnum,"then")
                  , location   = "enumeration"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term (convertMaybeOneLineTree _then_oneLineTree) ]
                  , typepair   = tppair
                  , properties = [ Size _size]
                  }
        (_cinfoTo) =
            \tppair ->
            CInfo { info       = (NTExpression,AltEnum,"to")
                  , location   = "enumeration"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term (convertMaybeOneLineTree _to_oneLineTree) ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTExpression,AltEnum,"result")
                  , location   = "enumeration"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _size ]
                  }
        (_size) =
            1 + _from_size + _then_size + _to_size
        (_oneLineTree) =
            Node (
                [ Text "[ "
                , Node [_from_oneLineTree]
                ]
                ++
                maybe [] (\x -> [Text ", ", x]) _then_oneLineTree
                ++
                [ Text " .. " ]
                ++
                maybe [] (\x -> [Node [x]]) _to_oneLineTree
                ++
                [ Text " ]" ]
            )
        ( _range_self) =
            (_range )
        ( _from_assumptions,_from_beta,_from_betaUnique,_from_collectednotypedef,_from_constraints,_from_kindErrors,_from_miscerrors,_from_oneLineTree,_from_self,_from_size,_from_typeAnnotations,_from_warnings) =
            (_from (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _then_assumptions,_then_beta,_then_betaUnique,_then_collectednotypedef,_then_constraints,_then_kindErrors,_then_miscerrors,_then_oneLineTree,_then_section,_then_self,_then_size,_then_typeAnnotations,_then_warnings) =
            (_then (_from_betaUnique) (_from_collectednotypedef) (_lhs_constructorenv) (_from_kindErrors) (_from_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_from_typeAnnotations) (_from_warnings))
        ( _to_assumptions,_to_beta,_to_betaUnique,_to_collectednotypedef,_to_constraints,_to_kindErrors,_to_miscerrors,_to_oneLineTree,_to_section,_to_self,_to_size,_to_typeAnnotations,_to_warnings) =
            (_to (_then_betaUnique) (_then_collectednotypedef) (_lhs_constructorenv) (_then_kindErrors) (_then_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_then_typeAnnotations) (_then_warnings))
    in  (_from_assumptions `combine` _then_assumptions `combine` _to_assumptions
        ,_beta
        ,_to_betaUnique
        ,_to_collectednotypedef
        ,[ (listType intType .==. _beta) _cinfoResult ] .>.
         ctNode [ _conFrom .<. _from_constraints
                , _conThen .<. _then_constraints
                , _conTo   .<. _to_constraints
                ]
        ,_to_kindErrors
        ,_to_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_to_typeAnnotations
        ,_to_warnings
        )
sem_Expression_If :: (T_Range) ->
                     (T_Expression) ->
                     (T_Expression) ->
                     (T_Expression) ->
                     (T_Expression)
sem_Expression_If (_range) (_guardExpression) (_thenExpression) (_elseExpression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_If _range_self _guardExpression_self _thenExpression_self _elseExpression_self
        (_beta) =
            TVar _lhs_betaUnique
        (_conGuard) =
            [ (_guardExpression_beta .==. boolType) _cinfoGuard ]
        (_conThen) =
            [ (_thenExpression_beta  .==. _beta   ) _cinfoThen  ]
        (_conElse) =
            [ (_elseExpression_beta  .==. _beta   ) _cinfoElse  ]
        (_cinfoGuard) =
            \tppair ->
            CInfo { info       = (NTExpression,AltIf,"guard")
                  , location   = "conditional"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _guardExpression_oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_cinfoThen) =
            \tppair ->
            CInfo { info       = (NTExpression,AltIf,"then")
                  , location   = "then branch of conditional"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _thenExpression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_cinfoElse) =
            \tppair ->
            CInfo { info       = (NTExpression,AltIf,"else")
                  , location   = "else branch of conditional"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _elseExpression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_size) =
            1 + _guardExpression_size + _thenExpression_size + _elseExpression_size
        (_oneLineTree) =
            Node
                [ Text "if "
                , Node [_guardExpression_oneLineTree]
                , Text " then "
                , Node [_thenExpression_oneLineTree]
                , Text " else "
                , Node [_elseExpression_oneLineTree]
                ]
        ( _range_self) =
            (_range )
        ( _guardExpression_assumptions,_guardExpression_beta,_guardExpression_betaUnique,_guardExpression_collectednotypedef,_guardExpression_constraints,_guardExpression_kindErrors,_guardExpression_miscerrors,_guardExpression_oneLineTree,_guardExpression_self,_guardExpression_size,_guardExpression_typeAnnotations,_guardExpression_warnings) =
            (_guardExpression (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _thenExpression_assumptions,_thenExpression_beta,_thenExpression_betaUnique,_thenExpression_collectednotypedef,_thenExpression_constraints,_thenExpression_kindErrors,_thenExpression_miscerrors,_thenExpression_oneLineTree,_thenExpression_self,_thenExpression_size,_thenExpression_typeAnnotations,_thenExpression_warnings) =
            (_thenExpression (_guardExpression_betaUnique) (_guardExpression_collectednotypedef) (_lhs_constructorenv) (_guardExpression_kindErrors) (_guardExpression_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_guardExpression_typeAnnotations) (_guardExpression_warnings))
        ( _elseExpression_assumptions,_elseExpression_beta,_elseExpression_betaUnique,_elseExpression_collectednotypedef,_elseExpression_constraints,_elseExpression_kindErrors,_elseExpression_miscerrors,_elseExpression_oneLineTree,_elseExpression_self,_elseExpression_size,_elseExpression_typeAnnotations,_elseExpression_warnings) =
            (_elseExpression (_thenExpression_betaUnique) (_thenExpression_collectednotypedef) (_lhs_constructorenv) (_thenExpression_kindErrors) (_thenExpression_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_thenExpression_typeAnnotations) (_thenExpression_warnings))
    in  (_guardExpression_assumptions `combine` _thenExpression_assumptions `combine` _elseExpression_assumptions
        ,_beta
        ,_elseExpression_betaUnique
        ,_elseExpression_collectednotypedef
        ,ctNode [ _conGuard .<. _guardExpression_constraints
                , _conThen  .<. _thenExpression_constraints
                , _conElse  .<. _elseExpression_constraints
                ]
        ,_elseExpression_kindErrors
        ,_elseExpression_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_elseExpression_typeAnnotations
        ,_elseExpression_warnings
        )
sem_Expression_InfixApplication :: (T_Range) ->
                                   (T_MaybeExpression) ->
                                   (T_Expression) ->
                                   (T_MaybeExpression) ->
                                   (T_Expression)
sem_Expression_InfixApplication (_range) (_leftExpression) (_operator) (_rightExpression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_InfixApplication _range_self _leftExpression_self _operator_self _rightExpression_self
        (_beta) =
            TVar _lhs_betaUnique
        (_betaResOp) =
            TVar (_lhs_betaUnique + 1)
        (_conOperator) =
            [ (_operator_beta .==. _leftExpression_beta .->. _rightExpression_beta .->. _betaResOp) _cinfoOperator ]
        (_conResult) =
            case (_leftExpression_section,_rightExpression_section) of
                   (False,False) -> [ (_betaResOp     .==. _beta) _cinfoComplete  ]
                   (True ,True ) -> [ (_operator_beta .==. _beta) _cinfoEmpty ]
                   _             -> internalError "TypeInferencing.ag" "n/a" "sections are not supported by the type-checker"
        (_cinfoComplete) =
            \tppair ->
            CInfo { info       = (NTExpression,AltInfixApplication,"")
                  , location   = "infix application (INTERNAL ERROR)"
                  , errorrange = _range_self
                  , sources    = [ ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , SuperHighlyTrusted
                                 , Size _size ]
                  }
        (_cinfoEmpty) =
            \tppair ->
            CInfo { info       = (NTExpression,AltInfixApplication,"")
                  , location   = "infix application"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , HighlyTrusted
                                 , Size _size ]
                  }
        (_cinfoOperator) =
            \tppair ->
            CInfo { info       = (NTExpression,AltInfixApplication,"operator")
                  , location   = "infix application"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term (_operator_oneLineTree)]
                  , typepair   = tppair
                  , properties = (if _leftExpression_section || _rightExpression_section then [HighlyTrusted] else [])
                                 ++
                                 [ ApplicationEdge True
                                                   [ (convertMaybeOneLineTree _leftExpression_oneLineTree ,_leftExpression_beta )
                                                   , (convertMaybeOneLineTree _rightExpression_oneLineTree,_rightExpression_beta)
                                                   ]
                                 , Size _size ]
                  }
        (_size) =
            1 + _leftExpression_size + _rightExpression_size
        (_oneLineTree) =
            case (_leftExpression_oneLineTree, _rightExpression_oneLineTree) of
                (Nothing, Nothing) -> parens _operator_oneLineTree
                (Just l , Nothing) -> encloseSep "(" " " ")" [l, _operator_oneLineTree]
                (Nothing, Just r ) -> encloseSep "(" " " ")" [_operator_oneLineTree, r]
                (Just l , Just r ) ->
                    case _operator_oneLineTree of
                        Node [Text (first:_)] -> if isAlpha first || first == '_' then
                            Node [ l, Text " `", _operator_oneLineTree, Text "` ", r ]
                               else
                            Node [ l, _operator_oneLineTree, r ]
                        _ ->
                            Node [ l, _operator_oneLineTree, r ]
        ( _range_self) =
            (_range )
        ( _leftExpression_assumptions,_leftExpression_beta,_leftExpression_betaUnique,_leftExpression_collectednotypedef,_leftExpression_constraints,_leftExpression_kindErrors,_leftExpression_miscerrors,_leftExpression_oneLineTree,_leftExpression_section,_leftExpression_self,_leftExpression_size,_leftExpression_typeAnnotations,_leftExpression_warnings) =
            (_leftExpression (_lhs_betaUnique + 2) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _operator_assumptions,_operator_beta,_operator_betaUnique,_operator_collectednotypedef,_operator_constraints,_operator_kindErrors,_operator_miscerrors,_operator_oneLineTree,_operator_self,_operator_size,_operator_typeAnnotations,_operator_warnings) =
            (_operator (_leftExpression_betaUnique) (_leftExpression_collectednotypedef) (_lhs_constructorenv) (_leftExpression_kindErrors) (_leftExpression_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_leftExpression_typeAnnotations) (_leftExpression_warnings))
        ( _rightExpression_assumptions,_rightExpression_beta,_rightExpression_betaUnique,_rightExpression_collectednotypedef,_rightExpression_constraints,_rightExpression_kindErrors,_rightExpression_miscerrors,_rightExpression_oneLineTree,_rightExpression_section,_rightExpression_self,_rightExpression_size,_rightExpression_typeAnnotations,_rightExpression_warnings) =
            (_rightExpression (_operator_betaUnique) (_operator_collectednotypedef) (_lhs_constructorenv) (_operator_kindErrors) (_operator_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_operator_typeAnnotations) (_operator_warnings))
    in  (_leftExpression_assumptions `combine` _operator_assumptions `combine` _rightExpression_assumptions
        ,_beta
        ,_rightExpression_betaUnique
        ,_rightExpression_collectednotypedef
        ,_conResult .>. _conOperator .>.
         ctNode [ _operator_constraints
                , _leftExpression_constraints
                , _rightExpression_constraints
                ]
        ,_rightExpression_kindErrors
        ,_rightExpression_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_rightExpression_typeAnnotations
        ,_rightExpression_warnings
        )
sem_Expression_Lambda :: (T_Range) ->
                         (T_Patterns) ->
                         (T_Expression) ->
                         (T_Expression)
sem_Expression_Lambda (_range) (_patterns) (_expression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Lambda _range_self _patterns_self _expression_self
        (_beta) =
            TVar _lhs_betaUnique
        ((_csetBinds,_assumptions',_duplicated,_unused)) =
            (_patterns_environment !===! _expression_assumptions) _cinfoBind
        (_newcon) =
            [ (foldr (.->.) _expression_beta _patterns_betas .==. _beta) _cinfoType ]
        (_cinfoBind) =
            variableBindingCInfo (NTExpression,AltLambda)
        (_cinfoType) =
            \tppair ->
            CInfo { info       = (NTExpression,AltLambda,"type")
                  , location   = "lambda abstraction"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _size ]
                  }
        (_size) =
            1 + _patterns_size + _expression_size
        (_oneLineTree) =
            Node
                (  [ Text "\\", punctuate " " _patterns_oneLineTree, Text " -> "
                   , Node [_expression_oneLineTree]
                   ]
                )
        ((_namesInScope,_shadowing)) =
            addToScope (keys _patterns_environment) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_environment,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_oneLineTree,_patterns_self,_patterns_size,_patterns_warnings) =
            (_patterns (_lhs_betaUnique + 1) (_lhs_constructorenv) (_lhs_miscerrors) (_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_patterns_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_patterns_miscerrors) (elts _patterns_environment ++ _lhs_monos) (_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_patterns_warnings))
    in  (_assumptions'
        ,_beta
        ,_expression_betaUnique
        ,_expression_collectednotypedef
        ,_newcon .>. _csetBinds .>>.
         ctNode [ ctNode _patterns_constraintslist
                , _expression_constraints
                ]
        ,_expression_kindErrors
        ,makeDuplicated Variable _duplicated ++ _expression_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_expression_typeAnnotations
        ,_shadowing ++
         makeUnused Variable _unused False ++
         _expression_warnings
        )
sem_Expression_Let :: (T_Range) ->
                      (T_Declarations) ->
                      (T_Expression) ->
                      (T_Expression)
sem_Expression_Let (_range) (_declarations) (_expression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Let _range_self _declarations_self _expression_self
        (_beta) =
            TVar _lhs_betaUnique
        (_mybdggroup) =
            (empty,_expression_assumptions,[_expression_constraints])
        ((_env,_aset,_cset,_monoTable,_tiErrors,_tiWarnings,_tiNoTypeDefinition,_anns)) =
            performAndCheckBindingGroup False _lhs_monos _declarations_typeSignatures _mybdggroup _declarations_bindingGroups
        (_cinfoType) =
            \tppair ->
            CInfo { info       = (NTExpression,AltLet,"")
                  , location   = "let expression (INTERNAL ERROR)"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _expression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , SuperHighlyTrusted
                                 , Size _size ]
                  }
        (_size) =
            1 + _declarations_size + _expression_size
        (_oneLineTree) =
            Node
                [ Text "let "
                , encloseSep "{" ";" "}" _declarations_oneLineTree
                , Text " in "
                , Node [_expression_oneLineTree]
                ]
        ((_collectEnvironment,_collectConstructorEnv,_typeSynonyms,_derivedFunctions,_fixOps,_collectDataTypes)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Expression"
        ((_environment,_assumptions,_)) =
            concatBindingGroups _declarations_bindingGroups
        ((_namesInScope,_shadowing)) =
            addToScope (keys _environment) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ( _range_self) =
            (_range )
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectEnvironment,_declarations_collectednotypedef,_declarations_derivedFunctions,_declarations_fixOps,_declarations_kindErrors,_declarations_miscerrors,_declarations_oneLineTree,_declarations_previousWasAlsoFB,_declarations_self,_declarations_size,_declarations_suspiciousFBs,_declarations_typeAnnotations,_declarations_typeSignatures,_declarations_warnings) =
            (_declarations (_lhs_betaUnique + 1) ([]) (_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_derivedFunctions) (_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_monoTable) (_lhs_monos) (_namesInScope) (Nothing) ([]) (_lhs_tyconEnv) (_lhs_typeAnnotations) (empty) (_lhs_warnings))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_declarations_betaUnique) (_declarations_collectednotypedef) (_lhs_constructorenv) (_declarations_kindErrors) (_declarations_miscerrors) (_lhs_monos) (_namesInScope) (_lhs_tyconEnv) (_declarations_typeAnnotations) (_declarations_warnings))
    in  (_aset
        ,_beta
        ,_expression_betaUnique
        ,_tiNoTypeDefinition ++ _declarations_collectednotypedef
        ,[ (_expression_beta .==. _beta) _cinfoType ] .>. _cset
        ,_expression_kindErrors
        ,_tiErrors ++ _expression_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_anns ++ _expression_typeAnnotations
        ,_shadowing ++
         _tiWarnings ++
         _expression_warnings ++
         _suspiciousErrors
        )
sem_Expression_List :: (T_Range) ->
                       (T_Expressions) ->
                       (T_Expression)
sem_Expression_List (_range) (_expressions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_List _range_self _expressions_self
        (_beta) =
            TVar _lhs_betaUnique
        (_beta') =
            TVar (_lhs_betaUnique + 1)
        (_newcon) =
            [ (listType _beta' .==. _beta) _cinfoResult ]
        (_zipf) =
            \tp txt ctree -> [ (tp .==. _beta') (_cinfoElem txt) ] .<. ctree
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTExpression,AltList,"result")
                  , location   = "list"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ Size _size
                                 , FolkloreConstraint ]
                  }
        (_cinfoElem) =
            \elemtext tppair ->
            CInfo { info       = (NTExpression,AltList,"element")
                  , location   = "element of list"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term elemtext ]
                  , typepair   = tppair
                  , properties = [ UnifierTypeVariable (tpToInt _beta')
                                 , Size _size ]
                  }
        (_size) =
            1 + _expressions_size
        (_oneLineTree) =
            encloseSep "[" "," "]" _expressions_oneLineTree
        ( _range_self) =
            (_range )
        ( _expressions_assumptions,_expressions_betaUnique,_expressions_betas,_expressions_collectednotypedef,_expressions_constraintslist,_expressions_kindErrors,_expressions_miscerrors,_expressions_oneLineTree,_expressions_self,_expressions_size,_expressions_typeAnnotations,_expressions_warnings) =
            (_expressions (_lhs_betaUnique + 2) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_expressions_assumptions
        ,_beta
        ,_expressions_betaUnique
        ,_expressions_collectednotypedef
        ,_newcon .>.
         ctNode (zipWith3 _zipf _expressions_betas _expressions_oneLineTree _expressions_constraintslist)
        ,_expressions_kindErrors
        ,_expressions_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_expressions_typeAnnotations
        ,_expressions_warnings
        )
sem_Expression_Literal :: (T_Range) ->
                          (T_Literal) ->
                          (T_Expression)
sem_Expression_Literal (_range) (_literal) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Literal _range_self _literal_self
        (_beta) =
            TVar _lhs_betaUnique
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTExpression,AltLiteral,"")
                  , location   = "literal"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , HighlyTrusted
                                 , IsLiteral _literal_self
                                 , Size _size ]
                  }
        (_size) =
            1
        (_oneLineTree) =
            Node [_literal_oneLineTree]
        ( _range_self) =
            (_range )
        ( _literal_literalType,_literal_oneLineTree,_literal_self) =
            (_literal )
    in  (empty,_beta,_lhs_betaUnique + 1,_lhs_collectednotypedef,ctSingle [ (_literal_literalType .==. _beta) _cinfo ],_lhs_kindErrors,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_typeAnnotations,_lhs_warnings)
sem_Expression_Negate :: (T_Range) ->
                         (T_Expression) ->
                         (T_Expression)
sem_Expression_Negate (_range) (_expression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Negate _range_self _expression_self
        (_beta) =
            TVar _lhs_betaUnique
        (_conResult) =
            [ (intType .==. _beta) _cinfoResult ]
        (_conExpr) =
            [ (_expression_beta .==. intType) _cinfoExpr]
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTExpression,AltNegate,"result")
                  , location   = "negation"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _size
                                 , NegationResult ]
                  }
        (_cinfoExpr) =
            \tppair ->
            CInfo { info       = (NTExpression,AltNegate,"expression")
                  , location   = "negation"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _expression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size
                                 , Negation (tpToInt _beta) ]
                  }
        (_size) =
            1 + _expression_size
        (_oneLineTree) =
            Node [ Text "-", Node [_expression_oneLineTree] ]
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_expression_assumptions,_beta,_expression_betaUnique,_expression_collectednotypedef,_conResult .>. ctNode [ _conExpr .<. _expression_constraints ],_expression_kindErrors,_expression_miscerrors,_oneLineTree,_self,_size,_expression_typeAnnotations,_expression_warnings)
sem_Expression_NegateFloat :: (T_Range) ->
                              (T_Expression) ->
                              (T_Expression)
sem_Expression_NegateFloat (_range) (_expression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_NegateFloat _range_self _expression_self
        (_beta) =
            TVar _lhs_betaUnique
        (_conResult) =
            [ (floatType .==. _beta) _cinfoResult ]
        (_conExpr) =
            [ (_expression_beta .==. floatType) _cinfoExpr]
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTExpression,AltNegateFloat,"result")
                  , location   = "negation"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _size
                                 , NegationResult ]
                  }
        (_cinfoExpr) =
            \tppair ->
            CInfo { info       = (NTExpression,AltNegateFloat,"expression")
                  , location   = "negation"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _expression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size
                                 , Negation (tpToInt _beta) ]
                  }
        (_size) =
            1 + _expression_size
        (_oneLineTree) =
            Node [ Text "-.", Node [_expression_oneLineTree] ]
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_expression_assumptions,_beta,_expression_betaUnique,_expression_collectednotypedef,_conResult .>. ctNode [ _conExpr .<. _expression_constraints ],_expression_kindErrors,_expression_miscerrors,_oneLineTree,_self,_size,_expression_typeAnnotations,_expression_warnings)
sem_Expression_NormalApplication :: (T_Range) ->
                                    (T_Expression) ->
                                    (T_Expressions) ->
                                    (T_Expression)
sem_Expression_NormalApplication (_range) (_function) (_arguments) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_NormalApplication _range_self _function_self _arguments_self
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (_function_beta .==. foldr (.->.) _beta _arguments_betas) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTExpression,AltNormalApplication,"")
                  , location   = "application"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _function_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ ApplicationEdge False (zip _arguments_oneLineTree _arguments_betas)
                                 , Size _size ]
                  }
        (_size) =
            1 + _function_size + _arguments_size
        (_oneLineTree) =
            punctuate " " (_function_oneLineTree : _arguments_oneLineTree)
        ( _range_self) =
            (_range )
        ( _function_assumptions,_function_beta,_function_betaUnique,_function_collectednotypedef,_function_constraints,_function_kindErrors,_function_miscerrors,_function_oneLineTree,_function_self,_function_size,_function_typeAnnotations,_function_warnings) =
            (_function (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _arguments_assumptions,_arguments_betaUnique,_arguments_betas,_arguments_collectednotypedef,_arguments_constraintslist,_arguments_kindErrors,_arguments_miscerrors,_arguments_oneLineTree,_arguments_self,_arguments_size,_arguments_typeAnnotations,_arguments_warnings) =
            (_arguments (_function_betaUnique) (_function_collectednotypedef) (_lhs_constructorenv) (_function_kindErrors) (_function_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_function_typeAnnotations) (_function_warnings))
    in  (_function_assumptions `combine` _arguments_assumptions
        ,_beta
        ,_arguments_betaUnique
        ,_arguments_collectednotypedef
        ,_newcon .>.
         ctNode [ _function_constraints
                , ctNode _arguments_constraintslist
                ]
        ,_arguments_kindErrors
        ,_arguments_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_arguments_typeAnnotations
        ,_arguments_warnings
        )
sem_Expression_Parenthesized :: (T_Range) ->
                                (T_Expression) ->
                                (T_Expression)
sem_Expression_Parenthesized (_range) (_expression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Parenthesized _range_self _expression_self
        (_oneLineTree) =
            parens _expression_oneLineTree
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_oneLineTree,_self,_expression_size,_expression_typeAnnotations,_expression_warnings)
sem_Expression_RecordConstruction :: (T_Range) ->
                                     (T_Name) ->
                                     (T_RecordExpressionBindings) ->
                                     (T_Expression)
sem_Expression_RecordConstruction (_range) (_name) (_recordExpressionBindings) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_RecordConstruction _range_self _name_self _recordExpressionBindings_self
        (_size) =
            undefined
        (_oneLineTree) =
            intErr "Expression" "record construction"
        ((_assumptions,_constraints,_beta)) =
            internalError "PartialSyntax.ag" "n/a" "Expression.RecordConstruction"
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _recordExpressionBindings_collectednotypedef,_recordExpressionBindings_self,_recordExpressionBindings_typeAnnotations) =
            (_recordExpressionBindings (_lhs_collectednotypedef) (_lhs_namesInScope) (_lhs_typeAnnotations))
    in  (_assumptions,_beta,_lhs_betaUnique,_recordExpressionBindings_collectednotypedef,_constraints,_lhs_kindErrors,_lhs_miscerrors,_oneLineTree,_self,_size,_recordExpressionBindings_typeAnnotations,_lhs_warnings)
sem_Expression_RecordUpdate :: (T_Range) ->
                               (T_Expression) ->
                               (T_RecordExpressionBindings) ->
                               (T_Expression)
sem_Expression_RecordUpdate (_range) (_expression) (_recordExpressionBindings) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_RecordUpdate _range_self _expression_self _recordExpressionBindings_self
        (_size) =
            undefined
        (_oneLineTree) =
            intErr "Expression" "record update"
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _recordExpressionBindings_collectednotypedef,_recordExpressionBindings_self,_recordExpressionBindings_typeAnnotations) =
            (_recordExpressionBindings (_expression_collectednotypedef) (_lhs_namesInScope) (_expression_typeAnnotations))
    in  (_expression_assumptions,_expression_beta,_expression_betaUnique,_recordExpressionBindings_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_oneLineTree,_self,_size,_recordExpressionBindings_typeAnnotations,_expression_warnings)
sem_Expression_Tuple :: (T_Range) ->
                        (T_Expressions) ->
                        (T_Expression)
sem_Expression_Tuple (_range) (_expressions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Tuple _range_self _expressions_self
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (tupleType _expressions_betas .==. _beta) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTExpression,AltTuple,"")
                  , location   = "tuple"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ Size _size
                                 , FolkloreConstraint
                                 , IsTupleEdge ]
                  }
        (_size) =
            1 + _expressions_size
        (_oneLineTree) =
            encloseSep "(" "," ")" _expressions_oneLineTree
        ( _range_self) =
            (_range )
        ( _expressions_assumptions,_expressions_betaUnique,_expressions_betas,_expressions_collectednotypedef,_expressions_constraintslist,_expressions_kindErrors,_expressions_miscerrors,_expressions_oneLineTree,_expressions_self,_expressions_size,_expressions_typeAnnotations,_expressions_warnings) =
            (_expressions (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_expressions_assumptions,_beta,_expressions_betaUnique,_expressions_collectednotypedef,_newcon .>. ctNode _expressions_constraintslist,_expressions_kindErrors,_expressions_miscerrors,_oneLineTree,_self,_size,_expressions_typeAnnotations,_expressions_warnings)
sem_Expression_Typed :: (T_Range) ->
                        (T_Expression) ->
                        (T_Type) ->
                        (T_Expression)
sem_Expression_Typed (_range) (_expression) (_type) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Typed _range_self _expression_self _type_self
        (_beta) =
            TVar _lhs_betaUnique
        (_typeScheme) =
            makeTpSchemeFromType _type_self
        (_conResult) =
            [ (_beta            .::. _typeScheme) _cinfoResult ]
        (_conExpr) =
            [ (_expression_beta .::. _typeScheme) _cinfoExpr   ]
        (_cinfoExpr) =
            \tppair ->
            CInfo { info       = (NTExpression,AltTyped,"expression")
                  , location   = "type annotation"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _expression_oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTExpression,AltTyped,"result")
                  , location   = "type annotation"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _size ]
                  }
        (_size) =
            1 + _expression_size
        (_oneLineTree) =
            Node
                [ Node [_expression_oneLineTree]
                , Text " :: "
                , Node [ Text (show (makeTpSchemeFromType _type_self))]
                ]
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _type_self,_type_typevariables) =
            (_type (_lhs_tyconEnv))
    in  (_expression_assumptions
        ,_beta
        ,_expression_betaUnique
        ,_expression_collectednotypedef
        ,_conResult .>.
         ctNode [ _conExpr .<. _expression_constraints ]
        ,checkType _lhs_tyconEnv _lhs_namesInScope _type_self ++ _expression_kindErrors
        ,_expression_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,((_lhs_monos,_expression_beta),_typeScheme,(_expression_oneLineTree,_range_self)) : _expression_typeAnnotations
        ,_expression_warnings
        )
sem_Expression_Variable :: (T_Range) ->
                           (T_Name) ->
                           (T_Expression)
sem_Expression_Variable (_range) (_name) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Expression_Variable _range_self _name_self
        (_beta) =
            TVar _lhs_betaUnique
        (_size) =
            1
        (_oneLineTree) =
            Node [_name_oneLineTree]
        (_undefinedErrors) =
            if _name_self `elem` _lhs_namesInScope
              then []
              else [ Undefined Variable _name_self _lhs_namesInScope Nothing ]
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (_name_self `single` _beta,_beta,_lhs_betaUnique + 1,_lhs_collectednotypedef,ctNode [ ctVariable _lhs_betaUnique ],_lhs_kindErrors,_undefinedErrors ++ _lhs_miscerrors,_oneLineTree,_self,_size,_lhs_typeAnnotations,_lhs_warnings)
-- Expressions -------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      betas                : Tps
      constraintslist      : ConstraintSets
      oneLineTree          :  [ Tree] 
      self                 : Expressions
      size                 : Int

-}
{-
   local variables for Expressions.Cons:
      self

-}
{-
   local variables for Expressions.Nil:
      self

-}
-- semantic domain
type T_Expressions = (Int) ->
                     ([(Name,Tps,Tp,Bool)]) ->
                     (ConstructorEnvironment) ->
                     ([Error]) ->
                     ([Error]) ->
                     (Tps) ->
                     (Names) ->
                     (TypeConstructorEnvironment) ->
                     ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                     ([Warning]) ->
                     ((Assumptions),(Int),(Tps),([(Name,Tps,Tp,Bool)]),(ConstraintSets),([Error]),([Error]),( [ Tree] ),(Expressions),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_Expressions :: (Expressions) ->
                   (T_Expressions)
sem_Expressions (list) =
    (foldr (sem_Expressions_Cons) (sem_Expressions_Nil) ((map sem_Expression list)))
sem_Expressions_Cons :: (T_Expression) ->
                        (T_Expressions) ->
                        (T_Expressions)
sem_Expressions_Cons (_hd) (_tl) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_assumptions,_hd_beta,_hd_betaUnique,_hd_collectednotypedef,_hd_constraints,_hd_kindErrors,_hd_miscerrors,_hd_oneLineTree,_hd_self,_hd_size,_hd_typeAnnotations,_hd_warnings) =
            (_hd (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _tl_assumptions,_tl_betaUnique,_tl_betas,_tl_collectednotypedef,_tl_constraintslist,_tl_kindErrors,_tl_miscerrors,_tl_oneLineTree,_tl_self,_tl_size,_tl_typeAnnotations,_tl_warnings) =
            (_tl (_hd_betaUnique) (_hd_collectednotypedef) (_lhs_constructorenv) (_hd_kindErrors) (_hd_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_hd_typeAnnotations) (_hd_warnings))
    in  (_hd_assumptions `combine` _tl_assumptions,_tl_betaUnique,_hd_beta : _tl_betas,_tl_collectednotypedef,_hd_constraints : _tl_constraintslist,_tl_kindErrors,_tl_miscerrors,_hd_oneLineTree  :  _tl_oneLineTree,_self,_hd_size  +  _tl_size,_tl_typeAnnotations,_tl_warnings)
sem_Expressions_Nil :: (T_Expressions)
sem_Expressions_Nil (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            []
    in  (empty,_lhs_betaUnique,[],_lhs_collectednotypedef,[],_lhs_kindErrors,_lhs_miscerrors,[],_self,0,_lhs_typeAnnotations,_lhs_warnings)
-- FieldDeclaration --------------------------------------------
{-
   inherited attributes:
      namesInScope         : Names

   chained attributes:

   synthesised attributes:
      self                 : FieldDeclaration

-}
{-
   local variables for FieldDeclaration.FieldDeclaration:
      tyconEnv
      kindErrors
      self

-}
-- semantic domain
type T_FieldDeclaration = (Names) ->
                          ((FieldDeclaration))
-- cata
sem_FieldDeclaration :: (FieldDeclaration) ->
                        (T_FieldDeclaration)
sem_FieldDeclaration ((FieldDeclaration_FieldDeclaration (_range) (_names) (_type))) =
    (sem_FieldDeclaration_FieldDeclaration ((sem_Range (_range))) ((sem_Names (_names))) ((sem_AnnotatedType (_type))))
sem_FieldDeclaration_FieldDeclaration :: (T_Range) ->
                                         (T_Names) ->
                                         (T_AnnotatedType) ->
                                         (T_FieldDeclaration)
sem_FieldDeclaration_FieldDeclaration (_range) (_names) (_type) (_lhs_namesInScope) =
    let (_self) =
            FieldDeclaration_FieldDeclaration _range_self _names_self _type_self
        ((_kindErrors,_tyconEnv)) =
            internalError "PartialSyntax.ag" "n/a" "FieldDeclaration.FieldDeclaration"
        ( _range_self) =
            (_range )
        ( _names_isIdentifier,_names_isOperator,_names_isSpecial,_names_oneLineTree,_names_self) =
            (_names )
        ( _type_kindErrors,_type_self,_type_type,_type_typevariables) =
            (_type (_kindErrors) (_lhs_namesInScope) (_tyconEnv))
    in  (_self)
-- FieldDeclarations -------------------------------------------
{-
   inherited attributes:
      namesInScope         : Names

   chained attributes:

   synthesised attributes:
      self                 : FieldDeclarations

-}
{-
   local variables for FieldDeclarations.Cons:
      self

-}
{-
   local variables for FieldDeclarations.Nil:
      self

-}
-- semantic domain
type T_FieldDeclarations = (Names) ->
                           ((FieldDeclarations))
-- cata
sem_FieldDeclarations :: (FieldDeclarations) ->
                         (T_FieldDeclarations)
sem_FieldDeclarations (list) =
    (foldr (sem_FieldDeclarations_Cons) (sem_FieldDeclarations_Nil) ((map sem_FieldDeclaration list)))
sem_FieldDeclarations_Cons :: (T_FieldDeclaration) ->
                              (T_FieldDeclarations) ->
                              (T_FieldDeclarations)
sem_FieldDeclarations_Cons (_hd) (_tl) (_lhs_namesInScope) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd (_lhs_namesInScope))
        ( _tl_self) =
            (_tl (_lhs_namesInScope))
    in  (_self)
sem_FieldDeclarations_Nil :: (T_FieldDeclarations)
sem_FieldDeclarations_Nil (_lhs_namesInScope) =
    let (_self) =
            []
    in  (_self)
-- Fixity ------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : Fixity

-}
{-
   local variables for Fixity.Infix:
      self

-}
{-
   local variables for Fixity.Infixl:
      self

-}
{-
   local variables for Fixity.Infixr:
      self

-}
-- semantic domain
type T_Fixity = ((Fixity))
-- cata
sem_Fixity :: (Fixity) ->
              (T_Fixity)
sem_Fixity ((Fixity_Infix (_range))) =
    (sem_Fixity_Infix ((sem_Range (_range))))
sem_Fixity ((Fixity_Infixl (_range))) =
    (sem_Fixity_Infixl ((sem_Range (_range))))
sem_Fixity ((Fixity_Infixr (_range))) =
    (sem_Fixity_Infixr ((sem_Range (_range))))
sem_Fixity_Infix :: (T_Range) ->
                    (T_Fixity)
sem_Fixity_Infix (_range) =
    let (_self) =
            Fixity_Infix _range_self
        ( _range_self) =
            (_range )
    in  (_self)
sem_Fixity_Infixl :: (T_Range) ->
                     (T_Fixity)
sem_Fixity_Infixl (_range) =
    let (_self) =
            Fixity_Infixl _range_self
        ( _range_self) =
            (_range )
    in  (_self)
sem_Fixity_Infixr :: (T_Range) ->
                     (T_Fixity)
sem_Fixity_Infixr (_range) =
    let (_self) =
            Fixity_Infixr _range_self
        ( _range_self) =
            (_range )
    in  (_self)
-- FunctionBinding ---------------------------------------------
{-
   inherited attributes:
      betaRight            : Tp
      betasLeft            : Tps
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      arity                : Int
      assumptions          : Assumptions
      constraints          : ConstraintSet
      name                 : Name
      numberOfPatterns     : Int
      oneLineTree          : Tree
      self                 : FunctionBinding
      size                 : Int

-}
{-
   local variables for FunctionBinding.FunctionBinding:
      shadowing
      namesInScope
      oneLineTree
      size
      cinfoLeft
      cinfoRight
      cinfoBind
      conRight
      conLeft
      unused
      duplicated
      assumptions'
      csetBinds
      self

-}
-- semantic domain
type T_FunctionBinding = (Tp) ->
                         (Int) ->
                         (Tps) ->
                         ([(Name,Tps,Tp,Bool)]) ->
                         (ConstructorEnvironment) ->
                         ([Error]) ->
                         ([Error]) ->
                         (Tps) ->
                         (Names) ->
                         (TypeConstructorEnvironment) ->
                         ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                         ([Warning]) ->
                         ((Int),(Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),(Name),(Int),(Tree),(FunctionBinding),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_FunctionBinding :: (FunctionBinding) ->
                       (T_FunctionBinding)
sem_FunctionBinding ((FunctionBinding_FunctionBinding (_range) (_lefthandside) (_righthandside))) =
    (sem_FunctionBinding_FunctionBinding ((sem_Range (_range))) ((sem_LeftHandSide (_lefthandside))) ((sem_RightHandSide (_righthandside))))
sem_FunctionBinding_FunctionBinding :: (T_Range) ->
                                       (T_LeftHandSide) ->
                                       (T_RightHandSide) ->
                                       (T_FunctionBinding)
sem_FunctionBinding_FunctionBinding (_range) (_lefthandside) (_righthandside) (_lhs_betaRight) (_lhs_betaUnique) (_lhs_betasLeft) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            FunctionBinding_FunctionBinding _range_self _lefthandside_self _righthandside_self
        ((_csetBinds,_assumptions',_duplicated,_unused)) =
            (_lefthandside_environment !===! _righthandside_assumptions) _cinfoBind
        (_conLeft) =
            zipWith4 (\t1 t2 txt nr -> (t1 .==. t2) (_cinfoLeft nr txt)) _lefthandside_betas _lhs_betasLeft _lefthandside_patternTrees [0..]
        (_conRight) =
            [ (_righthandside_beta .==. _lhs_betaRight) _cinfoRight ]
        (_cinfoBind) =
            variableBindingCInfo (NTFunctionBinding,AltFunctionBinding)
        (_cinfoRight) =
            \tppair ->
            CInfo { info       = (NTFunctionBinding,AltFunctionBinding,"right")
                  , location   = "right hand side"
                  , errorrange = _range_self
                  , sources    = [ SD_Term (_righthandside_oneLineTree "") ]
                  , typepair   = tppair
                  , properties = [ UnifierTypeVariable (tpToInt _lhs_betaRight)
                                 , Size _size ]
                  }
        (_cinfoLeft) =
            \num txt tppair ->
            CInfo { info       = (NTFunctionBinding,AltFunctionBinding,"left "++show num)
                  , location   = "pattern of function binding"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat txt ]
                  , typepair   = tppair
                  , properties = [ UnifierTypeVariable (tpToInt (snd tppair))
                                 , Size _size ]
                  }
        (_size) =
            _lefthandside_size + _righthandside_size
        (_oneLineTree) =
            Node [_lefthandside_oneLineTree, _righthandside_oneLineTree "=" ]
        ((_namesInScope,_shadowing)) =
            addToScope (keys _lefthandside_environment) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _lefthandside_betaUnique,_lefthandside_betas,_lefthandside_constraints,_lefthandside_environment,_lefthandside_miscerrors,_lefthandside_name,_lefthandside_numberOfPatterns,_lefthandside_oneLineTree,_lefthandside_patternTrees,_lefthandside_self,_lefthandside_size,_lefthandside_warnings) =
            (_lefthandside (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _righthandside_assumptions,_righthandside_beta,_righthandside_betaUnique,_righthandside_collectednotypedef,_righthandside_constraints,_righthandside_kindErrors,_righthandside_miscerrors,_righthandside_oneLineTree,_righthandside_self,_righthandside_size,_righthandside_typeAnnotations,_righthandside_warnings) =
            (_righthandside (_lefthandside_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lefthandside_miscerrors) (elts _lefthandside_environment ++ _lhs_monos) (_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lefthandside_warnings))
    in  (_lefthandside_numberOfPatterns
        ,_assumptions'
        ,_righthandside_betaUnique
        ,_righthandside_collectednotypedef
        ,_csetBinds .>>.
         ctNode [ _conLeft  .<. _lefthandside_constraints
                , _conRight .<. _righthandside_constraints
                ]
        ,_righthandside_kindErrors
        ,makeDuplicated Variable _duplicated ++ _righthandside_miscerrors
        ,_lefthandside_name
        ,_lefthandside_numberOfPatterns
        ,_oneLineTree
        ,_self
        ,_size
        ,_righthandside_typeAnnotations
        ,_shadowing ++
         makeUnused Variable _unused False ++
         _righthandside_warnings
        )
-- FunctionBindings --------------------------------------------
{-
   inherited attributes:
      betaRight            : Tp
      betasLeft            : Tps
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      arities              :  [Int] 
      assumptions          : Assumptions
      constraintslist      : ConstraintSets
      name                 : Name
      numberOfPatterns     : Int
      oneLineTree          :  [ Tree] 
      self                 : FunctionBindings
      size                 : Int

-}
{-
   local variables for FunctionBindings.Cons:
      self

-}
{-
   local variables for FunctionBindings.Nil:
      self

-}
-- semantic domain
type T_FunctionBindings = (Tp) ->
                          (Int) ->
                          (Tps) ->
                          ([(Name,Tps,Tp,Bool)]) ->
                          (ConstructorEnvironment) ->
                          ([Error]) ->
                          ([Error]) ->
                          (Tps) ->
                          (Names) ->
                          (TypeConstructorEnvironment) ->
                          ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                          ([Warning]) ->
                          (( [Int] ),(Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSets),([Error]),([Error]),(Name),(Int),( [ Tree] ),(FunctionBindings),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_FunctionBindings :: (FunctionBindings) ->
                        (T_FunctionBindings)
sem_FunctionBindings (list) =
    (foldr (sem_FunctionBindings_Cons) (sem_FunctionBindings_Nil) ((map sem_FunctionBinding list)))
sem_FunctionBindings_Cons :: (T_FunctionBinding) ->
                             (T_FunctionBindings) ->
                             (T_FunctionBindings)
sem_FunctionBindings_Cons (_hd) (_tl) (_lhs_betaRight) (_lhs_betaUnique) (_lhs_betasLeft) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_arity,_hd_assumptions,_hd_betaUnique,_hd_collectednotypedef,_hd_constraints,_hd_kindErrors,_hd_miscerrors,_hd_name,_hd_numberOfPatterns,_hd_oneLineTree,_hd_self,_hd_size,_hd_typeAnnotations,_hd_warnings) =
            (_hd (_lhs_betaRight) (_lhs_betaUnique) (_lhs_betasLeft) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _tl_arities,_tl_assumptions,_tl_betaUnique,_tl_collectednotypedef,_tl_constraintslist,_tl_kindErrors,_tl_miscerrors,_tl_name,_tl_numberOfPatterns,_tl_oneLineTree,_tl_self,_tl_size,_tl_typeAnnotations,_tl_warnings) =
            (_tl (_lhs_betaRight) (_hd_betaUnique) (_lhs_betasLeft) (_hd_collectednotypedef) (_lhs_constructorenv) (_hd_kindErrors) (_hd_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_hd_typeAnnotations) (_hd_warnings))
    in  (_hd_arity : _tl_arities,_hd_assumptions `combine` _tl_assumptions,_tl_betaUnique,_tl_collectednotypedef,_hd_constraints : _tl_constraintslist,_tl_kindErrors,_tl_miscerrors,_hd_name,_hd_numberOfPatterns,_hd_oneLineTree  :  _tl_oneLineTree,_self,_hd_size  +  _tl_size,_tl_typeAnnotations,_tl_warnings)
sem_FunctionBindings_Nil :: (T_FunctionBindings)
sem_FunctionBindings_Nil (_lhs_betaRight) (_lhs_betaUnique) (_lhs_betasLeft) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            []
    in  ([],empty,_lhs_betaUnique,_lhs_collectednotypedef,[],_lhs_kindErrors,_lhs_miscerrors,internalError "TypeInferencing.ag" "n/a" "FunctionBindings(2)",internalError "TypeInferencing.ag" "n/a" "FunctionBindings(1)",[],_self,0,_lhs_typeAnnotations,_lhs_warnings)
-- GuardedExpression -------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      rightBeta            : Tp
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      beta                 : Tp
      constraints          : ConstraintSet
      oneLineTree          :  String -> Tree 
      self                 : GuardedExpression
      size                 : Int

-}
{-
   local variables for GuardedExpression.GuardedExpression:
      oneLineTree
      size
      cinfoExpr
      cinfoGuard
      newconExpr
      newconGuard
      self

-}
-- semantic domain
type T_GuardedExpression = (Int) ->
                           ([(Name,Tps,Tp,Bool)]) ->
                           (ConstructorEnvironment) ->
                           ([Error]) ->
                           ([Error]) ->
                           (Tps) ->
                           (Names) ->
                           (Tp) ->
                           (TypeConstructorEnvironment) ->
                           ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                           ([Warning]) ->
                           ((Assumptions),(Tp),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),( String -> Tree ),(GuardedExpression),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_GuardedExpression :: (GuardedExpression) ->
                         (T_GuardedExpression)
sem_GuardedExpression ((GuardedExpression_GuardedExpression (_range) (_guard) (_expression))) =
    (sem_GuardedExpression_GuardedExpression ((sem_Range (_range))) ((sem_Expression (_guard))) ((sem_Expression (_expression))))
sem_GuardedExpression_GuardedExpression :: (T_Range) ->
                                           (T_Expression) ->
                                           (T_Expression) ->
                                           (T_GuardedExpression)
sem_GuardedExpression_GuardedExpression (_range) (_guard) (_expression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_rightBeta) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            GuardedExpression_GuardedExpression _range_self _guard_self _expression_self
        (_newconGuard) =
            [ (_guard_beta .==. boolType) _cinfoGuard ]
        (_newconExpr) =
            [ (_expression_beta .==. _lhs_rightBeta) _cinfoExpr ]
        (_cinfoGuard) =
            \tppair ->
            CInfo { info       = (NTGuardedExpression,AltGuardedExpression,"guard")
                  , location   = "guard"
                  , errorrange = getExprRange _guard_self
                  , sources    = [ SD_Expr _guard_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_cinfoExpr) =
            \tppair ->
            CInfo { info       = (NTGuardedExpression,AltGuardedExpression,"expression")
                  , location   = "guarded expression"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _expression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ UnifierTypeVariable (tpToInt _lhs_rightBeta)
                                 , Size _size ]
                  }
        (_size) =
            _guard_size + _expression_size
        (_oneLineTree) =
            \assign -> Node [ _guard_oneLineTree, Text assign, _expression_oneLineTree ]
        ( _range_self) =
            (_range )
        ( _guard_assumptions,_guard_beta,_guard_betaUnique,_guard_collectednotypedef,_guard_constraints,_guard_kindErrors,_guard_miscerrors,_guard_oneLineTree,_guard_self,_guard_size,_guard_typeAnnotations,_guard_warnings) =
            (_guard (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_guard_betaUnique) (_guard_collectednotypedef) (_lhs_constructorenv) (_guard_kindErrors) (_guard_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_guard_typeAnnotations) (_guard_warnings))
    in  (_guard_assumptions `combine` _expression_assumptions
        ,_expression_beta
        ,_expression_betaUnique
        ,_expression_collectednotypedef
        ,ctNode [ _newconGuard .<. _guard_constraints
                , _newconExpr  .<. _expression_constraints
                ]
        ,_expression_kindErrors
        ,_expression_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_expression_typeAnnotations
        ,_expression_warnings
        )
-- GuardedExpressions ------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      rightBeta            : Tp
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      betas                : Tps
      constraintslist      : ConstraintSets
      oneLineTree          :  [ String -> Tree ] 
      self                 : GuardedExpressions
      size                 : Int

-}
{-
   local variables for GuardedExpressions.Cons:
      self

-}
{-
   local variables for GuardedExpressions.Nil:
      self

-}
-- semantic domain
type T_GuardedExpressions = (Int) ->
                            ([(Name,Tps,Tp,Bool)]) ->
                            (ConstructorEnvironment) ->
                            ([Error]) ->
                            ([Error]) ->
                            (Tps) ->
                            (Names) ->
                            (Tp) ->
                            (TypeConstructorEnvironment) ->
                            ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                            ([Warning]) ->
                            ((Assumptions),(Int),(Tps),([(Name,Tps,Tp,Bool)]),(ConstraintSets),([Error]),([Error]),( [ String -> Tree ] ),(GuardedExpressions),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_GuardedExpressions :: (GuardedExpressions) ->
                          (T_GuardedExpressions)
sem_GuardedExpressions (list) =
    (foldr (sem_GuardedExpressions_Cons) (sem_GuardedExpressions_Nil) ((map sem_GuardedExpression list)))
sem_GuardedExpressions_Cons :: (T_GuardedExpression) ->
                               (T_GuardedExpressions) ->
                               (T_GuardedExpressions)
sem_GuardedExpressions_Cons (_hd) (_tl) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_rightBeta) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_assumptions,_hd_beta,_hd_betaUnique,_hd_collectednotypedef,_hd_constraints,_hd_kindErrors,_hd_miscerrors,_hd_oneLineTree,_hd_self,_hd_size,_hd_typeAnnotations,_hd_warnings) =
            (_hd (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_rightBeta) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _tl_assumptions,_tl_betaUnique,_tl_betas,_tl_collectednotypedef,_tl_constraintslist,_tl_kindErrors,_tl_miscerrors,_tl_oneLineTree,_tl_self,_tl_size,_tl_typeAnnotations,_tl_warnings) =
            (_tl (_hd_betaUnique) (_hd_collectednotypedef) (_lhs_constructorenv) (_hd_kindErrors) (_hd_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_rightBeta) (_lhs_tyconEnv) (_hd_typeAnnotations) (_hd_warnings))
    in  (_hd_assumptions `combine` _tl_assumptions,_tl_betaUnique,_hd_beta : _tl_betas,_tl_collectednotypedef,_hd_constraints : _tl_constraintslist,_tl_kindErrors,_tl_miscerrors,_hd_oneLineTree  :  _tl_oneLineTree,_self,_hd_size  +  _tl_size,_tl_typeAnnotations,_tl_warnings)
sem_GuardedExpressions_Nil :: (T_GuardedExpressions)
sem_GuardedExpressions_Nil (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_rightBeta) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            []
    in  (empty,_lhs_betaUnique,[],_lhs_collectednotypedef,[],_lhs_kindErrors,_lhs_miscerrors,[],_self,0,_lhs_typeAnnotations,_lhs_warnings)
-- Import ------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : Import

-}
{-
   local variables for Import.TypeOrClass:
      self

-}
{-
   local variables for Import.TypeOrClassComplete:
      self

-}
{-
   local variables for Import.Variable:
      self

-}
-- semantic domain
type T_Import = ((Import))
-- cata
sem_Import :: (Import) ->
              (T_Import)
sem_Import ((Import_TypeOrClass (_range) (_name) (_names))) =
    (sem_Import_TypeOrClass ((sem_Range (_range))) ((sem_Name (_name))) ((sem_MaybeNames (_names))))
sem_Import ((Import_TypeOrClassComplete (_range) (_name))) =
    (sem_Import_TypeOrClassComplete ((sem_Range (_range))) ((sem_Name (_name))))
sem_Import ((Import_Variable (_range) (_name))) =
    (sem_Import_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Import_TypeOrClass :: (T_Range) ->
                          (T_Name) ->
                          (T_MaybeNames) ->
                          (T_Import)
sem_Import_TypeOrClass (_range) (_name) (_names) =
    let (_self) =
            Import_TypeOrClass _range_self _name_self _names_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _names_self) =
            (_names )
    in  (_self)
sem_Import_TypeOrClassComplete :: (T_Range) ->
                                  (T_Name) ->
                                  (T_Import)
sem_Import_TypeOrClassComplete (_range) (_name) =
    let (_self) =
            Import_TypeOrClassComplete _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (_self)
sem_Import_Variable :: (T_Range) ->
                       (T_Name) ->
                       (T_Import)
sem_Import_Variable (_range) (_name) =
    let (_self) =
            Import_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (_self)
-- ImportDeclaration -------------------------------------------
{-
   inherited attributes:

   chained attributes:
      importedModules      : Names

   synthesised attributes:
      self                 : ImportDeclaration

-}
{-
   local variables for ImportDeclaration.Empty:
      self

-}
{-
   local variables for ImportDeclaration.Import:
      self

-}
-- semantic domain
type T_ImportDeclaration = (Names) ->
                           ((Names),(ImportDeclaration))
-- cata
sem_ImportDeclaration :: (ImportDeclaration) ->
                         (T_ImportDeclaration)
sem_ImportDeclaration ((ImportDeclaration_Empty (_range))) =
    (sem_ImportDeclaration_Empty ((sem_Range (_range))))
sem_ImportDeclaration ((ImportDeclaration_Import (_range) (_qualified) (_name) (_asname) (_importspecification))) =
    (sem_ImportDeclaration_Import ((sem_Range (_range))) (_qualified) ((sem_Name (_name))) ((sem_MaybeName (_asname))) ((sem_MaybeImportSpecification (_importspecification))))
sem_ImportDeclaration_Empty :: (T_Range) ->
                               (T_ImportDeclaration)
sem_ImportDeclaration_Empty (_range) (_lhs_importedModules) =
    let (_self) =
            ImportDeclaration_Empty _range_self
        ( _range_self) =
            (_range )
    in  (_lhs_importedModules,_self)
sem_ImportDeclaration_Import :: (T_Range) ->
                                (Bool) ->
                                (T_Name) ->
                                (T_MaybeName) ->
                                (T_MaybeImportSpecification) ->
                                (T_ImportDeclaration)
sem_ImportDeclaration_Import (_range) (_qualified) (_name) (_asname) (_importspecification) (_lhs_importedModules) =
    let (_self) =
            ImportDeclaration_Import _range_self _qualified _name_self _asname_self _importspecification_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _asname_self) =
            (_asname )
        ( _importspecification_self) =
            (_importspecification )
    in  (_name_self : _lhs_importedModules,_self)
-- ImportDeclarations ------------------------------------------
{-
   inherited attributes:

   chained attributes:
      importedModules      : Names

   synthesised attributes:
      self                 : ImportDeclarations

-}
{-
   local variables for ImportDeclarations.Cons:
      self

-}
{-
   local variables for ImportDeclarations.Nil:
      self

-}
-- semantic domain
type T_ImportDeclarations = (Names) ->
                            ((Names),(ImportDeclarations))
-- cata
sem_ImportDeclarations :: (ImportDeclarations) ->
                          (T_ImportDeclarations)
sem_ImportDeclarations (list) =
    (foldr (sem_ImportDeclarations_Cons) (sem_ImportDeclarations_Nil) ((map sem_ImportDeclaration list)))
sem_ImportDeclarations_Cons :: (T_ImportDeclaration) ->
                               (T_ImportDeclarations) ->
                               (T_ImportDeclarations)
sem_ImportDeclarations_Cons (_hd) (_tl) (_lhs_importedModules) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_importedModules,_hd_self) =
            (_hd (_lhs_importedModules))
        ( _tl_importedModules,_tl_self) =
            (_tl (_hd_importedModules))
    in  (_tl_importedModules,_self)
sem_ImportDeclarations_Nil :: (T_ImportDeclarations)
sem_ImportDeclarations_Nil (_lhs_importedModules) =
    let (_self) =
            []
    in  (_lhs_importedModules,_self)
-- ImportSpecification -----------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : ImportSpecification

-}
{-
   local variables for ImportSpecification.Import:
      self

-}
-- semantic domain
type T_ImportSpecification = ((ImportSpecification))
-- cata
sem_ImportSpecification :: (ImportSpecification) ->
                           (T_ImportSpecification)
sem_ImportSpecification ((ImportSpecification_Import (_range) (_hiding) (_imports))) =
    (sem_ImportSpecification_Import ((sem_Range (_range))) (_hiding) ((sem_Imports (_imports))))
sem_ImportSpecification_Import :: (T_Range) ->
                                  (Bool) ->
                                  (T_Imports) ->
                                  (T_ImportSpecification)
sem_ImportSpecification_Import (_range) (_hiding) (_imports) =
    let (_self) =
            ImportSpecification_Import _range_self _hiding _imports_self
        ( _range_self) =
            (_range )
        ( _imports_self) =
            (_imports )
    in  (_self)
-- Imports -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : Imports

-}
{-
   local variables for Imports.Cons:
      self

-}
{-
   local variables for Imports.Nil:
      self

-}
-- semantic domain
type T_Imports = ((Imports))
-- cata
sem_Imports :: (Imports) ->
               (T_Imports)
sem_Imports (list) =
    (foldr (sem_Imports_Cons) (sem_Imports_Nil) ((map sem_Import list)))
sem_Imports_Cons :: (T_Import) ->
                    (T_Imports) ->
                    (T_Imports)
sem_Imports_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  (_self)
sem_Imports_Nil :: (T_Imports)
sem_Imports_Nil  =
    let (_self) =
            []
    in  (_self)
-- LeftHandSide ------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      miscerrors           : [Error]
      warnings             : [Warning]

   synthesised attributes:
      betas                : Tps
      constraints          : ConstraintSet
      environment          : PatternAssumptions
      name                 : Name
      numberOfPatterns     : Int
      oneLineTree          : Tree
      patternTrees         : [Tree]
      self                 : LeftHandSide
      size                 : Int

-}
{-
   local variables for LeftHandSide.Function:
      oneLineTree
      self

-}
{-
   local variables for LeftHandSide.Infix:
      oneLineTree
      size
      self

-}
{-
   local variables for LeftHandSide.Parenthesized:
      oneLineTree
      size
      self

-}
-- semantic domain
type T_LeftHandSide = (Int) ->
                      (ConstructorEnvironment) ->
                      ([Error]) ->
                      (Names) ->
                      (TypeConstructorEnvironment) ->
                      ([Warning]) ->
                      ((Int),(Tps),(ConstraintSet),(PatternAssumptions),([Error]),(Name),(Int),(Tree),([Tree]),(LeftHandSide),(Int),([Warning]))
-- cata
sem_LeftHandSide :: (LeftHandSide) ->
                    (T_LeftHandSide)
sem_LeftHandSide ((LeftHandSide_Function (_range) (_name) (_patterns))) =
    (sem_LeftHandSide_Function ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Patterns (_patterns))))
sem_LeftHandSide ((LeftHandSide_Infix (_range) (_leftPattern) (_operator) (_rightPattern))) =
    (sem_LeftHandSide_Infix ((sem_Range (_range))) ((sem_Pattern (_leftPattern))) ((sem_Name (_operator))) ((sem_Pattern (_rightPattern))))
sem_LeftHandSide ((LeftHandSide_Parenthesized (_range) (_lefthandside) (_patterns))) =
    (sem_LeftHandSide_Parenthesized ((sem_Range (_range))) ((sem_LeftHandSide (_lefthandside))) ((sem_Patterns (_patterns))))
sem_LeftHandSide_Function :: (T_Range) ->
                             (T_Name) ->
                             (T_Patterns) ->
                             (T_LeftHandSide)
sem_LeftHandSide_Function (_range) (_name) (_patterns) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            LeftHandSide_Function _range_self _name_self _patterns_self
        (_oneLineTree) =
            punctuate " " (_name_oneLineTree : _patterns_oneLineTree)
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_environment,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_oneLineTree,_patterns_self,_patterns_size,_patterns_warnings) =
            (_patterns (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
    in  (_patterns_betaUnique,_patterns_betas,ctNode _patterns_constraintslist,_patterns_environment,_patterns_miscerrors,_name_self,_patterns_numberOfPatterns,_oneLineTree,_patterns_oneLineTree,_self,_patterns_size,_patterns_warnings)
sem_LeftHandSide_Infix :: (T_Range) ->
                          (T_Pattern) ->
                          (T_Name) ->
                          (T_Pattern) ->
                          (T_LeftHandSide)
sem_LeftHandSide_Infix (_range) (_leftPattern) (_operator) (_rightPattern) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            LeftHandSide_Infix _range_self _leftPattern_self _operator_self _rightPattern_self
        (_size) =
            1 + _leftPattern_size + _rightPattern_size
        (_oneLineTree) =
            punctuate " " [_leftPattern_oneLineTree, _operator_oneLineTree, _rightPattern_oneLineTree]
        ( _range_self) =
            (_range )
        ( _leftPattern_beta,_leftPattern_betaUnique,_leftPattern_constraints,_leftPattern_environment,_leftPattern_miscerrors,_leftPattern_oneLineTree,_leftPattern_self,_leftPattern_size,_leftPattern_warnings) =
            (_leftPattern (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _operator_isIdentifier,_operator_isOperator,_operator_isSpecial,_operator_oneLineTree,_operator_self) =
            (_operator )
        ( _rightPattern_beta,_rightPattern_betaUnique,_rightPattern_constraints,_rightPattern_environment,_rightPattern_miscerrors,_rightPattern_oneLineTree,_rightPattern_self,_rightPattern_size,_rightPattern_warnings) =
            (_rightPattern (_leftPattern_betaUnique) (_lhs_constructorenv) (_leftPattern_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_leftPattern_warnings))
    in  (_rightPattern_betaUnique
        ,[_leftPattern_beta,_rightPattern_beta]
        ,ctNode [ _leftPattern_constraints
                , _rightPattern_constraints
                ]
        ,_leftPattern_environment `combine` _rightPattern_environment
        ,_rightPattern_miscerrors
        ,_operator_self
        ,2
        ,_oneLineTree
        ,[_leftPattern_oneLineTree, _rightPattern_oneLineTree]
        ,_self
        ,_size
        ,_rightPattern_warnings
        )
sem_LeftHandSide_Parenthesized :: (T_Range) ->
                                  (T_LeftHandSide) ->
                                  (T_Patterns) ->
                                  (T_LeftHandSide)
sem_LeftHandSide_Parenthesized (_range) (_lefthandside) (_patterns) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            LeftHandSide_Parenthesized _range_self _lefthandside_self _patterns_self
        (_size) =
            _lefthandside_size + _patterns_size
        (_oneLineTree) =
            punctuate " " ( parens _lefthandside_oneLineTree : _patterns_oneLineTree )
        ( _range_self) =
            (_range )
        ( _lefthandside_betaUnique,_lefthandside_betas,_lefthandside_constraints,_lefthandside_environment,_lefthandside_miscerrors,_lefthandside_name,_lefthandside_numberOfPatterns,_lefthandside_oneLineTree,_lefthandside_patternTrees,_lefthandside_self,_lefthandside_size,_lefthandside_warnings) =
            (_lefthandside (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_environment,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_oneLineTree,_patterns_self,_patterns_size,_patterns_warnings) =
            (_patterns (_lefthandside_betaUnique) (_lhs_constructorenv) (_lefthandside_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lefthandside_warnings))
    in  (_patterns_betaUnique,_lefthandside_betas ++ _patterns_betas,ctNode ( _lefthandside_constraints : _patterns_constraintslist ),_lefthandside_environment `combine` _patterns_environment,_patterns_miscerrors,_lefthandside_name,_lefthandside_numberOfPatterns + _patterns_numberOfPatterns,_oneLineTree,_lefthandside_patternTrees ++ _patterns_oneLineTree,_self,_size,_patterns_warnings)
-- Literal -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      literalType          : Tp
      oneLineTree          : Tree
      self                 : Literal

-}
{-
   local variables for Literal.Char:
      oneLineTree
      self

-}
{-
   local variables for Literal.Float:
      oneLineTree
      self

-}
{-
   local variables for Literal.Int:
      oneLineTree
      self

-}
{-
   local variables for Literal.String:
      oneLineTree
      self

-}
-- semantic domain
type T_Literal = ((Tp),(Tree),(Literal))
-- cata
sem_Literal :: (Literal) ->
               (T_Literal)
sem_Literal ((Literal_Char (_range) (_value))) =
    (sem_Literal_Char ((sem_Range (_range))) (_value))
sem_Literal ((Literal_Float (_range) (_value))) =
    (sem_Literal_Float ((sem_Range (_range))) (_value))
sem_Literal ((Literal_Int (_range) (_value))) =
    (sem_Literal_Int ((sem_Range (_range))) (_value))
sem_Literal ((Literal_String (_range) (_value))) =
    (sem_Literal_String ((sem_Range (_range))) (_value))
sem_Literal_Char :: (T_Range) ->
                    (String) ->
                    (T_Literal)
sem_Literal_Char (_range) (_value) =
    let (_self) =
            Literal_Char _range_self _value
        (_oneLineTree) =
            Text ("'" ++ _value ++ "'")
        ( _range_self) =
            (_range )
    in  (charType,_oneLineTree,_self)
sem_Literal_Float :: (T_Range) ->
                     (String) ->
                     (T_Literal)
sem_Literal_Float (_range) (_value) =
    let (_self) =
            Literal_Float _range_self _value
        (_oneLineTree) =
            Text _value
        ( _range_self) =
            (_range )
    in  (floatType,_oneLineTree,_self)
sem_Literal_Int :: (T_Range) ->
                   (String) ->
                   (T_Literal)
sem_Literal_Int (_range) (_value) =
    let (_self) =
            Literal_Int _range_self _value
        (_oneLineTree) =
            Text _value
        ( _range_self) =
            (_range )
    in  (intType,_oneLineTree,_self)
sem_Literal_String :: (T_Range) ->
                      (String) ->
                      (T_Literal)
sem_Literal_String (_range) (_value) =
    let (_self) =
            Literal_String _range_self _value
        (_oneLineTree) =
            Text  ("\"" ++ _value ++ "\"")
        ( _range_self) =
            (_range )
    in  (stringType,_oneLineTree,_self)
-- MaybeDeclarations -------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      assumptions          : Assumptions
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      constraints          : ConstraintSet
      kindErrors           : [Error]
      miscerrors           : [Error]
      namesInScope         : Names
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      oneLineTree          :  Maybe [Tree] 
      self                 : MaybeDeclarations
      size                 : Int

-}
{-
   local variables for MaybeDeclarations.Just:
      suspiciousErrors
      shadowing
      namesInScope
      assumptions
      environment
      collectDataTypes
      fixOps
      derivedFunctions
      typeSynonyms
      collectConstructorEnv
      collectEnvironment
      oneLineTree
      mybdggroup
      anns
      tiNoTypeDefinition
      tiWarnings
      tiErrors
      monoTable
      cset
      aset
      env
      self

-}
{-
   local variables for MaybeDeclarations.Nothing:
      oneLineTree
      self

-}
-- semantic domain
type T_MaybeDeclarations = (Assumptions) ->
                           (Int) ->
                           ([(Name,Tps,Tp,Bool)]) ->
                           (ConstraintSet) ->
                           (ConstructorEnvironment) ->
                           ([Error]) ->
                           ([Error]) ->
                           (Tps) ->
                           (Names) ->
                           (TypeConstructorEnvironment) ->
                           ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                           ([Warning]) ->
                           ((Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),(Names),( Maybe [Tree] ),(MaybeDeclarations),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_MaybeDeclarations :: (MaybeDeclarations) ->
                         (T_MaybeDeclarations)
sem_MaybeDeclarations ((MaybeDeclarations_Just (_declarations))) =
    (sem_MaybeDeclarations_Just ((sem_Declarations (_declarations))))
sem_MaybeDeclarations ((MaybeDeclarations_Nothing )) =
    (sem_MaybeDeclarations_Nothing )
sem_MaybeDeclarations_Just :: (T_Declarations) ->
                              (T_MaybeDeclarations)
sem_MaybeDeclarations_Just (_declarations) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            MaybeDeclarations_Just _declarations_self
        ((_env,_aset,_cset,_monoTable,_tiErrors,_tiWarnings,_tiNoTypeDefinition,_anns)) =
            performAndCheckBindingGroup False _lhs_monos _declarations_typeSignatures _mybdggroup _declarations_bindingGroups
        (_mybdggroup) =
            (empty,_lhs_assumptions,[_lhs_constraints])
        (_oneLineTree) =
            Just _declarations_oneLineTree
        ((_collectEnvironment,_collectConstructorEnv,_typeSynonyms,_derivedFunctions,_fixOps,_collectDataTypes)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel MaybeDeclaration"
        ((_environment,_assumptions,_)) =
            concatBindingGroups _declarations_bindingGroups
        ((_namesInScope,_shadowing)) =
            addToScope (keys _environment) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectEnvironment,_declarations_collectednotypedef,_declarations_derivedFunctions,_declarations_fixOps,_declarations_kindErrors,_declarations_miscerrors,_declarations_oneLineTree,_declarations_previousWasAlsoFB,_declarations_self,_declarations_size,_declarations_suspiciousFBs,_declarations_typeAnnotations,_declarations_typeSignatures,_declarations_warnings) =
            (_declarations (_lhs_betaUnique) ([]) (_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_derivedFunctions) (_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_monoTable) (_lhs_monos) (_namesInScope) (Nothing) ([]) (_lhs_tyconEnv) (_lhs_typeAnnotations) (empty) (_lhs_warnings))
    in  (_aset
        ,_declarations_betaUnique
        ,_tiNoTypeDefinition ++ _declarations_collectednotypedef
        ,_cset
        ,_declarations_kindErrors
        ,_tiErrors ++ _declarations_miscerrors
        ,_namesInScope
        ,_oneLineTree
        ,_self
        ,_declarations_size
        ,_anns ++ _declarations_typeAnnotations
        ,_shadowing ++
         _tiWarnings ++
         _declarations_warnings ++
         _suspiciousErrors
        )
sem_MaybeDeclarations_Nothing :: (T_MaybeDeclarations)
sem_MaybeDeclarations_Nothing (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            MaybeDeclarations_Nothing
        (_oneLineTree) =
            Nothing
    in  (_lhs_assumptions,_lhs_betaUnique,_lhs_collectednotypedef,_lhs_constraints,_lhs_kindErrors,_lhs_miscerrors,_lhs_namesInScope,_oneLineTree,_self,0,_lhs_typeAnnotations,_lhs_warnings)
-- MaybeExports ------------------------------------------------
{-
   inherited attributes:
      consInScope          : Names
      modulesInScope       : Names
      namesInScope         : Names
      tyconsInScope        : Names

   chained attributes:

   synthesised attributes:
      exportErrors         : [Error]
      self                 : MaybeExports

-}
{-
   local variables for MaybeExports.Just:
      self

-}
{-
   local variables for MaybeExports.Nothing:
      self

-}
-- semantic domain
type T_MaybeExports = (Names) ->
                      (Names) ->
                      (Names) ->
                      (Names) ->
                      (([Error]),(MaybeExports))
-- cata
sem_MaybeExports :: (MaybeExports) ->
                    (T_MaybeExports)
sem_MaybeExports ((MaybeExports_Just (_exports))) =
    (sem_MaybeExports_Just ((sem_Exports (_exports))))
sem_MaybeExports ((MaybeExports_Nothing )) =
    (sem_MaybeExports_Nothing )
sem_MaybeExports_Just :: (T_Exports) ->
                         (T_MaybeExports)
sem_MaybeExports_Just (_exports) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope) =
    let (_self) =
            MaybeExports_Just _exports_self
        ( _exports_exportErrors,_exports_self) =
            (_exports (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope))
    in  (_exports_exportErrors,_self)
sem_MaybeExports_Nothing :: (T_MaybeExports)
sem_MaybeExports_Nothing (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScope) (_lhs_tyconsInScope) =
    let (_self) =
            MaybeExports_Nothing
    in  ([],_self)
-- MaybeExpression ---------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      beta                 : Tp
      constraints          : ConstraintSet
      oneLineTree          :  Maybe Tree 
      section              : Bool
      self                 : MaybeExpression
      size                 : Int

-}
{-
   local variables for MaybeExpression.Just:
      oneLineTree
      self

-}
{-
   local variables for MaybeExpression.Nothing:
      oneLineTree
      beta
      self

-}
-- semantic domain
type T_MaybeExpression = (Int) ->
                         ([(Name,Tps,Tp,Bool)]) ->
                         (ConstructorEnvironment) ->
                         ([Error]) ->
                         ([Error]) ->
                         (Tps) ->
                         (Names) ->
                         (TypeConstructorEnvironment) ->
                         ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                         ([Warning]) ->
                         ((Assumptions),(Tp),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),( Maybe Tree ),(Bool),(MaybeExpression),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_MaybeExpression :: (MaybeExpression) ->
                       (T_MaybeExpression)
sem_MaybeExpression ((MaybeExpression_Just (_expression))) =
    (sem_MaybeExpression_Just ((sem_Expression (_expression))))
sem_MaybeExpression ((MaybeExpression_Nothing )) =
    (sem_MaybeExpression_Nothing )
sem_MaybeExpression_Just :: (T_Expression) ->
                            (T_MaybeExpression)
sem_MaybeExpression_Just (_expression) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            MaybeExpression_Just _expression_self
        (_oneLineTree) =
            Just _expression_oneLineTree
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_oneLineTree,False,_self,_expression_size,_expression_typeAnnotations,_expression_warnings)
sem_MaybeExpression_Nothing :: (T_MaybeExpression)
sem_MaybeExpression_Nothing (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            MaybeExpression_Nothing
        (_beta) =
            TVar _lhs_betaUnique
        (_oneLineTree) =
            Nothing
    in  (empty,_beta,_lhs_betaUnique + 1,_lhs_collectednotypedef,ctEmpty,_lhs_kindErrors,_lhs_miscerrors,_oneLineTree,True,_self,0,_lhs_typeAnnotations,_lhs_warnings)
-- MaybeImportSpecification ------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : MaybeImportSpecification

-}
{-
   local variables for MaybeImportSpecification.Just:
      self

-}
{-
   local variables for MaybeImportSpecification.Nothing:
      self

-}
-- semantic domain
type T_MaybeImportSpecification = ((MaybeImportSpecification))
-- cata
sem_MaybeImportSpecification :: (MaybeImportSpecification) ->
                                (T_MaybeImportSpecification)
sem_MaybeImportSpecification ((MaybeImportSpecification_Just (_importspecification))) =
    (sem_MaybeImportSpecification_Just ((sem_ImportSpecification (_importspecification))))
sem_MaybeImportSpecification ((MaybeImportSpecification_Nothing )) =
    (sem_MaybeImportSpecification_Nothing )
sem_MaybeImportSpecification_Just :: (T_ImportSpecification) ->
                                     (T_MaybeImportSpecification)
sem_MaybeImportSpecification_Just (_importspecification) =
    let (_self) =
            MaybeImportSpecification_Just _importspecification_self
        ( _importspecification_self) =
            (_importspecification )
    in  (_self)
sem_MaybeImportSpecification_Nothing :: (T_MaybeImportSpecification)
sem_MaybeImportSpecification_Nothing  =
    let (_self) =
            MaybeImportSpecification_Nothing
    in  (_self)
-- MaybeInt ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : MaybeInt

-}
{-
   local variables for MaybeInt.Just:
      self

-}
{-
   local variables for MaybeInt.Nothing:
      self

-}
-- semantic domain
type T_MaybeInt = ((MaybeInt))
-- cata
sem_MaybeInt :: (MaybeInt) ->
                (T_MaybeInt)
sem_MaybeInt ((MaybeInt_Just (_int))) =
    (sem_MaybeInt_Just (_int))
sem_MaybeInt ((MaybeInt_Nothing )) =
    (sem_MaybeInt_Nothing )
sem_MaybeInt_Just :: (Int) ->
                     (T_MaybeInt)
sem_MaybeInt_Just (_int) =
    let (_self) =
            MaybeInt_Just _int
    in  (_self)
sem_MaybeInt_Nothing :: (T_MaybeInt)
sem_MaybeInt_Nothing  =
    let (_self) =
            MaybeInt_Nothing
    in  (_self)
-- MaybeName ---------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : MaybeName

-}
{-
   local variables for MaybeName.Just:
      self

-}
{-
   local variables for MaybeName.Nothing:
      self

-}
-- semantic domain
type T_MaybeName = ((MaybeName))
-- cata
sem_MaybeName :: (MaybeName) ->
                 (T_MaybeName)
sem_MaybeName ((MaybeName_Just (_name))) =
    (sem_MaybeName_Just ((sem_Name (_name))))
sem_MaybeName ((MaybeName_Nothing )) =
    (sem_MaybeName_Nothing )
sem_MaybeName_Just :: (T_Name) ->
                      (T_MaybeName)
sem_MaybeName_Just (_name) =
    let (_self) =
            MaybeName_Just _name_self
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (_self)
sem_MaybeName_Nothing :: (T_MaybeName)
sem_MaybeName_Nothing  =
    let (_self) =
            MaybeName_Nothing
    in  (_self)
-- MaybeNames --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : MaybeNames

-}
{-
   local variables for MaybeNames.Just:
      self

-}
{-
   local variables for MaybeNames.Nothing:
      self

-}
-- semantic domain
type T_MaybeNames = ((MaybeNames))
-- cata
sem_MaybeNames :: (MaybeNames) ->
                  (T_MaybeNames)
sem_MaybeNames ((MaybeNames_Just (_names))) =
    (sem_MaybeNames_Just ((sem_Names (_names))))
sem_MaybeNames ((MaybeNames_Nothing )) =
    (sem_MaybeNames_Nothing )
sem_MaybeNames_Just :: (T_Names) ->
                       (T_MaybeNames)
sem_MaybeNames_Just (_names) =
    let (_self) =
            MaybeNames_Just _names_self
        ( _names_isIdentifier,_names_isOperator,_names_isSpecial,_names_oneLineTree,_names_self) =
            (_names )
    in  (_self)
sem_MaybeNames_Nothing :: (T_MaybeNames)
sem_MaybeNames_Nothing  =
    let (_self) =
            MaybeNames_Nothing
    in  (_self)
-- Module ------------------------------------------------------
{-
   inherited attributes:
      baseName             : String
      importConstructorEnv : ConstructorEnvironment
      importTyConEnv       : TypeConstructorEnvironment
      importTypeEnv        : TypeEnvironment
      importTypeSynEnv     : TypeSynonymEnvironment
      strategy             : Strategy
      useTypeGraph         : Bool

   chained attributes:

   synthesised attributes:
      constructorenv       : ConstructorEnvironment
      debugIO              : IO ()
      errors               : Errors
      toplevelTypes        : TypeEnvironment
      typeErrors           : TypeErrors
      warnings             : Warnings

-}
{-
   local variables for Module.Module:
      exportErrors
      miscerrors
      fileName
      moduleName
      wrongFileNameErrors
      recursiveTypeSynonymErrors
      fixityButNoFunDefErrors
      correctFixities
      duplicatedFixities
      fixityErrors
      duplicatedDefinitions
      toplevelDefinitionErrors
      valueConstructorErrors
      typeConstructorErrors
      removedEntities
      topLevelErrors
      notypedef
      warnings
      kindErrors
      recursiveTypeSynonyms
      orderedTypeSynonyms
      duplicatedTypeConstructors
      tyconEnv
      duplicatedValueConstructors
      constructorenv
      toplevelTypes
      filteredBool
      typeErrors
      inferredgamma
      solveDebug
      solveErrors
      substitution
      betaUniqueAtTheEnd
      constraints
      debugIO
      self

-}
-- semantic domain
type T_Module = (String) ->
                (ConstructorEnvironment) ->
                (TypeConstructorEnvironment) ->
                (TypeEnvironment) ->
                (TypeSynonymEnvironment) ->
                (Strategy) ->
                (Bool) ->
                ((ConstructorEnvironment),(IO ()),(Errors),(TypeEnvironment),(TypeErrors),(Warnings))
-- cata
sem_Module :: (Module) ->
              (T_Module)
sem_Module ((Module_Module (_range) (_name) (_exports) (_body))) =
    (sem_Module_Module ((sem_Range (_range))) ((sem_MaybeName (_name))) ((sem_MaybeExports (_exports))) ((sem_Body (_body))))
sem_Module_Module :: (T_Range) ->
                     (T_MaybeName) ->
                     (T_MaybeExports) ->
                     (T_Body) ->
                     (T_Module)
sem_Module_Module (_range) (_name) (_exports) (_body) (_lhs_baseName) (_lhs_importConstructorEnv) (_lhs_importTyConEnv) (_lhs_importTypeEnv) (_lhs_importTypeSynEnv) (_lhs_strategy) (_lhs_useTypeGraph) =
    let (_self) =
            Module_Module _range_self _name_self _exports_self _body_self
        (_debugIO) =
            do putStrLn "--- Debug Info ---"
               putStrLn $ unlines $ map show _constraints
               putStrLn $ "type variables in constraint set: "++show _body_betaUnique
               putStrLn $ "type variables used while solving: "++show _betaUniqueAtTheEnd
               putStrLn $ "constraints in set: "++show (length _constraints)
               when _filteredBool (putStrLn ("WARNING: Filtered type errors"))
               _solveDebug
        (_constraints) =
            zipWith setPosition [0..] (ctRoot _body_constraints _lhs_strategy)
        ((_betaUniqueAtTheEnd,_substitution,_solveErrors,_solveDebug)) =
            (if _lhs_useTypeGraph then solveEquivalenceGroups else solveGreedy)
               _body_betaUnique [ SolveWithTypeSynonyms _orderedTypeSynonyms
                                , SolveWithTypeSignatures . map (\(n,ts) -> (show n,ts)) $
                                     (  toList _lhs_importTypeEnv
                                     ++ toList _lhs_importConstructorEnv
                                     ++ toList _body_derivedFunctions
                                     )
                                ]
                                _constraints
        (_inferredgamma) =
            mapElt ( generalizeAll . (_substitution |->) ) _body_environment
        ((_typeErrors,_filteredBool)) =
            let notGeneralEnoughErrors =
                   let f ((m,t),s2,info) = let m' = _substitution |-> m
                                               t' = _substitution |-> t
                                               s1 = generalize (ftv m') t'
                                           in NotGeneralEnough s1 s2 info
                       p (NotGeneralEnough s1 s2 info) =
                             not (genericInstanceOf _orderedTypeSynonyms s2 s1)
                          && unifiableTypeSchemes   _orderedTypeSynonyms s1 s2
                   in filter p (map f _body_typeAnnotations)
                op typeError (list,bool) =
                                           case checkTypeError _orderedTypeSynonyms typeError of
                                              Just t  -> (t:list,bool)
                                              Nothing -> (list,True)
            in foldr op (notGeneralEnoughErrors,False) (map makeTypeError _solveErrors)
        (_toplevelTypes) =
            _body_typeSignatures `combine` _inferredgamma
        ((_constructorenv,_duplicatedValueConstructors)) =
            onlyUniqueKeys ( valueConstructors _body_collectEnvironment `combine` _lhs_importConstructorEnv )
        ((_tyconEnv,_duplicatedTypeConstructors)) =
            onlyUniqueKeys ( typeConstructors _body_collectEnvironment `combine`
                             _lhs_importTyConEnv           `combine`
                             mapElt fst _lhs_importTypeSynEnv
                           )
        ((_orderedTypeSynonyms,_recursiveTypeSynonyms)) =
            checkRecursionTypeSynonyms (typeSynonyms _body_collectEnvironment `combine` _lhs_importTypeSynEnv)
        (_kindErrors) =
            _body_kindErrors
        (_warnings) =
            let
                nonToplevel (Unused Definition _ True) = False
                nonToplevel _                          = True
            in
                _notypedef ++ filter nonToplevel _body_warnings
        (_notypedef) =
            let f (n,ms,t,b) = let ms'    = _substitution |-> ms
                                   t'     = _substitution |-> t
                                   scheme = generalize (ftv ms') t'
                               in if null (ftv scheme)
                                    then [NoTypeDef n scheme b]
                                    else []
            in concatMap f _body_collectednotypedef
        (_topLevelErrors) =
            concat [ _typeConstructorErrors
                   , _valueConstructorErrors
                   , _toplevelDefinitionErrors
                   , _fixityErrors
                   , _fixityButNoFunDefErrors
                   , _recursiveTypeSynonymErrors
                   , _wrongFileNameErrors
                   ]
        (_removedEntities) =
            [ (name,TypeConstructor) | name:_ <- _duplicatedTypeConstructors  ] ++
            [ (name,Constructor    ) | name:_ <- _duplicatedValueConstructors ]
        (_typeConstructorErrors) =
            makeDuplicated TypeConstructor _duplicatedTypeConstructors
        (_valueConstructorErrors) =
            makeDuplicated Constructor _duplicatedValueConstructors
        (_toplevelDefinitionErrors) =
            makeDuplicated Definition _duplicatedDefinitions
        (_duplicatedDefinitions) =
            let list = concat [ _body_toplevelNames
                              , keys _body_derivedFunctions
                              , keys _lhs_importTypeEnv
                              ]
                derivedRanges = map getNameRange (keys _body_derivedFunctions)
            in filter (\ns -> length ns > 1 && any (`notElem` derivedRanges) (map getNameRange ns))
               (group (sort list))
        (_fixityErrors) =
            makeDuplicated Fixity _duplicatedFixities
        ((_duplicatedFixities,_correctFixities)) =
            let (xs,ys) = partition ((>1) . length) . group . sort $ _body_fixOps
            in (xs,map head ys)
        (_fixityButNoFunDefErrors) =
            let list = concat [ _body_toplevelNames
                              , keys _lhs_importTypeEnv
                              , keys (valueConstructors _body_collectEnvironment)
                              , keys _lhs_importConstructorEnv
                              ]
            in makeNoFunDef Fixity (filter (`notElem` list) _correctFixities) (nub list)
        (_recursiveTypeSynonymErrors) =
            map RecursiveTypeSynonyms _recursiveTypeSynonyms
        (_wrongFileNameErrors) =
            let moduleString = getNameName  _moduleName
                moduleRange  = getNameRange _moduleName
            in if moduleString == "" || _lhs_baseName == moduleString
              then []
              else [ WrongFileName _lhs_baseName moduleString moduleRange ]
        (_moduleName) =
            case _name_self of
               MaybeName_Just name -> name
               MaybeName_Nothing   -> Name_Identifier noRange [] ""
        (_fileName) =
            Name_Identifier noRange [] _lhs_baseName
        (_miscerrors) =
            _body_miscerrors
        (_exportErrors) =
            _exports_exportErrors
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _exports_exportErrors,_exports_self) =
            (_exports (keys _constructorenv) ((_moduleName : _fileName : _body_importedModules)) (_body_namesInScope) (keys _tyconEnv))
        ( _body_assumptions,_body_betaUnique,_body_collectEnvironment,_body_collectednotypedef,_body_constraints,_body_derivedFunctions,_body_environment,_body_fixOps,_body_importedModules,_body_kindErrors,_body_miscerrors,_body_namesInScope,_body_self,_body_size,_body_toplevelNames,_body_typeAnnotations,_body_typeSignatures,_body_warnings) =
            (_body (0)
                   (emptyEnvironment)
                   ([])
                   (_constructorenv)
                   (_lhs_importTypeEnv)
                   ([])
                   ([])
                   (concat [ keys _lhs_importTypeEnv
                           , keys _body_derivedFunctions
                           , keys _lhs_importConstructorEnv
                           , keys (valueConstructors _body_collectEnvironment)
                           ])
                   (_tyconEnv)
                   ([])
                   ([]))
    in  (_constructorenv
        ,_debugIO
        ,filter
            (filterRemovedNames _removedEntities)
            ( concat [ _exportErrors
                     , _miscerrors
                     , _kindErrors
                     , _topLevelErrors
                     ])
        ,_toplevelTypes
        ,_typeErrors
        ,_warnings
        )
-- Name --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      isIdentifier         : Bool
      isOperator           : Bool
      isSpecial            : Bool
      oneLineTree          : Tree
      self                 : Name

-}
{-
   local variables for Name.Identifier:
      oneLineTree
      self

-}
{-
   local variables for Name.Operator:
      oneLineTree
      self

-}
{-
   local variables for Name.Special:
      oneLineTree
      self

-}
-- semantic domain
type T_Name = ((Bool),(Bool),(Bool),(Tree),(Name))
-- cata
sem_Name :: (Name) ->
            (T_Name)
sem_Name ((Name_Identifier (_range) (_module) (_name))) =
    (sem_Name_Identifier ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name ((Name_Operator (_range) (_module) (_name))) =
    (sem_Name_Operator ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name ((Name_Special (_range) (_module) (_name))) =
    (sem_Name_Special ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name_Identifier :: (T_Range) ->
                       (T_Strings) ->
                       (String) ->
                       (T_Name)
sem_Name_Identifier (_range) (_module) (_name) =
    let (_self) =
            Name_Identifier _range_self _module_self _name
        (_oneLineTree) =
            Text _name
        ( _range_self) =
            (_range )
        ( _module_oneLineTree,_module_self) =
            (_module )
    in  (True,False,False,_oneLineTree,_self)
sem_Name_Operator :: (T_Range) ->
                     (T_Strings) ->
                     (String) ->
                     (T_Name)
sem_Name_Operator (_range) (_module) (_name) =
    let (_self) =
            Name_Operator _range_self _module_self _name
        (_oneLineTree) =
            Text _name
        ( _range_self) =
            (_range )
        ( _module_oneLineTree,_module_self) =
            (_module )
    in  (False,True,False,_oneLineTree,_self)
sem_Name_Special :: (T_Range) ->
                    (T_Strings) ->
                    (String) ->
                    (T_Name)
sem_Name_Special (_range) (_module) (_name) =
    let (_self) =
            Name_Special _range_self _module_self _name
        (_oneLineTree) =
            Text _name
        ( _range_self) =
            (_range )
        ( _module_oneLineTree,_module_self) =
            (_module )
    in  (False,False,True,_oneLineTree,_self)
-- Names -------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      isIdentifier         :  [Bool] 
      isOperator           :  [Bool] 
      isSpecial            :  [Bool] 
      oneLineTree          :  [ Tree] 
      self                 : Names

-}
{-
   local variables for Names.Cons:
      self

-}
{-
   local variables for Names.Nil:
      self

-}
-- semantic domain
type T_Names = (( [Bool] ),( [Bool] ),( [Bool] ),( [ Tree] ),(Names))
-- cata
sem_Names :: (Names) ->
             (T_Names)
sem_Names (list) =
    (foldr (sem_Names_Cons) (sem_Names_Nil) ((map sem_Name list)))
sem_Names_Cons :: (T_Name) ->
                  (T_Names) ->
                  (T_Names)
sem_Names_Cons (_hd) (_tl) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_isIdentifier,_hd_isOperator,_hd_isSpecial,_hd_oneLineTree,_hd_self) =
            (_hd )
        ( _tl_isIdentifier,_tl_isOperator,_tl_isSpecial,_tl_oneLineTree,_tl_self) =
            (_tl )
    in  (_hd_isIdentifier  :  _tl_isIdentifier,_hd_isOperator  :  _tl_isOperator,_hd_isSpecial  :  _tl_isSpecial,_hd_oneLineTree  :  _tl_oneLineTree,_self)
sem_Names_Nil :: (T_Names)
sem_Names_Nil  =
    let (_self) =
            []
    in  ([],[],[],[],_self)
-- Pattern -----------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      miscerrors           : [Error]
      warnings             : [Warning]

   synthesised attributes:
      beta                 : Tp
      constraints          : ConstraintSet
      environment          : PatternAssumptions
      oneLineTree          : Tree
      self                 : Pattern
      size                 : Int

-}
{-
   local variables for Pattern.As:
      oneLineTree
      size
      cinfo
      newcon
      beta
      self

-}
{-
   local variables for Pattern.Constructor:
      patConstructorErrors
      oneLineTree
      size
      cinfoApply
      cinfoConstructor
      conConstructor
      conApply
      maybetp
      betaCon
      beta
      self

-}
{-
   local variables for Pattern.InfixConstructor:
      patConstructorErrors
      oneLineTree
      size
      cinfoApply
      cinfoConstructor
      conConstructor
      conApply
      maybetp
      betaCon
      beta
      self

-}
{-
   local variables for Pattern.Irrefutable:
      oneLineTree
      self

-}
{-
   local variables for Pattern.List:
      oneLineTree
      cinfoElem
      cinfoResult
      zipf
      newcon
      beta'
      beta
      self

-}
{-
   local variables for Pattern.Literal:
      oneLineTree
      size
      cinfo
      beta
      self

-}
{-
   local variables for Pattern.Negate:
      oneLineTree
      size
      cinfoPat
      cinfoResult
      conPat
      conResult
      beta
      self

-}
{-
   local variables for Pattern.NegateFloat:
      oneLineTree
      size
      cinfoPat
      cinfoResult
      conPat
      conResult
      beta
      self

-}
{-
   local variables for Pattern.Parenthesized:
      oneLineTree
      self

-}
{-
   local variables for Pattern.Record:
      environment
      constraints
      beta
      oneLineTree
      size
      self

-}
{-
   local variables for Pattern.Successor:
      environment
      constraints
      beta
      oneLineTree
      size
      self

-}
{-
   local variables for Pattern.Tuple:
      oneLineTree
      cinfo
      newcon
      beta
      self

-}
{-
   local variables for Pattern.Variable:
      oneLineTree
      size
      beta
      self

-}
{-
   local variables for Pattern.Wildcard:
      oneLineTree
      size
      beta
      self

-}
-- semantic domain
type T_Pattern = (Int) ->
                 (ConstructorEnvironment) ->
                 ([Error]) ->
                 (Names) ->
                 (TypeConstructorEnvironment) ->
                 ([Warning]) ->
                 ((Tp),(Int),(ConstraintSet),(PatternAssumptions),([Error]),(Tree),(Pattern),(Int),([Warning]))
-- cata
sem_Pattern :: (Pattern) ->
               (T_Pattern)
sem_Pattern ((Pattern_As (_range) (_name) (_pattern))) =
    (sem_Pattern_As ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_Constructor (_range) (_name) (_patterns))) =
    (sem_Pattern_Constructor ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_InfixConstructor (_range) (_leftPattern) (_constructorOperator) (_rightPattern))) =
    (sem_Pattern_InfixConstructor ((sem_Range (_range))) ((sem_Pattern (_leftPattern))) ((sem_Name (_constructorOperator))) ((sem_Pattern (_rightPattern))))
sem_Pattern ((Pattern_Irrefutable (_range) (_pattern))) =
    (sem_Pattern_Irrefutable ((sem_Range (_range))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_List (_range) (_patterns))) =
    (sem_Pattern_List ((sem_Range (_range))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_Literal (_range) (_literal))) =
    (sem_Pattern_Literal ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Negate (_range) (_literal))) =
    (sem_Pattern_Negate ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_NegateFloat (_range) (_literal))) =
    (sem_Pattern_NegateFloat ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Parenthesized (_range) (_pattern))) =
    (sem_Pattern_Parenthesized ((sem_Range (_range))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_Record (_range) (_name) (_recordPatternBindings))) =
    (sem_Pattern_Record ((sem_Range (_range))) ((sem_Name (_name))) ((sem_RecordPatternBindings (_recordPatternBindings))))
sem_Pattern ((Pattern_Successor (_range) (_name) (_literal))) =
    (sem_Pattern_Successor ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Tuple (_range) (_patterns))) =
    (sem_Pattern_Tuple ((sem_Range (_range))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_Variable (_range) (_name))) =
    (sem_Pattern_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Pattern ((Pattern_Wildcard (_range))) =
    (sem_Pattern_Wildcard ((sem_Range (_range))))
sem_Pattern_As :: (T_Range) ->
                  (T_Name) ->
                  (T_Pattern) ->
                  (T_Pattern)
sem_Pattern_As (_range) (_name) (_pattern) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_As _range_self _name_self _pattern_self
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (_beta .==. _pattern_beta) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTPattern,AltAs,"")
                  , location   = "as pattern"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term (Text (show _name_self)) ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_size) =
            1 + _pattern_size
        (_oneLineTree) =
            Node
                [ Node [_name_oneLineTree]
                , Text "@"
                , Node [_pattern_oneLineTree]
                ]
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_pattern_oneLineTree,_pattern_self,_pattern_size,_pattern_warnings) =
            (_pattern (_lhs_betaUnique + 1) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
    in  (_beta
        ,_pattern_betaUnique
        ,_newcon .>.
         ctNode [ ctVariable _lhs_betaUnique
                , _pattern_constraints
                ]
        ,add _name_self _beta _pattern_environment
        ,_pattern_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_pattern_warnings
        )
sem_Pattern_Constructor :: (T_Range) ->
                           (T_Name) ->
                           (T_Patterns) ->
                           (T_Pattern)
sem_Pattern_Constructor (_range) (_name) (_patterns) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Constructor _range_self _name_self _patterns_self
        (_beta) =
            TVar (_lhs_betaUnique)
        (_betaCon) =
            TVar (_lhs_betaUnique + 1)
        (_maybetp) =
            lookupAL _name_self _lhs_constructorenv
        (_conApply) =
            [ (_betaCon .==. foldr (.->.) _beta _patterns_betas) _cinfoApply ]
        (_conConstructor) =
            case _maybetp of
               Nothing  -> []
               Just ctp -> [ (_betaCon .::. ctp) _cinfoConstructor ]
        (_cinfoConstructor) =
            \tppair ->
            CInfo { info       = (NTPattern,AltConstructor,"")
                  , location   = "pattern constructor"
                  , errorrange = getNameRange _name_self
                  , sources    = [ SD_Pat _oneLineTree ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint,HighlyTrusted
                                 , Size _size ]
                  }
        (_cinfoApply) =
            \tppair ->
            CInfo { info       = (NTPattern,AltConstructor,"apply")
                  , location   = if _patterns_numberOfPatterns == 0
                                   then "pattern constructor"
                                   else "pattern application"
                  , errorrange = _range_self
                  , sources    = if _patterns_numberOfPatterns == 0
                                   then [ SD_Pat _oneLineTree                            ]
                                   else [ SD_Pat _oneLineTree, SD_Term _name_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_size) =
            1 + _patterns_size
        (_oneLineTree) =
            Node
                ( ( if _name_isOperator then
                        \x ->
                        ( Text "("
                        : _name_oneLineTree
                        : Text ") "
                        : x
                        )
                    else
                        \x ->
                        ( _name_oneLineTree
                        : Text " "
                        : x
                        )
                  )
                      (sepBy (Text " ") _patterns_oneLineTree)
                )
        (_patConstructorErrors) =
            patternConstructorErrors _maybetp _name_self _lhs_namesInScope (length _patterns_self) (keys _lhs_tyconEnv)
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_environment,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_oneLineTree,_patterns_self,_patterns_size,_patterns_warnings) =
            (_patterns (_lhs_betaUnique + 2) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
    in  (_beta
        ,_patterns_betaUnique
        ,_conApply .>.
         ctNode [ ctSingle _conConstructor
                , ctNode _patterns_constraintslist
                ]
        ,_patterns_environment
        ,_patConstructorErrors ++ _patterns_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_patterns_warnings
        )
sem_Pattern_InfixConstructor :: (T_Range) ->
                                (T_Pattern) ->
                                (T_Name) ->
                                (T_Pattern) ->
                                (T_Pattern)
sem_Pattern_InfixConstructor (_range) (_leftPattern) (_constructorOperator) (_rightPattern) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_InfixConstructor _range_self _leftPattern_self _constructorOperator_self _rightPattern_self
        (_beta) =
            TVar _lhs_betaUnique
        (_betaCon) =
            TVar (_lhs_betaUnique + 1)
        (_maybetp) =
            lookupAL _constructorOperator_self _lhs_constructorenv
        (_conApply) =
            [ (_betaCon .==. _leftPattern_beta .->. _rightPattern_beta .->. _beta) _cinfoApply ]
        (_conConstructor) =
            case _maybetp of
               Nothing  -> []
               Just ctp -> [ (_betaCon .::. ctp) _cinfoConstructor ]
        (_cinfoConstructor) =
            \tppair ->
            CInfo { info       = (NTPattern,AltInfixConstructor,"")
                  , location   = "pattern constructor"
                  , errorrange = getNameRange _constructorOperator_self
                  , sources    = [ SD_Pat _constructorOperator_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , HighlyTrusted
                                 , Size _size ]
                  }
        (_cinfoApply) =
            \tppair ->
            CInfo { info       = (NTPattern,AltInfixConstructor,"apply")
                  , location   = "infix pattern application"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree, SD_Term (Text (show _constructorOperator_self))]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_size) =
            1 + _leftPattern_size + _rightPattern_size
        (_oneLineTree) =
            Node
                [ Node [_leftPattern_oneLineTree]
                , Text " "
                , Node [_constructorOperator_oneLineTree]
                , Text " "
                , Node [_rightPattern_oneLineTree]
                ]
        (_patConstructorErrors) =
            patternConstructorErrors _maybetp _constructorOperator_self _lhs_namesInScope 2 (keys _lhs_tyconEnv)
        ( _range_self) =
            (_range )
        ( _leftPattern_beta,_leftPattern_betaUnique,_leftPattern_constraints,_leftPattern_environment,_leftPattern_miscerrors,_leftPattern_oneLineTree,_leftPattern_self,_leftPattern_size,_leftPattern_warnings) =
            (_leftPattern (_lhs_betaUnique + 2) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _constructorOperator_isIdentifier,_constructorOperator_isOperator,_constructorOperator_isSpecial,_constructorOperator_oneLineTree,_constructorOperator_self) =
            (_constructorOperator )
        ( _rightPattern_beta,_rightPattern_betaUnique,_rightPattern_constraints,_rightPattern_environment,_rightPattern_miscerrors,_rightPattern_oneLineTree,_rightPattern_self,_rightPattern_size,_rightPattern_warnings) =
            (_rightPattern (_leftPattern_betaUnique) (_lhs_constructorenv) (_leftPattern_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_leftPattern_warnings))
    in  (_beta
        ,_rightPattern_betaUnique
        ,_conApply .>.
         ctNode [ ctSingle _conConstructor
                , _leftPattern_constraints
                , _rightPattern_constraints
                ]
        ,_leftPattern_environment `combine` _rightPattern_environment
        ,_patConstructorErrors ++ _rightPattern_miscerrors
        ,_oneLineTree
        ,_self
        ,_size
        ,_rightPattern_warnings
        )
sem_Pattern_Irrefutable :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Pattern)
sem_Pattern_Irrefutable (_range) (_pattern) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Irrefutable _range_self _pattern_self
        (_oneLineTree) =
            intErr "pattern" "irrefutable"
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_pattern_oneLineTree,_pattern_self,_pattern_size,_pattern_warnings) =
            (_pattern (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
    in  (_pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_oneLineTree,_self,_pattern_size,_pattern_warnings)
sem_Pattern_List :: (T_Range) ->
                    (T_Patterns) ->
                    (T_Pattern)
sem_Pattern_List (_range) (_patterns) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_List _range_self _patterns_self
        (_beta) =
            TVar _lhs_betaUnique
        (_beta') =
            TVar (_lhs_betaUnique + 1)
        (_newcon) =
            [ (listType _beta' .==. _beta) _cinfoResult ]
        (_zipf) =
            \tp txt ctree -> [ (tp .==. _beta') (_cinfoElem txt) ] .<. ctree
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTPattern,AltList,"result")
                  , location   = "pattern list"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _patterns_size ]
                  }
        (_cinfoElem) =
            \elemtext tppair ->
            CInfo { info       = (NTPattern,AltList,"element")
                  , location   = "element of pattern list"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree, SD_Term elemtext ]
                  , typepair   = tppair
                  , properties = [ UnifierTypeVariable (tpToInt _beta')
                                 , Size _patterns_size
                                 ]
                  }
        (_oneLineTree) =
            encloseSep "[" "," "]" _patterns_oneLineTree
        ( _range_self) =
            (_range )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_environment,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_oneLineTree,_patterns_self,_patterns_size,_patterns_warnings) =
            (_patterns (_lhs_betaUnique + 2) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
    in  (_beta
        ,_patterns_betaUnique
        ,_newcon .>.
         ctNode (zipWith3 _zipf _patterns_betas _patterns_oneLineTree _patterns_constraintslist)
        ,_patterns_environment
        ,_patterns_miscerrors
        ,_oneLineTree
        ,_self
        ,_patterns_size
        ,_patterns_warnings
        )
sem_Pattern_Literal :: (T_Range) ->
                       (T_Literal) ->
                       (T_Pattern)
sem_Pattern_Literal (_range) (_literal) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Literal _range_self _literal_self
        (_beta) =
            TVar _lhs_betaUnique
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTPattern,AltLiteral,"")
                  , location   = "literal pattern"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , HighlyTrusted
                                 , IsLiteral _literal_self
                                 , Size _size ]
                  }
        (_size) =
            1
        (_oneLineTree) =
            _literal_oneLineTree
        ( _range_self) =
            (_range )
        ( _literal_literalType,_literal_oneLineTree,_literal_self) =
            (_literal )
    in  (_beta,_lhs_betaUnique + 1,ctSingle [ (_literal_literalType .==. _beta) _cinfo ],empty,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_warnings)
sem_Pattern_Negate :: (T_Range) ->
                      (T_Literal) ->
                      (T_Pattern)
sem_Pattern_Negate (_range) (_literal) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Negate _range_self _literal_self
        (_beta) =
            TVar _lhs_betaUnique
        (_conResult) =
            [ (intType .==. _beta) _cinfoResult ]
        (_conPat) =
            [ (_literal_literalType .==. intType) _cinfoPat ]
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTPattern,AltNegate,"result")
                  , location   = "pattern negation"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _size
                                 , NegationResult ]
                  }
        (_cinfoPat) =
            \tppair ->
             CInfo { info       = (NTPattern,AltNegate,"pattern")
                  , location   = "pattern negation "
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree, SD_Term _literal_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size
                                 , Negation (tpToInt _beta) ]
                  }
        (_size) =
            1
        (_oneLineTree) =
            Node [ Text "-", _literal_oneLineTree ]
        ( _range_self) =
            (_range )
        ( _literal_literalType,_literal_oneLineTree,_literal_self) =
            (_literal )
    in  (_beta,_lhs_betaUnique + 1,_conResult .>. ctNode [ ctSingle _conPat ],empty,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_warnings)
sem_Pattern_NegateFloat :: (T_Range) ->
                           (T_Literal) ->
                           (T_Pattern)
sem_Pattern_NegateFloat (_range) (_literal) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_NegateFloat _range_self _literal_self
        (_beta) =
            TVar _lhs_betaUnique
        (_conResult) =
            [ (floatType .==. _beta) _cinfoResult ]
        (_conPat) =
            [ (_literal_literalType .==. floatType) _cinfoPat ]
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTPattern,AltNegateFloat,"result")
                  , location   = "pattern negation"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , Size _size
                                 , NegationResult ]
                  }
        (_cinfoPat) =
            \tppair ->
             CInfo { info       = (NTPattern,AltNegateFloat,"pattern")
                  , location   = "pattern negation "
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree, SD_Term _literal_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size
                                 , Negation (tpToInt _beta) ]
                  }
        (_size) =
            1
        (_oneLineTree) =
            Node [ Text "-." , _literal_oneLineTree ]
        ( _range_self) =
            (_range )
        ( _literal_literalType,_literal_oneLineTree,_literal_self) =
            (_literal )
    in  (_beta,_lhs_betaUnique + 1,_conResult .>. ctNode [ ctSingle _conPat ],empty,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_warnings)
sem_Pattern_Parenthesized :: (T_Range) ->
                             (T_Pattern) ->
                             (T_Pattern)
sem_Pattern_Parenthesized (_range) (_pattern) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Parenthesized _range_self _pattern_self
        (_oneLineTree) =
            parens _pattern_oneLineTree
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_pattern_oneLineTree,_pattern_self,_pattern_size,_pattern_warnings) =
            (_pattern (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
    in  (_pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_oneLineTree,_self,_pattern_size,_pattern_warnings)
sem_Pattern_Record :: (T_Range) ->
                      (T_Name) ->
                      (T_RecordPatternBindings) ->
                      (T_Pattern)
sem_Pattern_Record (_range) (_name) (_recordPatternBindings) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Record _range_self _name_self _recordPatternBindings_self
        (_size) =
            undefined
        (_oneLineTree) =
            intErr "pattern" "record"
        ((_beta,_constraints,_environment)) =
            internalError "PartialSyntax.ag" "n/a" "Pattern.Record"
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _recordPatternBindings_self) =
            (_recordPatternBindings (_lhs_namesInScope))
    in  (_beta,_lhs_betaUnique,_constraints,_environment,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_warnings)
sem_Pattern_Successor :: (T_Range) ->
                         (T_Name) ->
                         (T_Literal) ->
                         (T_Pattern)
sem_Pattern_Successor (_range) (_name) (_literal) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Successor _range_self _name_self _literal_self
        (_size) =
            1
        (_oneLineTree) =
            intErr "pattern" "successor"
        ((_beta,_constraints,_environment)) =
            internalError "PartialSyntax.ag" "n/a" "Pattern.Successor"
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _literal_literalType,_literal_oneLineTree,_literal_self) =
            (_literal )
    in  (_beta,_lhs_betaUnique,_constraints,_environment,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_warnings)
sem_Pattern_Tuple :: (T_Range) ->
                     (T_Patterns) ->
                     (T_Pattern)
sem_Pattern_Tuple (_range) (_patterns) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Tuple _range_self _patterns_self
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (tupleType _patterns_betas .==. _beta) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTPattern,AltTuple,"result")
                  , location   = "pattern tuple"
                  , errorrange = _range_self
                  , sources    = [ SD_Pat _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ FolkloreConstraint
                                 , IsTupleEdge
                                 , Size _patterns_size ]
                  }
        (_oneLineTree) =
            encloseSep "(" "," ")" _patterns_oneLineTree
        ( _range_self) =
            (_range )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_environment,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_oneLineTree,_patterns_self,_patterns_size,_patterns_warnings) =
            (_patterns (_lhs_betaUnique + 1) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
    in  (_beta,_patterns_betaUnique,_newcon .>. ctNode _patterns_constraintslist,_patterns_environment,_patterns_miscerrors,_oneLineTree,_self,_patterns_size,_patterns_warnings)
sem_Pattern_Variable :: (T_Range) ->
                        (T_Name) ->
                        (T_Pattern)
sem_Pattern_Variable (_range) (_name) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Variable _range_self _name_self
        (_beta) =
            TVar _lhs_betaUnique
        (_size) =
            1
        (_oneLineTree) =
            _name_oneLineTree
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (_beta,_lhs_betaUnique + 1,ctVariable _lhs_betaUnique,single _name_self _beta,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_warnings)
sem_Pattern_Wildcard :: (T_Range) ->
                        (T_Pattern)
sem_Pattern_Wildcard (_range) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            Pattern_Wildcard _range_self
        (_beta) =
            TVar _lhs_betaUnique
        (_size) =
            1
        (_oneLineTree) =
            Text "_"
        ( _range_self) =
            (_range )
    in  (_beta,_lhs_betaUnique + 1,ctEmpty,empty,_lhs_miscerrors,_oneLineTree,_self,_size,_lhs_warnings)
-- Patterns ----------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      miscerrors           : [Error]
      warnings             : [Warning]

   synthesised attributes:
      betas                : Tps
      constraintslist      : ConstraintSets
      environment          : PatternAssumptions
      numberOfPatterns     : Int
      oneLineTree          :  [ Tree] 
      self                 : Patterns
      size                 : Int

-}
{-
   local variables for Patterns.Cons:
      self

-}
{-
   local variables for Patterns.Nil:
      self

-}
-- semantic domain
type T_Patterns = (Int) ->
                  (ConstructorEnvironment) ->
                  ([Error]) ->
                  (Names) ->
                  (TypeConstructorEnvironment) ->
                  ([Warning]) ->
                  ((Int),(Tps),(ConstraintSets),(PatternAssumptions),([Error]),(Int),( [ Tree] ),(Patterns),(Int),([Warning]))
-- cata
sem_Patterns :: (Patterns) ->
                (T_Patterns)
sem_Patterns (list) =
    (foldr (sem_Patterns_Cons) (sem_Patterns_Nil) ((map sem_Pattern list)))
sem_Patterns_Cons :: (T_Pattern) ->
                     (T_Patterns) ->
                     (T_Patterns)
sem_Patterns_Cons (_hd) (_tl) (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_beta,_hd_betaUnique,_hd_constraints,_hd_environment,_hd_miscerrors,_hd_oneLineTree,_hd_self,_hd_size,_hd_warnings) =
            (_hd (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _tl_betaUnique,_tl_betas,_tl_constraintslist,_tl_environment,_tl_miscerrors,_tl_numberOfPatterns,_tl_oneLineTree,_tl_self,_tl_size,_tl_warnings) =
            (_tl (_hd_betaUnique) (_lhs_constructorenv) (_hd_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_hd_warnings))
    in  (_tl_betaUnique,_hd_beta : _tl_betas,_hd_constraints : _tl_constraintslist,_hd_environment `combine` _tl_environment,_tl_miscerrors,1 + _tl_numberOfPatterns,_hd_oneLineTree  :  _tl_oneLineTree,_self,_hd_size  +  _tl_size,_tl_warnings)
sem_Patterns_Nil :: (T_Patterns)
sem_Patterns_Nil (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_warnings) =
    let (_self) =
            []
    in  (_lhs_betaUnique,[],[],empty,_lhs_miscerrors,0,[],_self,0,_lhs_warnings)
-- Position ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : Position

-}
{-
   local variables for Position.Position:
      self

-}
{-
   local variables for Position.Unknown:
      self

-}
-- semantic domain
type T_Position = ((Position))
-- cata
sem_Position :: (Position) ->
                (T_Position)
sem_Position ((Position_Position (_filename) (_line) (_column))) =
    (sem_Position_Position (_filename) (_line) (_column))
sem_Position ((Position_Unknown )) =
    (sem_Position_Unknown )
sem_Position_Position :: (String) ->
                         (Int) ->
                         (Int) ->
                         (T_Position)
sem_Position_Position (_filename) (_line) (_column) =
    let (_self) =
            Position_Position _filename _line _column
    in  (_self)
sem_Position_Unknown :: (T_Position)
sem_Position_Unknown  =
    let (_self) =
            Position_Unknown
    in  (_self)
-- Qualifier ---------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      assumptions          : Assumptions
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      constraints          : ConstraintSet
      kindErrors           : [Error]
      miscerrors           : [Error]
      monos                : Tps
      namesInScope         : Names
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      oneLineTree          : Tree
      self                 : Qualifier
      size                 : Int

-}
{-
   local variables for Qualifier.Empty:
      oneLineTree
      size
      self

-}
{-
   local variables for Qualifier.Generator:
      shadowing
      namesInScope
      oneLineTree
      size
      cinfoBind
      cinfoResult
      newcon
      unused
      duplicated
      assumptions'
      csetBinds
      self

-}
{-
   local variables for Qualifier.Guard:
      oneLineTree
      cinfo
      newcon
      self

-}
{-
   local variables for Qualifier.Let:
      suspiciousErrors
      shadowing
      namesInScope
      assumptions
      environment
      collectDataTypes
      fixOps
      derivedFunctions
      typeSynonyms
      collectConstructorEnv
      collectEnvironment
      oneLineTree
      mybdggroup
      anns
      tiNoTypeDefinition
      tiWarnings
      tiErrors
      monoTable
      cset
      aset
      env
      self

-}
-- semantic domain
type T_Qualifier = (Assumptions) ->
                   (Int) ->
                   ([(Name,Tps,Tp,Bool)]) ->
                   (ConstraintSet) ->
                   (ConstructorEnvironment) ->
                   ([Error]) ->
                   ([Error]) ->
                   (Tps) ->
                   (Names) ->
                   (TypeConstructorEnvironment) ->
                   ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                   ([Warning]) ->
                   ((Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),(Tps),(Names),(Tree),(Qualifier),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_Qualifier :: (Qualifier) ->
                 (T_Qualifier)
sem_Qualifier ((Qualifier_Empty (_range))) =
    (sem_Qualifier_Empty ((sem_Range (_range))))
sem_Qualifier ((Qualifier_Generator (_range) (_pattern) (_expression))) =
    (sem_Qualifier_Generator ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_Expression (_expression))))
sem_Qualifier ((Qualifier_Guard (_range) (_guard))) =
    (sem_Qualifier_Guard ((sem_Range (_range))) ((sem_Expression (_guard))))
sem_Qualifier ((Qualifier_Let (_range) (_declarations))) =
    (sem_Qualifier_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))))
sem_Qualifier_Empty :: (T_Range) ->
                       (T_Qualifier)
sem_Qualifier_Empty (_range) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Qualifier_Empty _range_self
        (_size) =
            0
        (_oneLineTree) =
            Text ""
        ( _range_self) =
            (_range )
    in  (_lhs_assumptions,_lhs_betaUnique,_lhs_collectednotypedef,_lhs_constraints,_lhs_kindErrors,_lhs_miscerrors,_lhs_monos,_lhs_namesInScope,_oneLineTree,_self,_size,_lhs_typeAnnotations,_lhs_warnings)
sem_Qualifier_Generator :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Expression) ->
                           (T_Qualifier)
sem_Qualifier_Generator (_range) (_pattern) (_expression) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Qualifier_Generator _range_self _pattern_self _expression_self
        ((_csetBinds,_assumptions',_duplicated,_unused)) =
            (_pattern_environment !===! _lhs_assumptions) _cinfoBind
        (_newcon) =
            [ (_expression_beta .==. listType _pattern_beta) _cinfoResult ]
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTQualifier,AltGenerator,"result")
                  , location   = "generator"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _expression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_cinfoBind) =
            variableBindingCInfo (NTQualifier,AltGenerator)
        (_size) =
            _pattern_size + _expression_size
        (_oneLineTree) =
            Node [ _pattern_oneLineTree, Text "<-", _expression_oneLineTree ]
        ((_namesInScope,_shadowing)) =
            addToScope (keys _pattern_environment) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_pattern_oneLineTree,_pattern_self,_pattern_size,_pattern_warnings) =
            (_pattern (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_pattern_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_pattern_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_pattern_warnings))
    in  (_assumptions' `combine` _expression_assumptions
        ,_expression_betaUnique
        ,_expression_collectednotypedef
        ,_newcon .>. _csetBinds .>>.
         ctNode [ _pattern_constraints
                , _expression_constraints
                , _lhs_constraints
                ]
        ,_expression_kindErrors
        ,makeDuplicated Variable _duplicated ++ _expression_miscerrors
        ,elts _pattern_environment ++ _lhs_monos
        ,_namesInScope
        ,_oneLineTree
        ,_self
        ,_size
        ,_expression_typeAnnotations
        ,_shadowing ++
         makeUnused Variable _unused False ++
         _expression_warnings
        )
sem_Qualifier_Guard :: (T_Range) ->
                       (T_Expression) ->
                       (T_Qualifier)
sem_Qualifier_Guard (_range) (_guard) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Qualifier_Guard _range_self _guard_self
        (_newcon) =
            [ (_guard_beta .==. boolType) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTQualifier,AltGuard,"")
                  , location   = "boolean qualifier"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree  ]
                  , typepair   = tppair
                  , properties = [ Size _guard_size ]
                  }
        (_oneLineTree) =
            _guard_oneLineTree
        ( _range_self) =
            (_range )
        ( _guard_assumptions,_guard_beta,_guard_betaUnique,_guard_collectednotypedef,_guard_constraints,_guard_kindErrors,_guard_miscerrors,_guard_oneLineTree,_guard_self,_guard_size,_guard_typeAnnotations,_guard_warnings) =
            (_guard (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_lhs_assumptions `combine` _guard_assumptions
        ,_guard_betaUnique
        ,_guard_collectednotypedef
        ,ctNode [ _newcon .<. _guard_constraints
                , _lhs_constraints
                ]
        ,_guard_kindErrors
        ,_guard_miscerrors
        ,_lhs_monos
        ,_lhs_namesInScope
        ,_oneLineTree
        ,_self
        ,_guard_size
        ,_guard_typeAnnotations
        ,_guard_warnings
        )
sem_Qualifier_Let :: (T_Range) ->
                     (T_Declarations) ->
                     (T_Qualifier)
sem_Qualifier_Let (_range) (_declarations) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Qualifier_Let _range_self _declarations_self
        ((_env,_aset,_cset,_monoTable,_tiErrors,_tiWarnings,_tiNoTypeDefinition,_anns)) =
            performAndCheckBindingGroup False _lhs_monos _declarations_typeSignatures _mybdggroup _declarations_bindingGroups
        (_mybdggroup) =
            (empty,_lhs_assumptions,[_lhs_constraints])
        (_oneLineTree) =
            Node [ Text "let ", encloseSep "{" ";" "}" _declarations_oneLineTree ]
        ((_collectEnvironment,_collectConstructorEnv,_typeSynonyms,_derivedFunctions,_fixOps,_collectDataTypes)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Qualifier"
        ((_environment,_assumptions,_)) =
            concatBindingGroups _declarations_bindingGroups
        ((_namesInScope,_shadowing)) =
            addToScope (keys _environment) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ( _range_self) =
            (_range )
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectEnvironment,_declarations_collectednotypedef,_declarations_derivedFunctions,_declarations_fixOps,_declarations_kindErrors,_declarations_miscerrors,_declarations_oneLineTree,_declarations_previousWasAlsoFB,_declarations_self,_declarations_size,_declarations_suspiciousFBs,_declarations_typeAnnotations,_declarations_typeSignatures,_declarations_warnings) =
            (_declarations (_lhs_betaUnique) ([]) (_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_derivedFunctions) (_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_monoTable) (_lhs_monos) (_namesInScope) (Nothing) ([]) (_lhs_tyconEnv) (_lhs_typeAnnotations) (empty) (_lhs_warnings))
    in  (_aset
        ,_declarations_betaUnique
        ,_tiNoTypeDefinition ++ _declarations_collectednotypedef
        ,_cset
        ,_declarations_kindErrors
        ,_tiErrors ++ _declarations_miscerrors
        ,_lhs_monos
        ,_namesInScope
        ,_oneLineTree
        ,_self
        ,_declarations_size
        ,_anns ++ _declarations_typeAnnotations
        ,_shadowing ++
         _tiWarnings ++
         _declarations_warnings ++
         _suspiciousErrors
        )
-- Qualifiers --------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      assumptions          : Assumptions
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      constraints          : ConstraintSet
      kindErrors           : [Error]
      miscerrors           : [Error]
      monos                : Tps
      namesInScope         : Names
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      oneLineTree          :  [ Tree] 
      self                 : Qualifiers
      size                 : Int

-}
{-
   local variables for Qualifiers.Cons:
      self

-}
{-
   local variables for Qualifiers.Nil:
      self

-}
-- semantic domain
type T_Qualifiers = (Assumptions) ->
                    (Int) ->
                    ([(Name,Tps,Tp,Bool)]) ->
                    (ConstraintSet) ->
                    (ConstructorEnvironment) ->
                    ([Error]) ->
                    ([Error]) ->
                    (Tps) ->
                    (Names) ->
                    (TypeConstructorEnvironment) ->
                    ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                    ([Warning]) ->
                    ((Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),(Tps),(Names),( [ Tree] ),(Qualifiers),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_Qualifiers :: (Qualifiers) ->
                  (T_Qualifiers)
sem_Qualifiers (list) =
    (foldr (sem_Qualifiers_Cons) (sem_Qualifiers_Nil) ((map sem_Qualifier list)))
sem_Qualifiers_Cons :: (T_Qualifier) ->
                       (T_Qualifiers) ->
                       (T_Qualifiers)
sem_Qualifiers_Cons (_hd) (_tl) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_assumptions,_hd_betaUnique,_hd_collectednotypedef,_hd_constraints,_hd_kindErrors,_hd_miscerrors,_hd_monos,_hd_namesInScope,_hd_oneLineTree,_hd_self,_hd_size,_hd_typeAnnotations,_hd_warnings) =
            (_hd (_tl_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_tl_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _tl_assumptions,_tl_betaUnique,_tl_collectednotypedef,_tl_constraints,_tl_kindErrors,_tl_miscerrors,_tl_monos,_tl_namesInScope,_tl_oneLineTree,_tl_self,_tl_size,_tl_typeAnnotations,_tl_warnings) =
            (_tl (_lhs_assumptions) (_hd_betaUnique) (_hd_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_hd_kindErrors) (_hd_miscerrors) (_hd_monos) (_hd_namesInScope) (_lhs_tyconEnv) (_hd_typeAnnotations) (_hd_warnings))
    in  (_hd_assumptions,_tl_betaUnique,_tl_collectednotypedef,_hd_constraints,_tl_kindErrors,_tl_miscerrors,_tl_monos,_tl_namesInScope,_hd_oneLineTree  :  _tl_oneLineTree,_self,_hd_size  +  _tl_size,_tl_typeAnnotations,_tl_warnings)
sem_Qualifiers_Nil :: (T_Qualifiers)
sem_Qualifiers_Nil (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            []
    in  (_lhs_assumptions,_lhs_betaUnique,_lhs_collectednotypedef,_lhs_constraints,_lhs_kindErrors,_lhs_miscerrors,_lhs_monos,_lhs_namesInScope,[],_self,0,_lhs_typeAnnotations,_lhs_warnings)
-- Range -------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      self                 : Range

-}
{-
   local variables for Range.Range:
      self

-}
-- semantic domain
type T_Range = ((Range))
-- cata
sem_Range :: (Range) ->
             (T_Range)
sem_Range ((Range_Range (_start) (_stop))) =
    (sem_Range_Range ((sem_Position (_start))) ((sem_Position (_stop))))
sem_Range_Range :: (T_Position) ->
                   (T_Position) ->
                   (T_Range)
sem_Range_Range (_start) (_stop) =
    let (_self) =
            Range_Range _start_self _stop_self
        ( _start_self) =
            (_start )
        ( _stop_self) =
            (_stop )
    in  (_self)
-- RecordExpressionBinding -------------------------------------
{-
   inherited attributes:
      namesInScope         : Names

   chained attributes:
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]

   synthesised attributes:
      self                 : RecordExpressionBinding

-}
{-
   local variables for RecordExpressionBinding.RecordExpressionBinding:
      tyconEnv
      kindErrors
      warnings
      miscerrors
      betaUnique
      constructorenv
      monos
      self

-}
-- semantic domain
type T_RecordExpressionBinding = ([(Name,Tps,Tp,Bool)]) ->
                                 (Names) ->
                                 ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                                 (([(Name,Tps,Tp,Bool)]),(RecordExpressionBinding),([((Tps,Tp),TpScheme,(Tree,Range))]))
-- cata
sem_RecordExpressionBinding :: (RecordExpressionBinding) ->
                               (T_RecordExpressionBinding)
sem_RecordExpressionBinding ((RecordExpressionBinding_RecordExpressionBinding (_range) (_name) (_expression))) =
    (sem_RecordExpressionBinding_RecordExpressionBinding ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Expression (_expression))))
sem_RecordExpressionBinding_RecordExpressionBinding :: (T_Range) ->
                                                       (T_Name) ->
                                                       (T_Expression) ->
                                                       (T_RecordExpressionBinding)
sem_RecordExpressionBinding_RecordExpressionBinding (_range) (_name) (_expression) (_lhs_collectednotypedef) (_lhs_namesInScope) (_lhs_typeAnnotations) =
    let (_self) =
            RecordExpressionBinding_RecordExpressionBinding _range_self _name_self _expression_self
        ((_monos,_constructorenv,_betaUnique,_miscerrors,_warnings,_kindErrors,_tyconEnv)) =
            internalError "PartialSyntax.ag" "n/a" "RecordExpressionBinding.RecordExpressionBinding"
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_betaUnique) (_lhs_collectednotypedef) (_constructorenv) (_kindErrors) (_miscerrors) (_monos) (_lhs_namesInScope) (_tyconEnv) (_lhs_typeAnnotations) (_warnings))
    in  (_expression_collectednotypedef,_self,_expression_typeAnnotations)
-- RecordExpressionBindings ------------------------------------
{-
   inherited attributes:
      namesInScope         : Names

   chained attributes:
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]

   synthesised attributes:
      self                 : RecordExpressionBindings

-}
{-
   local variables for RecordExpressionBindings.Cons:
      self

-}
{-
   local variables for RecordExpressionBindings.Nil:
      self

-}
-- semantic domain
type T_RecordExpressionBindings = ([(Name,Tps,Tp,Bool)]) ->
                                  (Names) ->
                                  ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                                  (([(Name,Tps,Tp,Bool)]),(RecordExpressionBindings),([((Tps,Tp),TpScheme,(Tree,Range))]))
-- cata
sem_RecordExpressionBindings :: (RecordExpressionBindings) ->
                                (T_RecordExpressionBindings)
sem_RecordExpressionBindings (list) =
    (foldr (sem_RecordExpressionBindings_Cons) (sem_RecordExpressionBindings_Nil) ((map sem_RecordExpressionBinding list)))
sem_RecordExpressionBindings_Cons :: (T_RecordExpressionBinding) ->
                                     (T_RecordExpressionBindings) ->
                                     (T_RecordExpressionBindings)
sem_RecordExpressionBindings_Cons (_hd) (_tl) (_lhs_collectednotypedef) (_lhs_namesInScope) (_lhs_typeAnnotations) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_collectednotypedef,_hd_self,_hd_typeAnnotations) =
            (_hd (_lhs_collectednotypedef) (_lhs_namesInScope) (_lhs_typeAnnotations))
        ( _tl_collectednotypedef,_tl_self,_tl_typeAnnotations) =
            (_tl (_hd_collectednotypedef) (_lhs_namesInScope) (_hd_typeAnnotations))
    in  (_tl_collectednotypedef,_self,_tl_typeAnnotations)
sem_RecordExpressionBindings_Nil :: (T_RecordExpressionBindings)
sem_RecordExpressionBindings_Nil (_lhs_collectednotypedef) (_lhs_namesInScope) (_lhs_typeAnnotations) =
    let (_self) =
            []
    in  (_lhs_collectednotypedef,_self,_lhs_typeAnnotations)
-- RecordPatternBinding ----------------------------------------
{-
   inherited attributes:
      namesInScope         : Names

   chained attributes:

   synthesised attributes:
      self                 : RecordPatternBinding

-}
{-
   local variables for RecordPatternBinding.RecordPatternBinding:
      tyconEnv
      warnings
      miscerrors
      betaUnique
      constructorenv
      self

-}
-- semantic domain
type T_RecordPatternBinding = (Names) ->
                              ((RecordPatternBinding))
-- cata
sem_RecordPatternBinding :: (RecordPatternBinding) ->
                            (T_RecordPatternBinding)
sem_RecordPatternBinding ((RecordPatternBinding_RecordPatternBinding (_range) (_name) (_pattern))) =
    (sem_RecordPatternBinding_RecordPatternBinding ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Pattern (_pattern))))
sem_RecordPatternBinding_RecordPatternBinding :: (T_Range) ->
                                                 (T_Name) ->
                                                 (T_Pattern) ->
                                                 (T_RecordPatternBinding)
sem_RecordPatternBinding_RecordPatternBinding (_range) (_name) (_pattern) (_lhs_namesInScope) =
    let (_self) =
            RecordPatternBinding_RecordPatternBinding _range_self _name_self _pattern_self
        ((_constructorenv,_betaUnique,_miscerrors,_warnings,_tyconEnv)) =
            internalError "PartialSyntax.ag" "n/a" "RecordPatternBinding.RecordPatternBinding"
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_pattern_oneLineTree,_pattern_self,_pattern_size,_pattern_warnings) =
            (_pattern (_betaUnique) (_constructorenv) (_miscerrors) (_lhs_namesInScope) (_tyconEnv) (_warnings))
    in  (_self)
-- RecordPatternBindings ---------------------------------------
{-
   inherited attributes:
      namesInScope         : Names

   chained attributes:

   synthesised attributes:
      self                 : RecordPatternBindings

-}
{-
   local variables for RecordPatternBindings.Cons:
      self

-}
{-
   local variables for RecordPatternBindings.Nil:
      self

-}
-- semantic domain
type T_RecordPatternBindings = (Names) ->
                               ((RecordPatternBindings))
-- cata
sem_RecordPatternBindings :: (RecordPatternBindings) ->
                             (T_RecordPatternBindings)
sem_RecordPatternBindings (list) =
    (foldr (sem_RecordPatternBindings_Cons) (sem_RecordPatternBindings_Nil) ((map sem_RecordPatternBinding list)))
sem_RecordPatternBindings_Cons :: (T_RecordPatternBinding) ->
                                  (T_RecordPatternBindings) ->
                                  (T_RecordPatternBindings)
sem_RecordPatternBindings_Cons (_hd) (_tl) (_lhs_namesInScope) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self) =
            (_hd (_lhs_namesInScope))
        ( _tl_self) =
            (_tl (_lhs_namesInScope))
    in  (_self)
sem_RecordPatternBindings_Nil :: (T_RecordPatternBindings)
sem_RecordPatternBindings_Nil (_lhs_namesInScope) =
    let (_self) =
            []
    in  (_self)
-- RightHandSide -----------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      assumptions          : Assumptions
      beta                 : Tp
      constraints          : ConstraintSet
      oneLineTree          :  String -> Tree 
      self                 : RightHandSide
      size                 : Int

-}
{-
   local variables for RightHandSide.Expression:
      oneLineTree
      size
      self

-}
{-
   local variables for RightHandSide.Guarded:
      oneLineTree
      size
      beta
      self

-}
-- semantic domain
type T_RightHandSide = (Int) ->
                       ([(Name,Tps,Tp,Bool)]) ->
                       (ConstructorEnvironment) ->
                       ([Error]) ->
                       ([Error]) ->
                       (Tps) ->
                       (Names) ->
                       (TypeConstructorEnvironment) ->
                       ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                       ([Warning]) ->
                       ((Assumptions),(Tp),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),([Error]),([Error]),( String -> Tree ),(RightHandSide),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_RightHandSide :: (RightHandSide) ->
                     (T_RightHandSide)
sem_RightHandSide ((RightHandSide_Expression (_range) (_expression) (_where))) =
    (sem_RightHandSide_Expression ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_MaybeDeclarations (_where))))
sem_RightHandSide ((RightHandSide_Guarded (_range) (_guardedexpressions) (_where))) =
    (sem_RightHandSide_Guarded ((sem_Range (_range))) ((sem_GuardedExpressions (_guardedexpressions))) ((sem_MaybeDeclarations (_where))))
sem_RightHandSide_Expression :: (T_Range) ->
                                (T_Expression) ->
                                (T_MaybeDeclarations) ->
                                (T_RightHandSide)
sem_RightHandSide_Expression (_range) (_expression) (_where) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            RightHandSide_Expression _range_self _expression_self _where_self
        (_size) =
            _expression_size + _where_size
        (_oneLineTree) =
            \assign -> Node
                (  [ Text assign, _expression_oneLineTree ]
                ++ case _where_oneLineTree of
                    Nothing -> []
                    Just ds -> [ Text "where", encloseSep "{" ";" "}" ds ]
                )
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_where_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _where_assumptions,_where_betaUnique,_where_collectednotypedef,_where_constraints,_where_kindErrors,_where_miscerrors,_where_namesInScope,_where_oneLineTree,_where_self,_where_size,_where_typeAnnotations,_where_warnings) =
            (_where (_expression_assumptions) (_expression_betaUnique) (_expression_collectednotypedef) (_expression_constraints) (_lhs_constructorenv) (_expression_kindErrors) (_expression_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_expression_typeAnnotations) (_expression_warnings))
    in  (_where_assumptions,_expression_beta,_where_betaUnique,_where_collectednotypedef,_where_constraints,_where_kindErrors,_where_miscerrors,_oneLineTree,_self,_size,_where_typeAnnotations,_where_warnings)
sem_RightHandSide_Guarded :: (T_Range) ->
                             (T_GuardedExpressions) ->
                             (T_MaybeDeclarations) ->
                             (T_RightHandSide)
sem_RightHandSide_Guarded (_range) (_guardedexpressions) (_where) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            RightHandSide_Guarded _range_self _guardedexpressions_self _where_self
        (_beta) =
            TVar _lhs_betaUnique
        (_size) =
            _guardedexpressions_size + _where_size
        (_oneLineTree) =
            \assign -> Node
                (  [ punctuate " " [ ge assign | ge <- _guardedexpressions_oneLineTree ] ]
                ++ case _where_oneLineTree of
                    Nothing -> []
                    Just ds -> [ Text "where", encloseSep "{" ";" "}" ds ]
                )
        ( _range_self) =
            (_range )
        ( _guardedexpressions_assumptions,_guardedexpressions_betaUnique,_guardedexpressions_betas,_guardedexpressions_collectednotypedef,_guardedexpressions_constraintslist,_guardedexpressions_kindErrors,_guardedexpressions_miscerrors,_guardedexpressions_oneLineTree,_guardedexpressions_self,_guardedexpressions_size,_guardedexpressions_typeAnnotations,_guardedexpressions_warnings) =
            (_guardedexpressions (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_where_namesInScope) (_beta) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _where_assumptions,_where_betaUnique,_where_collectednotypedef,_where_constraints,_where_kindErrors,_where_miscerrors,_where_namesInScope,_where_oneLineTree,_where_self,_where_size,_where_typeAnnotations,_where_warnings) =
            (_where (_guardedexpressions_assumptions) (_guardedexpressions_betaUnique) (_guardedexpressions_collectednotypedef) (ctNode _guardedexpressions_constraintslist) (_lhs_constructorenv) (_guardedexpressions_kindErrors) (_guardedexpressions_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_guardedexpressions_typeAnnotations) (_guardedexpressions_warnings))
    in  (_where_assumptions,_beta,_where_betaUnique,_where_collectednotypedef,_where_constraints,_where_kindErrors,_where_miscerrors,_oneLineTree,_self,_size,_where_typeAnnotations,_where_warnings)
-- SimpleType --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      name                 : Name
      self                 : SimpleType
      typevariables        : Names

-}
{-
   local variables for SimpleType.SimpleType:
      self

-}
-- semantic domain
type T_SimpleType = ((Name),(SimpleType),(Names))
-- cata
sem_SimpleType :: (SimpleType) ->
                  (T_SimpleType)
sem_SimpleType ((SimpleType_SimpleType (_range) (_name) (_typevariables))) =
    (sem_SimpleType_SimpleType ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Names (_typevariables))))
sem_SimpleType_SimpleType :: (T_Range) ->
                             (T_Name) ->
                             (T_Names) ->
                             (T_SimpleType)
sem_SimpleType_SimpleType (_range) (_name) (_typevariables) =
    let (_self) =
            SimpleType_SimpleType _range_self _name_self _typevariables_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
        ( _typevariables_isIdentifier,_typevariables_isOperator,_typevariables_isSpecial,_typevariables_oneLineTree,_typevariables_self) =
            (_typevariables )
    in  (_name_self,_self,_typevariables_self)
-- Statement ---------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      assumptions          : Assumptions
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      constraints          : ConstraintSet
      generatorBeta        : Maybe Tp
      kindErrors           : [Error]
      miscerrors           : [Error]
      monos                : Tps
      namesInScope         : Names
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      oneLineTree          : Tree
      self                 : Statement
      size                 : Int

-}
{-
   local variables for Statement.Empty:
      oneLineTree
      size
      self

-}
{-
   local variables for Statement.Expression:
      oneLineTree
      cinfo
      newcon
      beta
      self

-}
{-
   local variables for Statement.Generator:
      shadowing
      namesInScope
      oneLineTree
      size
      cinfoBind
      cinfoResult
      newcon
      unused
      duplicated
      assumptions'
      csetBinds
      self

-}
{-
   local variables for Statement.Let:
      suspiciousErrors
      shadowing
      namesInScope
      assumptions
      environment
      collectDataTypes
      fixOps
      derivedFunctions
      typeSynonyms
      collectConstructorEnv
      collectEnvironment
      oneLineTree
      mybdggroup
      anns
      tiNoTypeDefinition
      tiWarnings
      tiErrors
      monoTable
      cset
      aset
      env
      self

-}
-- semantic domain
type T_Statement = (Assumptions) ->
                   (Int) ->
                   ([(Name,Tps,Tp,Bool)]) ->
                   (ConstraintSet) ->
                   (ConstructorEnvironment) ->
                   (Maybe Tp) ->
                   ([Error]) ->
                   ([Error]) ->
                   (Tps) ->
                   (Names) ->
                   (TypeConstructorEnvironment) ->
                   ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                   ([Warning]) ->
                   ((Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),(Maybe Tp),([Error]),([Error]),(Tps),(Names),(Tree),(Statement),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_Statement :: (Statement) ->
                 (T_Statement)
sem_Statement ((Statement_Empty (_range))) =
    (sem_Statement_Empty ((sem_Range (_range))))
sem_Statement ((Statement_Expression (_range) (_expression))) =
    (sem_Statement_Expression ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Statement ((Statement_Generator (_range) (_pattern) (_expression))) =
    (sem_Statement_Generator ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_Expression (_expression))))
sem_Statement ((Statement_Let (_range) (_declarations))) =
    (sem_Statement_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))))
sem_Statement_Empty :: (T_Range) ->
                       (T_Statement)
sem_Statement_Empty (_range) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_generatorBeta) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Statement_Empty _range_self
        (_size) =
            0
        (_oneLineTree) =
            Text ""
        ( _range_self) =
            (_range )
    in  (_lhs_assumptions,_lhs_betaUnique,_lhs_collectednotypedef,_lhs_constraints,_lhs_generatorBeta,_lhs_kindErrors,_lhs_miscerrors,_lhs_monos,_lhs_namesInScope,_oneLineTree,_self,_size,_lhs_typeAnnotations,_lhs_warnings)
sem_Statement_Expression :: (T_Range) ->
                            (T_Expression) ->
                            (T_Statement)
sem_Statement_Expression (_range) (_expression) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_generatorBeta) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Statement_Expression _range_self _expression_self
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (_expression_beta .==. ioType _beta) _cinfo ]
        (_cinfo) =
            \tppair ->
            CInfo { info       = (NTStatement,AltExpression,"")
                  , location   = "generator"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _expression_size ]
                  }
        (_oneLineTree) =
            _expression_oneLineTree
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_lhs_betaUnique + 1) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
    in  (_lhs_assumptions `combine` _expression_assumptions
        ,_expression_betaUnique
        ,_expression_collectednotypedef
        ,ctNode [ _newcon .<. _expression_constraints
                , _lhs_constraints
                ]
        ,Just _expression_beta
        ,_expression_kindErrors
        ,_expression_miscerrors
        ,_lhs_monos
        ,_lhs_namesInScope
        ,_oneLineTree
        ,_self
        ,_expression_size
        ,_expression_typeAnnotations
        ,_expression_warnings
        )
sem_Statement_Generator :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Expression) ->
                           (T_Statement)
sem_Statement_Generator (_range) (_pattern) (_expression) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_generatorBeta) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Statement_Generator _range_self _pattern_self _expression_self
        ((_csetBinds,_assumptions',_duplicated,_unused)) =
            (_pattern_environment !===! _lhs_assumptions) _cinfoBind
        (_newcon) =
            [ (_expression_beta .==. ioType _pattern_beta) _cinfoResult ]
        (_cinfoResult) =
            \tppair ->
            CInfo { info       = (NTStatement,AltGenerator,"result")
                  , location   = "generator"
                  , errorrange = _range_self
                  , sources    = [ SD_Expr _oneLineTree, SD_Term _expression_oneLineTree ]
                  , typepair   = tppair
                  , properties = [ Size _size ]
                  }
        (_cinfoBind) =
            variableBindingCInfo (NTStatement,AltGenerator)
        (_size) =
            _pattern_size + _expression_size
        (_oneLineTree) =
            Node [ _pattern_oneLineTree, Text "<-", _expression_oneLineTree ]
        ((_namesInScope,_shadowing)) =
            addToScope (keys _pattern_environment) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_environment,_pattern_miscerrors,_pattern_oneLineTree,_pattern_self,_pattern_size,_pattern_warnings) =
            (_pattern (_lhs_betaUnique) (_lhs_constructorenv) (_lhs_miscerrors) (_namesInScope) (_lhs_tyconEnv) (_lhs_warnings))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectednotypedef,_expression_constraints,_expression_kindErrors,_expression_miscerrors,_expression_oneLineTree,_expression_self,_expression_size,_expression_typeAnnotations,_expression_warnings) =
            (_expression (_pattern_betaUnique) (_lhs_collectednotypedef) (_lhs_constructorenv) (_lhs_kindErrors) (_pattern_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_pattern_warnings))
    in  (_assumptions' `combine` _expression_assumptions
        ,_expression_betaUnique
        ,_expression_collectednotypedef
        ,_newcon .>. _csetBinds .>>.
         ctNode [ _pattern_constraints
                , _expression_constraints
                , _lhs_constraints
                ]
        ,Nothing
        ,_expression_kindErrors
        ,makeDuplicated Variable _duplicated ++ _expression_miscerrors
        ,elts _pattern_environment ++ _lhs_monos
        ,_namesInScope
        ,_oneLineTree
        ,_self
        ,_size
        ,_expression_typeAnnotations
        ,_shadowing ++
         makeUnused Variable _unused False ++
         _expression_warnings
        )
sem_Statement_Let :: (T_Range) ->
                     (T_Declarations) ->
                     (T_Statement)
sem_Statement_Let (_range) (_declarations) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_generatorBeta) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            Statement_Let _range_self _declarations_self
        ((_env,_aset,_cset,_monoTable,_tiErrors,_tiWarnings,_tiNoTypeDefinition,_anns)) =
            performAndCheckBindingGroup False _lhs_monos _declarations_typeSignatures _mybdggroup _declarations_bindingGroups
        (_mybdggroup) =
            (empty,_lhs_assumptions,[_lhs_constraints])
        (_oneLineTree) =
            Node [ Text "let ", encloseSep "{" ";" "}" _declarations_oneLineTree ]
        ((_collectEnvironment,_collectConstructorEnv,_typeSynonyms,_derivedFunctions,_fixOps,_collectDataTypes)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Statement"
        ((_environment,_assumptions,_)) =
            concatBindingGroups _declarations_bindingGroups
        ((_namesInScope,_shadowing)) =
            addToScope (keys _environment) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ( _range_self) =
            (_range )
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectEnvironment,_declarations_collectednotypedef,_declarations_derivedFunctions,_declarations_fixOps,_declarations_kindErrors,_declarations_miscerrors,_declarations_oneLineTree,_declarations_previousWasAlsoFB,_declarations_self,_declarations_size,_declarations_suspiciousFBs,_declarations_typeAnnotations,_declarations_typeSignatures,_declarations_warnings) =
            (_declarations (_lhs_betaUnique) ([]) (_collectEnvironment) (_lhs_collectednotypedef) (_lhs_constructorenv) (_derivedFunctions) (_fixOps) (_lhs_kindErrors) (_lhs_miscerrors) (_monoTable) (_lhs_monos) (_namesInScope) (Nothing) ([]) (_lhs_tyconEnv) (_lhs_typeAnnotations) (empty) (_lhs_warnings))
    in  (_aset
        ,_declarations_betaUnique
        ,_tiNoTypeDefinition ++ _declarations_collectednotypedef
        ,_cset
        ,Nothing
        ,_declarations_kindErrors
        ,_tiErrors ++ _declarations_miscerrors
        ,_lhs_monos
        ,_namesInScope
        ,_oneLineTree
        ,_self
        ,_declarations_size
        ,_anns ++ _declarations_typeAnnotations
        ,_shadowing ++
         _tiWarnings ++
         _declarations_warnings ++
         _suspiciousErrors
        )
-- Statements --------------------------------------------------
{-
   inherited attributes:
      constructorenv       : ConstructorEnvironment
      monos                : Tps
      namesInScope         : Names
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:
      assumptions          : Assumptions
      betaUnique           : Int
      collectednotypedef   : [(Name,Tps,Tp,Bool)]
      constraints          : ConstraintSet
      generatorBeta        : Maybe Tp
      kindErrors           : [Error]
      miscerrors           : [Error]
      typeAnnotations      : [((Tps,Tp),TpScheme,(Tree,Range))]
      warnings             : [Warning]

   synthesised attributes:
      oneLineTree          :  [ Tree] 
      self                 : Statements
      size                 : Int

-}
{-
   local variables for Statements.Cons:
      self

-}
{-
   local variables for Statements.Nil:
      self

-}
-- semantic domain
type T_Statements = (Assumptions) ->
                    (Int) ->
                    ([(Name,Tps,Tp,Bool)]) ->
                    (ConstraintSet) ->
                    (ConstructorEnvironment) ->
                    (Maybe Tp) ->
                    ([Error]) ->
                    ([Error]) ->
                    (Tps) ->
                    (Names) ->
                    (TypeConstructorEnvironment) ->
                    ([((Tps,Tp),TpScheme,(Tree,Range))]) ->
                    ([Warning]) ->
                    ((Assumptions),(Int),([(Name,Tps,Tp,Bool)]),(ConstraintSet),(Maybe Tp),([Error]),([Error]),( [ Tree] ),(Statements),(Int),([((Tps,Tp),TpScheme,(Tree,Range))]),([Warning]))
-- cata
sem_Statements :: (Statements) ->
                  (T_Statements)
sem_Statements (list) =
    (foldr (sem_Statements_Cons) (sem_Statements_Nil) ((map sem_Statement list)))
sem_Statements_Cons :: (T_Statement) ->
                       (T_Statements) ->
                       (T_Statements)
sem_Statements_Cons (_hd) (_tl) (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_generatorBeta) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_assumptions,_hd_betaUnique,_hd_collectednotypedef,_hd_constraints,_hd_generatorBeta,_hd_kindErrors,_hd_miscerrors,_hd_monos,_hd_namesInScope,_hd_oneLineTree,_hd_self,_hd_size,_hd_typeAnnotations,_hd_warnings) =
            (_hd (_tl_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_tl_constraints) (_lhs_constructorenv) (_lhs_generatorBeta) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings))
        ( _tl_assumptions,_tl_betaUnique,_tl_collectednotypedef,_tl_constraints,_tl_generatorBeta,_tl_kindErrors,_tl_miscerrors,_tl_oneLineTree,_tl_self,_tl_size,_tl_typeAnnotations,_tl_warnings) =
            (_tl (_lhs_assumptions) (_hd_betaUnique) (_hd_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_hd_generatorBeta) (_hd_kindErrors) (_hd_miscerrors) (_hd_monos) (_hd_namesInScope) (_lhs_tyconEnv) (_hd_typeAnnotations) (_hd_warnings))
    in  (_hd_assumptions,_tl_betaUnique,_tl_collectednotypedef,_hd_constraints,_tl_generatorBeta,_tl_kindErrors,_tl_miscerrors,_hd_oneLineTree  :  _tl_oneLineTree,_self,_hd_size  +  _tl_size,_tl_typeAnnotations,_tl_warnings)
sem_Statements_Nil :: (T_Statements)
sem_Statements_Nil (_lhs_assumptions) (_lhs_betaUnique) (_lhs_collectednotypedef) (_lhs_constraints) (_lhs_constructorenv) (_lhs_generatorBeta) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_monos) (_lhs_namesInScope) (_lhs_tyconEnv) (_lhs_typeAnnotations) (_lhs_warnings) =
    let (_self) =
            []
    in  (_lhs_assumptions,_lhs_betaUnique,_lhs_collectednotypedef,_lhs_constraints,_lhs_generatorBeta,_lhs_kindErrors,_lhs_miscerrors,[],_self,0,_lhs_typeAnnotations,_lhs_warnings)
-- Strings -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      oneLineTree          :  [ Tree] 
      self                 : Strings

-}
{-
   local variables for Strings.Cons:
      self

-}
{-
   local variables for Strings.Nil:
      self

-}
-- semantic domain
type T_Strings = (( [ Tree] ),(Strings))
-- cata
sem_Strings :: (Strings) ->
               (T_Strings)
sem_Strings (list) =
    (foldr (sem_Strings_Cons) (sem_Strings_Nil) (list))
sem_Strings_Cons :: (String) ->
                    (T_Strings) ->
                    (T_Strings)
sem_Strings_Cons (_hd) (_tl) =
    let (_self) =
            _hd : _tl_self
        ( _tl_oneLineTree,_tl_self) =
            (_tl )
    in  (_tl_oneLineTree,_self)
sem_Strings_Nil :: (T_Strings)
sem_Strings_Nil  =
    let (_self) =
            []
    in  ([],_self)
-- Type --------------------------------------------------------
{-
   inherited attributes:
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:

   synthesised attributes:
      self                 : Type
      typevariables        : Names

-}
{-
   local variables for Type.Application:
      self

-}
{-
   local variables for Type.Constructor:
      self

-}
{-
   local variables for Type.Exists:
      self

-}
{-
   local variables for Type.Forall:
      self

-}
{-
   local variables for Type.Parenthesized:
      self

-}
{-
   local variables for Type.Qualified:
      self

-}
{-
   local variables for Type.Variable:
      self

-}
-- semantic domain
type T_Type = (TypeConstructorEnvironment) ->
              ((Type),(Names))
-- cata
sem_Type :: (Type) ->
            (T_Type)
sem_Type ((Type_Application (_range) (_prefix) (_function) (_arguments))) =
    (sem_Type_Application ((sem_Range (_range))) (_prefix) ((sem_Type (_function))) ((sem_Types (_arguments))))
sem_Type ((Type_Constructor (_range) (_name))) =
    (sem_Type_Constructor ((sem_Range (_range))) ((sem_Name (_name))))
sem_Type ((Type_Exists (_range) (_typevariables) (_type))) =
    (sem_Type_Exists ((sem_Range (_range))) ((sem_Names (_typevariables))) ((sem_Type (_type))))
sem_Type ((Type_Forall (_range) (_typevariables) (_type))) =
    (sem_Type_Forall ((sem_Range (_range))) ((sem_Names (_typevariables))) ((sem_Type (_type))))
sem_Type ((Type_Parenthesized (_range) (_type))) =
    (sem_Type_Parenthesized ((sem_Range (_range))) ((sem_Type (_type))))
sem_Type ((Type_Qualified (_range) (_context) (_type))) =
    (sem_Type_Qualified ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_Type (_type))))
sem_Type ((Type_Variable (_range) (_name))) =
    (sem_Type_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Type_Application :: (T_Range) ->
                        (Bool) ->
                        (T_Type) ->
                        (T_Types) ->
                        (T_Type)
sem_Type_Application (_range) (_prefix) (_function) (_arguments) (_lhs_tyconEnv) =
    let (_self) =
            Type_Application _range_self _prefix _function_self _arguments_self
        ( _range_self) =
            (_range )
        ( _function_self,_function_typevariables) =
            (_function (_lhs_tyconEnv))
        ( _arguments_self,_arguments_typevariables) =
            (_arguments (_lhs_tyconEnv))
    in  (_self,_function_typevariables  ++  _arguments_typevariables)
sem_Type_Constructor :: (T_Range) ->
                        (T_Name) ->
                        (T_Type)
sem_Type_Constructor (_range) (_name) (_lhs_tyconEnv) =
    let (_self) =
            Type_Constructor _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (_self,[])
sem_Type_Exists :: (T_Range) ->
                   (T_Names) ->
                   (T_Type) ->
                   (T_Type)
sem_Type_Exists (_range) (_typevariables) (_type) (_lhs_tyconEnv) =
    let (_self) =
            Type_Exists _range_self _typevariables_self _type_self
        ( _range_self) =
            (_range )
        ( _typevariables_isIdentifier,_typevariables_isOperator,_typevariables_isSpecial,_typevariables_oneLineTree,_typevariables_self) =
            (_typevariables )
        ( _type_self,_type_typevariables) =
            (_type (_lhs_tyconEnv))
    in  (_self,_type_typevariables)
sem_Type_Forall :: (T_Range) ->
                   (T_Names) ->
                   (T_Type) ->
                   (T_Type)
sem_Type_Forall (_range) (_typevariables) (_type) (_lhs_tyconEnv) =
    let (_self) =
            Type_Forall _range_self _typevariables_self _type_self
        ( _range_self) =
            (_range )
        ( _typevariables_isIdentifier,_typevariables_isOperator,_typevariables_isSpecial,_typevariables_oneLineTree,_typevariables_self) =
            (_typevariables )
        ( _type_self,_type_typevariables) =
            (_type (_lhs_tyconEnv))
    in  (_self,_type_typevariables)
sem_Type_Parenthesized :: (T_Range) ->
                          (T_Type) ->
                          (T_Type)
sem_Type_Parenthesized (_range) (_type) (_lhs_tyconEnv) =
    let (_self) =
            Type_Parenthesized _range_self _type_self
        ( _range_self) =
            (_range )
        ( _type_self,_type_typevariables) =
            (_type (_lhs_tyconEnv))
    in  (_self,_type_typevariables)
sem_Type_Qualified :: (T_Range) ->
                      (T_ContextItems) ->
                      (T_Type) ->
                      (T_Type)
sem_Type_Qualified (_range) (_context) (_type) (_lhs_tyconEnv) =
    let (_self) =
            Type_Qualified _range_self _context_self _type_self
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _type_self,_type_typevariables) =
            (_type (_lhs_tyconEnv))
    in  (_self,_type_typevariables)
sem_Type_Variable :: (T_Range) ->
                     (T_Name) ->
                     (T_Type)
sem_Type_Variable (_range) (_name) (_lhs_tyconEnv) =
    let (_self) =
            Type_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_isIdentifier,_name_isOperator,_name_isSpecial,_name_oneLineTree,_name_self) =
            (_name )
    in  (_self,[ _name_self ])
-- Types -------------------------------------------------------
{-
   inherited attributes:
      tyconEnv             : TypeConstructorEnvironment

   chained attributes:

   synthesised attributes:
      self                 : Types
      typevariables        : Names

-}
{-
   local variables for Types.Cons:
      self

-}
{-
   local variables for Types.Nil:
      self

-}
-- semantic domain
type T_Types = (TypeConstructorEnvironment) ->
               ((Types),(Names))
-- cata
sem_Types :: (Types) ->
             (T_Types)
sem_Types (list) =
    (foldr (sem_Types_Cons) (sem_Types_Nil) ((map sem_Type list)))
sem_Types_Cons :: (T_Type) ->
                  (T_Types) ->
                  (T_Types)
sem_Types_Cons (_hd) (_tl) (_lhs_tyconEnv) =
    let (_self) =
            _hd_self : _tl_self
        ( _hd_self,_hd_typevariables) =
            (_hd (_lhs_tyconEnv))
        ( _tl_self,_tl_typevariables) =
            (_tl (_lhs_tyconEnv))
    in  (_self,_hd_typevariables  ++  _tl_typevariables)
sem_Types_Nil :: (T_Types)
sem_Types_Nil (_lhs_tyconEnv) =
    let (_self) =
            []
    in  (_self,[])

