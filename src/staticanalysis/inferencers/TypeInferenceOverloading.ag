----------------------------------------------------------------------------------------
-- extra information for overloading (for code generation)

ATTR Declarations Declaration Expressions Expression Statements Statement
     Qualifiers Qualifier GuardedExpressions GuardedExpression 
     Alternatives Alternative FunctionBindings FunctionBinding
     RightHandSide MaybeDeclarations MaybeExpression RecordExpressionBinding
     RecordExpressionBindings Body
        [ availablePredicates   : Predicates 
        | dictionaryEnvironment : DictionaryEnvironment          
        | 
        ]
          
SEM Module
  | Module   body . availablePredicates   = []
                  . dictionaryEnvironment = emptyDictionaryEnvironment

SEM Declaration   
 
  | FunctionBindings
       loc      . declPredicates        = let scheme     = lookupWithDefaultFM @lhs.inferredTypes err (NameWithRange @bindings.name)
                                              predicates = qualifiers (unquantify scheme)
                                              err = internalError "TypeInferenceOverloading.ag" "n/a" "could not find type for function binding"
                                          in expandPredicates @lhs.orderedTypeSynonyms predicates      
       bindings . availablePredicates   = @declPredicates ++ @lhs.availablePredicates
       lhs      . dictionaryEnvironment = addForDeclaration @bindings.name @declPredicates @bindings.dictionaryEnvironment
       
  | PatternBinding 
       loc           . declPredicates = case @pattern.self of
                                          Pattern_Variable _ name -> 
                                             let scheme     = lookupWithDefaultFM @lhs.inferredTypes err (NameWithRange name)
                                                 predicates = qualifiers (unquantify scheme)
                                                 err = internalError "TypeInferenceOverloading.ag" "n/a" "could not find type for pattern binding"
                                             in Just (name, expandPredicates @lhs.orderedTypeSynonyms predicates)
                                          _                  -> Nothing
       righthandside . availablePredicates = case @declPredicates of
                                                Just (n, ps) -> ps ++ @lhs.availablePredicates
                                                Nothing      -> @lhs.availablePredicates
       lhs           . dictionaryEnvironment = case @declPredicates of
                                                  Just (n, ps) -> addForDeclaration n ps @righthandside.dictionaryEnvironment
                                                  Nothing      -> @righthandside.dictionaryEnvironment
       
SEM Expression 

  | Variable   lhs . dictionaryEnvironment = @newDEnv              
               loc . nameInScope           = case filter (@name.self==) @lhs.namesInScope of 
                                                [name] -> NameWithRange name
                                                _      -> internalError "TypeInferenceOverloading.ag" "n/a" "name not in scope"
                   . requiredDictionaries  = case lookupFM @lhs.inferredTypes @nameInScope of
                                                Nothing     -> [] -- if not in finitemap then this is bound by a monomorphic pattern variable
                                                Just scheme -> getRequiredDictionaries 
                                                                  (getOrderedTypeSynonyms @lhs.importEnvironment) 
                                                                  (@lhs.substitution |-> @beta)
                                                                  scheme
                   . (newDEnv, overloadingErrors) = resolveOverloading @name.self @lhs.availablePredicates @requiredDictionaries @lhs.dictionaryEnvironment 

  | Negate   lhs . dictionaryEnvironment = @newDEnv
             loc . localName             = setNameRange intUnaryMinusName @range.self
                 . negateTypeScheme      = case lookupFM (typeEnvironment @lhs.importEnvironment) @localName of 
                                              Just scheme -> scheme
                                              Nothing     -> internalError "TypeInferenceOverloading.ag" "n/a" "type of negate unknown"
                 . requiredDictionaries  = getRequiredDictionaries 
                                              (getOrderedTypeSynonyms @lhs.importEnvironment) 
                                              (@lhs.substitution |-> (@expression.beta .->. @beta))
                                              @negateTypeScheme
                 . (newDEnv, overloadingErrors) = resolveOverloading @localName @lhs.availablePredicates @requiredDictionaries @expression.dictionaryEnvironment                                              
             

{         
getRequiredDictionaries :: OrderedTypeSynonyms -> Tp -> TpScheme -> Predicates
getRequiredDictionaries synonyms useType defType = 
   let i  = nextFTV useType
       (instantiatedPreds, instantiatedType) = split (snd (instantiate i defType))
   in -- one-way unification is necessary!
      case mguWithTypeSynonyms synonyms instantiatedType useType of
         Left _ -> internalError "TypeInferenceOverloading.ag" "getRequiredDictionaries" "no unification"
         Right (_, sub) -> 
            expandPredicates synonyms (sub |-> instantiatedPreds)
            
resolveOverloading :: Name -> Predicates -> Predicates -> DictionaryEnvironment -> (DictionaryEnvironment, Predicates {- errors -})
resolveOverloading name availablePredicates predicates dEnv = 
   let maybeTrees = map (makeDictionaryTree availablePredicates) predicates
   in if all isJust maybeTrees
        then (addForVariable name (map fromJust maybeTrees) dEnv, [])
        else (dEnv, [ predicate | (predicate, mt) <- zip predicates maybeTrees, isNothing mt ])

expandPredicates :: OrderedTypeSynonyms -> Predicates -> Predicates
expandPredicates synonyms = map (expandPredicate synonyms)

expandPredicate :: OrderedTypeSynonyms -> Predicate -> Predicate
expandPredicate (_, synonyms) (Predicate className tp) = Predicate className (expandType synonyms tp)
}
