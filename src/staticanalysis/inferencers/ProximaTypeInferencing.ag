-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- The type inferencer with extra attributes for Proxima
-- (Proxima is an editor developed by Martijn Schrage)
--
-- Proxima needs an extra synthesized attribute for top level Module.
-- typeEnvPrx:TpScheme - an environment containing the types for all subterms in the module
--
-------------------------------------------------------------------------------

INCLUDE "TypeInferencing.ag"

-- uuagc -mscfr --self ProximaTypeInferencing.ag

-- TODO: add remaining rules for typeEnvPrx attribute

ATTR
    Module
    Body
    
    Declaration
   
    FunctionBindings
    FunctionBinding
    RightHandSide
    
    Expressions
    MaybeExpression
    Expression
    Declarations
    Alternatives
    Alternative
    
    Patterns
    Pattern
    Name
    [
    |
    | typeEnvPrx        : { [ (Range, TpScheme) ] }
    ]

SEM Declarations
    | Cons               loc.typeEnvPrx = @hd.typeEnvPrx++ @tl.typeEnvPrx
    | Nil                loc.typeEnvPrx = []
   
SEM FunctionBindings
    | Cons               loc.typeEnvPrx = @hd.typeEnvPrx++ @tl.typeEnvPrx
    | Nil                loc.typeEnvPrx = []

SEM Alternatives
    | Cons               loc.typeEnvPrx = @hd.typeEnvPrx++ @tl.typeEnvPrx
    | Nil                loc.typeEnvPrx = []

SEM Patterns
    | Cons               loc.typeEnvPrx = @hd.typeEnvPrx++ @tl.typeEnvPrx
    | Nil                loc.typeEnvPrx = []
    
SEM Expressions
    | Cons               loc.typeEnvPrx = @hd.typeEnvPrx++ @tl.typeEnvPrx
    | Nil                loc.typeEnvPrx = []

SEM MaybeExpression
    | Just               loc.typeEnvPrx = @expression.typeEnvPrx
    | Nothing            loc.typeEnvPrx = []

SEM Expression                                   {- *** -}
    | Literal            loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
    --  range                    : Range
    --  literal                  : Literal
    | Variable           loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @name.typeEnvPrx
    --  range                    : Range
    --  name                     : Name
    | Constructor        loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @name.typeEnvPrx
    --  range                    : Range
    --  name                     : Name
    | Parenthesized      loc.typeEnvPrx = [] --[(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @expression.typeEnvPrx
    --  range                    : Range
    --  expression               : Expression
    | NormalApplication  loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @function.typeEnvPrx ++ @arguments.typeEnvPrx 
    --  range                    : Range
    --  function                 : Expression
    --  arguments                : Expressions
    | InfixApplication   loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @leftExpression.typeEnvPrx ++ @rightExpression.typeEnvPrx
    --  range                    : Range
    --  leftExpression           : MaybeExpression
    --  operator                 : Expression
    --  rightExpression          : MaybeExpression
    | If                 loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @guardExpression.typeEnvPrx ++ @thenExpression.typeEnvPrx ++ @elseExpression.typeEnvPrx
    --  range                    : Range
    --  guardExpression          : Expression
    --  thenExpression           : Expression
    --  elseExpression           : Expression
    | Lambda             loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @patterns.typeEnvPrx ++ @expression.typeEnvPrx
    --  range                    : Range
    --  patterns                 : Patterns
    --  expression               : Expression
    | Case               loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @expression.typeEnvPrx ++ @alternatives.typeEnvPrx
    --  range                    : Range
    --  expression               : Expression
    --  alternatives             : Alternatives
    | Let                loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @declarations.typeEnvPrx ++ @expression.typeEnvPrx
    --  range                    : Range
    --  declarations             : Declarations
    --  expression               : Expression
    | Do                 loc.typeEnvPrx = []
    --  range                    : Range
    --  statements               : Statements
    | List               loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @expressions.typeEnvPrx
    --  range                    : Range
    --  expressions              : Expressions
    | Tuple              loc.typeEnvPrx = [(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
                                          ++ @expressions.typeEnvPrx
    --  range                    : Range
    --  expressions              : Expressions
    | Comprehension      loc.typeEnvPrx = []
    --  range                    : Range
    --  expression               : Expression
    --  qualifiers               : Qualifiers
    | Typed              loc.typeEnvPrx = []
    --  range                    : Range
    --  expression               : Expression
    --  type                     : Type
    | RecordConstruction loc.typeEnvPrx = []
    --  range                    : Range
    --  name                     : Name
    --  recordExpressionBindings : RecordExpressionBindings
    | RecordUpdate       loc.typeEnvPrx = []
    --  range                    : Range
    --  expression               : Expression
    --  recordExpressionBindings : RecordExpressionBindings
    | Enum               loc.typeEnvPrx = []
    --  range                    : Range
    --  from                     : Expression
    --  then                     : MaybeExpression
    --  to                       : MaybeExpression
    | Negate             loc.typeEnvPrx = []
    | NegateFloat        loc.typeEnvPrx = []
    --  range                    : Range
    --  expression               : Expression




SEM Alternative
    | Alternative       loc.typeEnvPrx = -- (@range, generalize' @lhs.predicates (@lhs.substitution |-> @beta))
                                          @pattern.typeEnvPrx ++ @righthandside.typeEnvPrx
    --  range                    : Range
    --  pattern                  : Pattern
    --  righthandside            : RightHandSide
    | Empty             loc.typeEnvPrx = []
    --  range                    : Range


SEM Pattern
    | Literal               loc.typeEnvPrx = []
    --  range                    : Range
    --  literal                  : Literal
    | Variable              loc.typeEnvPrx = [] -- (@range,generalize' @predicates (@lhs.substitution |-> @beta))] 
    --  range                    : Range
    --  name                     : Name
    | Constructor           loc.typeEnvPrx = [] 
    --  range                    : Range
    --  name                     : Name
    --  patterns                 : Patterns
    | Parenthesized         loc.typeEnvPrx = [] 
    --  range                    : Range
    --  pattern                  : Pattern
    | InfixConstructor      loc.typeEnvPrx = [] 
    --  range                    : Range
    --  leftPattern              : Pattern
    --  constructorOperator      : Name
    --  rightPattern             : Pattern
    | List                  loc.typeEnvPrx = [] 
    --  range                    : Range
    --  patterns                 : Patterns
    | Tuple                 loc.typeEnvPrx = [] 
    --  range                    : Range
    --  patterns                 : Patterns
    | Record                loc.typeEnvPrx = [] 
    --  range                    : Range
    --  name                     : Name
    --  recordPatternBindings    : RecordPatternBindings
    | Negate                loc.typeEnvPrx = [] 
    --  range                    : Range
    --  literal                  : Literal -- only numbers allowed here
    | NegateFloat           loc.typeEnvPrx = [] 
    --  range                    : Range
    --  literal                  : Literal -- only numbers allowed here
    | As                    loc.typeEnvPrx = [] 
    --  range                    : Range
    --  name                     : Name
    --  pattern                  : Pattern
    | Wildcard              loc.typeEnvPrx = [] 
    --  range                    : Range
    | Irrefutable           loc.typeEnvPrx = [] 
    --  range                    : Range
    --  pattern                  : Pattern
    | Successor             loc.typeEnvPrx = [] 
    --  range                    : Range
    --  name                     : Name
    --  literal                  : Literal -- only integers allowed here

SEM Name                                         {- *** -}
    | Identifier               loc.typeEnvPrx = [] --[(@range,generalize' @lhs.predicates (@lhs.substitution |-> @beta))]
    --  range                    : Range
    --  module                   : Strings
    --  name                     : String
    | Operator                 loc.typeEnvPrx = []
    --  range                    : Range
    --  module                   : Strings
    --  name                     : String
    | Special                  loc.typeEnvPrx = []
    --  range                    : Range
    --  module                   : Strings
    --  name                     : String

{
generalize' :: Predicates -> Tp -> TpScheme
generalize' predicates tp = generalizeAll (predicates .=>. tp)
}


