-- Collect all type variables 

ATTR UserStatement UserStatements TypeRule Judgement SimpleJudgement SimpleJudgements 
     Type Types [ | | typevariables USE { ++ } { [] } : Names ]

SEM Type
  | Variable  lhs . typevariables = [ @name.self ]

SEM TypingStrategy
  | TypingStrategy
       loc . uniqueTypevariables = nub (@typerule.typevariables ++ @statements.typevariables)
  
ATTR UserStatement UserStatements TypeRule Judgement SimpleJudgement SimpleJudgements 
     [ nameMap : {[(Name,Tp)]} | | ]
     
-- Construct type constraints from the constraint-set     

ATTR UserStatement UserStatements [ | userConstraints : {TypeConstraints HeliumConstraintInfo} | ]

SEM TypingStrategy 
  | TypingStrategy
       statements . userConstraints = []
       
SEM UserStatement
  | Constraint 
       lhs . userConstraints = @newConstraint : @lhs.userConstraints
       loc . newConstraint   = (makeTpFromType @lhs.nameMap @leftType.self .==. makeTpFromType @lhs.nameMap @rightType.self) @lhs.standardConstraintInfo
                     
-- Collect judgements in typerule

ATTR SimpleJudgement SimpleJudgements TypeRule [ | simpleJudgements:{[(String,Tp)]} | ]

SEM TypingStrategy
  | TypingStrategy
       typerule . simpleJudgements = []

SEM SimpleJudgement
  | SimpleJudgement   
       lhs . simpleJudgements = @newJudgement : @lhs.simpleJudgements       
       loc . newJudgement  = (show @name.self, makeTpFromType @lhs.nameMap @type.self)
                
ATTR Judgement TypeRule [ | | conclusionType : Tp ]

SEM Judgement
  | Judgement   lhs . conclusionType = makeTpFromType @lhs.nameMap @type.self

-- Collecting MetaVariableConstraints

ATTR UserStatements UserStatement [ | metaVariableConstraintNames : Names | ]

SEM TypingStrategy
  | TypingStrategy
       statements . metaVariableConstraintNames = []
       
SEM UserStatement    
  | MetaVariableConstraints
       lhs . metaVariableConstraintNames = @name.self : @lhs.metaVariableConstraintNames
       
SEM TypingStrategy 
  | TypingStrategy  
       loc . allMetaVariables     = map fst @typerule.simpleJudgements 
           . constraintsNotExplicit = filter (`notElem` (map show @statements.metaVariableConstraintNames)) @allMetaVariables       

ATTR UserStatements UserStatement [ standardConstraintInfo : {((Tp, Tp) -> HeliumConstraintInfo)} 
                                    attributeTable : {[((String, Maybe String), MessageBlock)]} | | ]

SEM TypingStrategy
  | TypingStrategy
       loc . standardConstraintInfo = standardConstraintInfo
           . attributeTable         = [] 
{     
standardConstraintInfo :: (Tp, Tp) -> HeliumConstraintInfo
standardConstraintInfo tppair =
   CInfo { location   = "Typing Strategy"
         , sources    = (UHA_Decls [], Nothing)
         , typepair   = tppair
         , properties = [ ]
         }      
}                                                                       
