INCLUDE "../../../syntax/UHA_Syntax.ag"
INCLUDE "TS_Syntax.ag"
INCLUDE "TS_Collect.ag"
INCLUDE "../../../syntax/UHA_Self.ag"

imports {
import TS_Syntax
import ConstraintTree
import Constraints
import HeliumConstraintInfo
import TypeGraphConstraintInfo
import Types
import List
import TypeConversion
import UHA_Utils (noRange)
import Utils (internalError)
import OneLiner
}

{
type MetaVariableTable info = [(String, (ConstraintSet, info))]
type MetaVariableInfo = (Tp, Tree, Range)

applyTypingStrategy :: TypingStrategy -> (ConstraintSet, MetaVariableInfo) -> MetaVariableTable MetaVariableInfo -> Int -> (ConstraintSet, IO (), Int)
applyTypingStrategy = sem_TypingStrategy
}

ATTR TypingStrategy [ localInfo         : {(ConstraintSet, MetaVariableInfo)}
                      metaVariableTable : {MetaVariableTable MetaVariableInfo}  
                    | unique            : Int 
                    | constraintSet     : ConstraintSet
                      debugIO           : {IO ()}
                    ] 
            
SEM TypingStrategy 
  | TypingStrategy     
       lhs . constraintSet = ctNode (reverse @statements.collectConstraints)
           . unique        = length @uniqueTypevariables + @lhs.unique
           . debugIO       = putStrLn ("applying typing strategy " ++ @name)
       loc . nameMap = zip @uniqueTypevariables (map TVar [@lhs.unique..])

-- Construct type constraints from the typing rule

SEM TypingStrategy 
  | TypingStrategy
       loc . typeruleConstraints = [ (tp1 .==. tp2) (@cinfo s1 mvinfo)
                                   | (s1,(_,mvinfo@(tp1,_,_))) <- ("?toplevel?", @lhs.localInfo) : @lhs.metaVariableTable 
                                   , (s2,tp2)                  <- ("?toplevel?", @typerule.conclusionType) : @typerule.simpleJudgements
                                   , s1 == s2
                                   ]
           . cinfo = \string (tp1,tree,range) tppair ->
                     CInfo { info       = (NTBody, AltBody, "Typing Strategy, meta-typevariable " ++ string)
                           , location   = "Typing Strategy"
                           , errorrange = noRange
                           , sources    = [ ]
                           , typepair   = tppair
                           , properties = [ HighlyTrusted ] 
                           }

-- build the constraint tree

ATTR UserStatements UserStatement [ metavarConstraints : {[(String,ConstraintTree HeliumConstraintInfo)]}
                                  | collectConstraints : {ConstraintTrees HeliumConstraintInfo} 
                                    currrentPhase      : {Maybe Int} 
                                  | 
                                  ]

SEM TypingStrategy 
  | TypingStrategy
       statements    . collectConstraints = ctSingle (reverse @typeruleConstraints) : 
                                            reverse [ cs 
                                                    | (s,(cs,_)) <- @lhs.metaVariableTable
                                                    , s /= "?toplevel?" 
                                                    , s `elem` @constraintsNotExplicit
                                                    ] 
                     . currrentPhase      = Nothing
                     . metavarConstraints = [ (s,cs) 
                                            | (s,(cs,_)) <- @lhs.metaVariableTable
                                            ]

SEM UserStatement
  | Constraint
       lhs . collectConstraints = case @lhs.currrentPhase of
                                     Just phase -> ctPhased phase [ @newConstraint ] : @lhs.collectConstraints
                                     Nothing    -> ctSingle       [ @newConstraint ] : @lhs.collectConstraints
       
  | MetaVariableConstraints        
       lhs . collectConstraints = case lookup (show @name) @lhs.metavarConstraints of
                                      Just tree -> tree : @lhs.collectConstraints
                                      Nothing   -> internalError "TS_Apply.ag" "n/a" "unknown constraint set"
                                      
  | Phase 
       lhs . currrentPhase = Just @phase
                  
-- prevent AG-Warnings
SEM TypingStrategies | Cons  loc . (unique,metaVariableTable,localInfo) = undefined
