-- do not edit; automatically generated by UU.AG
module TypeInferencing where


-- types
import Types
import TypeConversion

-- constraints and constraint trees
import TypeConstraints
import LiftedConstraints
import TreeWalk
import Tree

-- error messages and warnings
import Messages
import TypeErrors
import Warnings
import ConstraintInfo
import TypeGraphConstraintInfo
import HeliumConstraintInfo
import DoublyLinkedTree
import UHA_Source

-- constraint solvers
import SolveTypeGraph            (solveTypeGraph)
import SolveGreedy               (solveGreedy)
import SolveSimple               (solveSimple)
import SolveCombination          (solveCombination)
import SolveChunks               (solveChunkConstraints)
import TypeConstraintSemantics
import TypeGraphInstance

-- UHA syntax
import UHA_Syntax
import UHA_Range                 
import UHA_Utils                 (showNameAsOperator, intUnaryMinusName, NameWithRange(..), nameFromString)
         
-- other
import Utils                     (internalError)
import DerivingShow              (typeOfShowFunction, nameOfShowFunction) 
import TopSort                   (topSort)
import ImportEnvironment
import DictionaryEnvironment
import Args

-- standard
import Data.FiniteMap
import Maybe 
import List

import List
import Matchers
import TS_Apply (applyTypingStrategy, matchInformation, MetaVariableTable, MetaVariableInfo)
import TS_CoreSyntax

import UHA_Utils

type Assumptions        = FiniteMap Name [(Name,Tp)]
type PatternAssumptions = FiniteMap Name Tp

noAssumptions :: FiniteMap Name a
noAssumptions = emptyFM

combine :: Assumptions -> Assumptions -> Assumptions
combine = plusFM_C (++)

single :: Name -> Tp -> Assumptions
single n t = unitFM n [(n,t)]

getMonos :: TypeConstraints info -> Tps
getMonos = map TVar . mapMaybe variableInConstraint

type BindingGroups = [BindingGroup]
type BindingGroup  = (PatternAssumptions,Assumptions,ConstraintSets)
type InheritedBDG  = [(Names,(Tps, Int))]

emptyBindingGroup :: BindingGroup
emptyBindingGroup = (noAssumptions, noAssumptions, [])

combineBindingGroup :: BindingGroup -> BindingGroup -> BindingGroup
combineBindingGroup (e1,a1,c1) (e2,a2,c2) = (e1 `plusFM` e2,a1 `combine` a2,c1++c2)

concatBindingGroups :: BindingGroups -> BindingGroup
concatBindingGroups = foldr combineBindingGroup emptyBindingGroup
                    
performBindingGroup :: Int -> Int -> ChunkNumberMap -> Tps -> FiniteMap Name TpScheme -> Maybe (Assumptions, ConstraintSets) -> BindingGroups -> (Assumptions,ConstraintSet,InheritedBDG,Int)
performBindingGroup currentChunk uniqueChunk chunkNumberMap monos typeSignatures context groups = 
   variableDependencies 

   where   
        bindingGroupAnalysis :: BindingGroups -> BindingGroups

        bindingGroupAnalysis cs
                        = let explicits = keysFM typeSignatures
                              indexMap = concat (zipWith f cs [0..])
                              f (env,_,_) i = [ (n,i) | n <- keysFM env, n `notElem` explicits ]
                              edges    = concat (zipWith f' cs [0..])
                              f' (_,ass,_) i = [ (i,j)| n <- keysFM ass, (n',j) <- indexMap, n==n' ]
                              list = topSort (length cs-1) edges
                          in map (concatBindingGroups . map (cs !!)) list

        chunkedBindingGroups  :: [(Int, BindingGroup)]
        chunkedBindingGroups = zip [uniqueChunk..] (bindingGroupAnalysis groups) ++ 
                               case context of 
                                  Nothing     -> []
                                  Just (a, c) -> [(currentChunk, (emptyFM, a, c))]
        
        monomorphicNames :: [Name]
        monomorphicNames = 
           let initial = let f (e, a, _) = if any (`elem` ftv monos) (ftv $ map snd $ concat $ eltsFM a)
                                             then keysFM e
                                             else []
                         in concatMap f groups
               expand [] _       = []
               expand (n:ns) gps = let (xs, ys)  = partition p gps
                                       p (_,a,_) = n `elem` keysFM a
                                       f (e,_,_) = keysFM e
                                   in n : expand (concatMap f xs ++ ns) ys
           in expand initial groups
                          
        variableDependencies :: (Assumptions,ConstraintSet,InheritedBDG,Int)
        variableDependencies = 
           let (aset, cset, mt) = foldr op initial chunkedBindingGroups
           in (aset, cset, mt, uniqueChunk + length groups)

          where        
            initial = (noAssumptions, emptyTree, [])
          
            op (cnr,(e,a,c)) (aset,cset,mt) =
               let (cset1,e'   )  = (typeSignatures !:::! e) cinfoBindingGroupExplicitTypedBinding                   
                   (cset2,a'   )  = (typeSignatures .:::. a) cinfoBindingGroupExplicit
                   (cset3,a''  )  = (e' .===. a')            cinfoSameBindingGroup
                   (cset4,aset')  = (.<==.) monos e' aset    cinfoBindingGroupImplicit
                   
                   monomorphic    = any (`elem` monomorphicNames) (keysFM e) || cnr == currentChunk

                   constraintTree 
                    | monomorphic = StrictOrder 
                                       ( (cset1 ++ cset2 ++ cset3) .>>. Node (reverse c) )
                                       ( cset4 .>>. cset )
                    | otherwise   = Chunk cnr
                                          (cset3 .>>. Node (reverse c))
                                          (dependencyBinds chunkNumberMap cset4)
                                          ([(cnr, c) | c <- cset1] ++ dependencyBinds chunkNumberMap cset2)
                                          cset
               in  
                  ( a'' `combine` aset'
                  , constraintTree
                  , (keysFM e,(eltsFM e', if monomorphic then currentChunk else cnr)) : mt                   
                  )

findMono :: Name -> InheritedBDG -> Tps
findMono n = let p = elem n . fst
             in fst . snd . head . filter p                  

findCurrentChunk :: Name -> InheritedBDG -> Int
findCurrentChunk n = let p = elem n . fst
                     in snd . snd . head . filter p  
         
getRequiredDictionaries :: OrderedTypeSynonyms -> Tp -> TpScheme -> Predicates
getRequiredDictionaries synonyms useType defType = 
   let i  = nextFTV useType
       (_, instantiatedPreds, instantiatedType) = instantiate i defType
   in -- one-way unification is necessary!
      case mguWithTypeSynonyms synonyms instantiatedType useType of
         Left _ -> internalError "TypeInferenceOverloading.ag" "getRequiredDictionaries" "no unification"
         Right (_, sub) -> 
            expandPredicates synonyms (sub |-> instantiatedPreds)
            
resolveOverloading :: Name -> Predicates -> Predicates -> DictionaryEnvironment -> (DictionaryEnvironment, Predicates {- errors -})
resolveOverloading name availablePredicates predicates dEnv = 
   let maybeTrees = map (makeDictionaryTree availablePredicates) predicates
   in if all isJust maybeTrees
        then (addForVariable name (map fromJust maybeTrees) dEnv, [])
        else (dEnv, [ predicate | (predicate, mt) <- zip predicates maybeTrees, isNothing mt ])

expandPredicates :: OrderedTypeSynonyms -> Predicates -> Predicates
expandPredicates synonyms = map (expandPredicate synonyms)

expandPredicate :: OrderedTypeSynonyms -> Predicate -> Predicate
expandPredicate (_, synonyms) (Predicate className tp) = Predicate className (expandType synonyms tp)

getInferredTypes :: Substitution substitution => Tps -> substitution -> Predicates -> BindingGroups -> [(NameWithRange, TpScheme)]
getInferredTypes monos substitution predicates groups = 
   let (environment, _, _) = concatBindingGroups groups
       monos' = ftv (substitution |-> monos)      
   in [ (NameWithRange name, generalize monos' predicates tp')
      | (name, tp) <- fmToList environment 
      , let  tp' = substitution |-> tp
      ]

checkAnnotations :: Bool -> OrderedTypeSynonyms -> FiniteMap Name TpScheme -> [(NameWithRange, TpScheme)] -> (TypeErrors, Warnings)
checkAnnotations topLevel synonyms typeSignatures = foldr op ([], [])
   where   
       op (nameWR, scheme) pair@(errors, warnings) =
          case lookupFM typeSignatures (nameWithRangeToName nameWR) of
          
             Just signature ->
                -- is the signature not too general?
                let info = (nameToSelfExpr nameOfSignature, getNameRange nameOfSignature)
                    -- this name has a different range!
                    nameOfSignature = head [ n | n <- keysFM typeSignatures, n == nameWithRangeToName nameWR ]      
                    newErrors = checkNotTooGeneral info synonyms signature scheme             
                in (newErrors ++ errors, warnings)               
                       
             Nothing 
                -- issue a warning for missing type signature (unless monomorphic)
                | null (ftv scheme) && topLevel ->
                     let warning = NoTypeDef (nameWithRangeToName nameWR) scheme topLevel
                     in (errors, warning : warnings)
                     
             _ -> pair      

checkNotTooGeneral :: (UHA_Source, Range) -> OrderedTypeSynonyms -> TpScheme -> TpScheme -> TypeErrors
checkNotTooGeneral (self, range) synonyms signature scheme = 
   [ makeNotGeneralEnoughTypeError (oneLinerSource self, range) scheme signature
   | not (genericInstanceOf synonyms standardClasses signature scheme)
   ]       

type ChunkNumberMap = FiniteMap Int Int

lookupChunkNumber :: Int -> ChunkNumberMap -> Int
lookupChunkNumber i fm = 
   let err = error ("could not find beta in lookupChunkNumber [i="++show i++"] [fm="++show (fmToList fm)++"]")
   in lookupWithDefaultFM fm err i

dependencyBinds :: ChunkNumberMap -> TypeConstraints a -> [(Int, TypeConstraint a)]
dependencyBinds fm cs = 
   let err = error "could not find variable of a constraint"
   in [ (lookupChunkNumber i fm, c) | c <- cs, let i = maybe err id (variableInConstraint c)]   

childConstraint :: Int -> String -> InfoTree -> Properties -> (Tp, Tp) -> HeliumConstraintInfo
childConstraint childNr theLocation infoTree theProperties tppair =
  CInfo { location   = theLocation
        , sources    = ( (self . attribute) infoTree
                       , Just $ (self . attribute . selectChild childNr) infoTree
                       )
        , typepair   = tppair
        , localInfo  = infoTree        
        , properties = theProperties
        }

specialConstraint :: String -> InfoTree -> (UHA_Source, Maybe UHA_Source) -> Properties -> (Tp, Tp) -> HeliumConstraintInfo
specialConstraint theLocation infoTree theSources theProperties tppair =
  CInfo { location   = theLocation
        , sources    = theSources
        , typepair   = tppair
        , localInfo  = infoTree        
        , properties = theProperties
        }
        
orphanConstraint :: Int -> String -> InfoTree -> Properties -> (Tp, Tp) -> HeliumConstraintInfo
orphanConstraint childNr theLocation infoTree theProperties tppair =
  CInfo { location   = theLocation
        , sources    = ( (self . attribute . selectChild childNr) infoTree
                       , Nothing
                       )
        , typepair   = tppair
        , localInfo  = infoTree        
        , properties = theProperties
        }        
        
resultConstraint :: String -> InfoTree -> Properties -> (Tp, Tp) -> HeliumConstraintInfo
resultConstraint theLocation infoTree theProperties tppair =
  CInfo { location   = theLocation
        , sources    = ( (self . attribute) infoTree 
                       , Nothing
                       )
        , typepair   = tppair
        , localInfo  = infoTree    
        , properties = theProperties
        }        

variableConstraint :: String -> UHA_Source -> Properties -> (Tp, Tp) -> HeliumConstraintInfo
variableConstraint theLocation theSource theProperties tppair =
  CInfo { location   = theLocation
        , sources    = (theSource, Nothing)
        , typepair   = tppair
        , localInfo  = root (LocalInfo { self = theSource, assignedType = Just (snd tppair) }) []
        , properties = theProperties
        }               
        
cinfoBindingGroupExplicitTypedBinding :: Name -> (Tp,Tp) -> HeliumConstraintInfo
cinfoSameBindingGroup                 :: Name -> (Tp,Tp) -> HeliumConstraintInfo
cinfoBindingGroupImplicit             :: Name -> (Tp,Tp) -> HeliumConstraintInfo
cinfoBindingGroupExplicit             :: Name -> (Tp,Tp) -> HeliumConstraintInfo

cinfoBindingGroupExplicitTypedBinding name = 
   variableConstraint "explicitly typed binding" (nameToSelfExpr name) [ FromBindingGroup, ExplicitTypedBinding, HasTrustFactor 10.0 ]
cinfoSameBindingGroup name = 
   variableConstraint "variable" (nameToSelfExpr name) [ FromBindingGroup, FolkloreConstraint ]
cinfoBindingGroupImplicit name = 
   variableConstraint "variable" (nameToSelfExpr name) [ FromBindingGroup, FolkloreConstraint, HasTrustFactor 10.0 ]
cinfoBindingGroupExplicit name = 
   variableConstraint "variable" (nameToSelfExpr name) [ FromBindingGroup, FolkloreConstraint ]      
                           
nameToSelfExpr :: Name -> UHA_Source
nameToSelfExpr name = UHA_Expr (Expression_Variable (getNameRange name) name)

nameToSelfPat :: Name -> UHA_Source
nameToSelfPat name = UHA_Pat (Pattern_Variable (getNameRange name) name)

globalInfoError :: a
globalInfoError = internalError "GlobalInfo.ag" "n/a" "global info not available"
                  
type ScopeInfo = ( [Names]          -- duplicated variables
                 , [Name]           -- unused variables
                 , [(Name, Name)]   -- shadowed variables
                 )

changeOfScope :: Names -> Names -> Names -> (Names, Names, ScopeInfo)
changeOfScope names unboundNames namesInScope = 
   let (uniqueNames, duplicatedNames) = uniqueAppearance names
       unusedNames   = uniqueNames \\ unboundNames
       shadowedNames = let f n = [ (n, n') | n' <- namesInScope, n == n' ]
                       in concatMap f uniqueNames
   in ( uniqueNames ++ map head duplicatedNames ++ (namesInScope \\ names)
      , unboundNames \\ names
      , (duplicatedNames, unusedNames, shadowedNames)
      )
      
uniqueAppearance :: Ord a => [a] -> ([a],[[a]])
uniqueAppearance = foldr insert ([],[]) . group . sort
   where insert [x] (as,bs) = (x:as,bs)
         insert xs  (as,bs) = (as,xs:bs)

matchConverter0 :: [([String],())] -> ()
matchConverter0 = const ()

matchConverter1 :: [([String],a)] -> [(a,[String])]
matchConverter1 = map (\(a,b) -> (b,a))  
                  
matchConverter2 :: [([String],(a,b))] -> ([(a,[String])],[(b,[String])])
matchConverter2 = let insert (metas,(a,b)) (as,bs) = ((a,metas):as,(b,metas):bs)
                  in foldr insert ([],[])                  

matchConverter3 :: [([String],(a,b,c))] -> ([(a,[String])],[(b,[String])],[(c,[String])])
matchConverter3 = let insert (metas,(a,b,c)) (as,bs,cs) = ((a,metas):as,(b,metas):bs,(c,metas):cs)
                  in foldr insert ([],[],[]) 

allMatch :: [Maybe [a]] -> Maybe [a]
allMatch = rec []
  where rec xs []             = Just xs
        rec xs (Nothing:_)    = Nothing
        rec xs (Just ys:rest) = rec (ys ++ xs) rest

data Match a = NoMatch | NonTerminalMatch a | MetaVariableMatch String

instance Show (Match a) where
  show (NoMatch) = "NoMatch"
  show (NonTerminalMatch a) = "NonTerminal ??"
  show (MetaVariableMatch s) = "MetaVariableMatch "++show s

expressionVariableMatcher :: Expression -> Maybe String
expressionVariableMatcher expr =
   case expr of
      Expression_Variable _ name -> Just (show name)
      _                          -> Nothing

match0 = generalMatch expressionVariableMatcher matchConverter0
match1 = generalMatch expressionVariableMatcher matchConverter1
match2 = generalMatch expressionVariableMatcher matchConverter2
match3 = generalMatch expressionVariableMatcher matchConverter3

match0' = generalMatch noMatch matchConverter0 noMetaVariableInfo 0
match1' = generalMatch noMatch matchConverter1 noMetaVariableInfo 0
match2' = generalMatch noMatch matchConverter2 noMetaVariableInfo 0

matchOnlyVariable infoTuple tryPats = 
   let ((),matches,_,_,_) = match0 infoTuple 0 noMatch tryPats [] []
   in matches

noMatch :: a -> Maybe b
noMatch = const Nothing

--noMetaVariableInfo :: MetaVariableInfo
noMetaVariableInfo = internalError "PatternMatching.ag" "noMetaVariableInfo" ""

generalMatch :: (nonTerminal -> Maybe String) 
             -> ([([String], childrenTuple)] -> childrenResult)
             -> (ConstraintSet, MetaVariableInfo)
             -> Int             
             -> (nonTerminal -> Maybe childrenTuple) 
             -> [(nonTerminal, [String])] 
             -> [((nonTerminal, [String]), Core_TypingStrategy)] 
             -> [[Maybe (MetaVariableTable MetaVariableInfo)]] 
             -> ( childrenResult
                , [Maybe (MetaVariableTable MetaVariableInfo)]
                , ConstraintSet
                , Int
                , IO ()
                )

generalMatch exprVarMatcher converter metaVariableInfo unique matcher tryPats allPats childrenResults =
   let match (expr,metas) = 
          case exprVarMatcher expr of
             Just s | s `elem` metas -> MetaVariableMatch s
             _ -> case matcher expr of
                     Just x  -> NonTerminalMatch (metas,x)
                     Nothing -> NoMatch
           
       (allPatterns, allStrategies) = unzip allPats
       matchListTry = map match tryPats
       matchListNew = map match allPatterns
       
       matchNTTry  = [ x | NonTerminalMatch x <- matchListTry ]
       matchNTNew  = [ x | NonTerminalMatch x <- matchListNew ]
       forChildren = converter (matchNTTry ++ matchNTNew)
       
       numberOfTry = length matchNTTry
       (resultTry,resultNew) = unzip . map (splitAt numberOfTry) $ 
                               if null childrenResults
                                 then [repeat (Just [])]
                                 else childrenResults
       inspectMatch m (res, nts) =
          case m of
             NoMatch             -> (Nothing:res, nts)
             NonTerminalMatch _  -> (allMatch (head nts):res, tail nts)
             MetaVariableMatch s -> (Just [(s,(constraintSet, snd metaVariableInfo))]:res, nts) --  !!!
       
       result   = fst (foldr inspectMatch ([],reverse $ transpose resultTry) matchListTry)       
       complete = let (list,_) = foldr inspectMatch ([],reverse $ transpose resultNew) matchListNew
                  in [ (x, y) | (Just x, y) <- zip list allStrategies ]

       (constraintSet, debugIO, newUnique) = 
          case complete of
          
             [] -> (fst metaVariableInfo, return (), unique)
             
             (childrenInfo, typingStrategy):_ 
                -> applyTypingStrategy typingStrategy metaVariableInfo childrenInfo unique            
   in (forChildren, result, constraintSet, newUnique, debugIO)
   
     {-  msg = unlines [ "try-in: " ++ show (length tryPats)
              , "result: " ++ show (length result)
              , "strategies: " ++ show (length allStrategies)
              , "nt-match try: " ++ show (length matchNTTry)
              , "nt-match new: " ++ show (length matchNTNew)
              , "result try: " ++ if null childrenResults then "???" else show (length $ transpose resultTry)
              , "result new: " ++ if null childrenResults then "???" else show (map (map (maybe "N" (const "J"))) (transpose resultNew))
              , "complete matches: " ++ show (length complete)
              ] -}

pmError = internalError "PatternMatchWarnings"

expandTypeFromImportEnvironment :: ImportEnvironment -> Tp -> Tp
expandTypeFromImportEnvironment env = expandType (snd $ getOrderedTypeSynonyms env)

patternMatchWarnings :: Substitution substitution
                     => ImportEnvironment          -- the importenvironment
                     -> substitution               -- substitution that contains the real types
                     -> Tp                         -- type of the patterns, unsubstituted
                     -> (Tp -> Tps)                -- how should the type be interpreted?
                     -> [([PatternElement], Bool)] -- the patterns to be processed
                     -> Range                      -- range for the missing-warnings
                     -> Maybe Name                 -- maybe the name of the function
                     -> Bool                       -- should there be parentheses around the patterns?
                     -> [Warning]                  -- list of overlap-warnings for all of the patterns  
                     -> String                     -- description of the place where the patterns are
                     -> String                     -- symbol after the patterns
                     -> [Warning]                  -- returns: list of warnings
patternMatchWarnings impenv sub tp strip elementss rng name parens unrwars place sym
  = unreachablewarnings ++ missingwarnings
    where
      env                 = importEnvironmentToEnv impenv
      exprtype            = expandTypeFromImportEnvironment impenv $ sub |-> tp
      types               = strip exprtype
      unreachables        = unreachable impenv types $ map (\((a, b), c) -> (a, c)) $ filter (not.snd.fst) $ zip elementss [0..]
      missing             = complement  impenv types $ map fst elementss
      unreachablewarnings = map (unrwars !!) unreachables
      missingwarnings
        | null $ unMissing missing = []
        | otherwise                = [MissingPatterns rng name exprtype (map (nicePattern parens env) $ missingList missing) place sym]


----------
-- misc --
----------

-- lifted or
(|^|) :: (a -> Bool) -> (a -> Bool) -> a -> Bool
(|^|) f g x = f x || g x

----------------------------------------------
--- environments and substitution of types ---
----------------------------------------------

-- environment of constructors [(type, (constructorname, arguments))]
type Env = [(Tp, (Name, [Tp]))]
importEnvironmentToEnv = map rearrange . fmToList . valueConstructors

-- return the number of arguments of a constructor
-- tuples ar not in the Env so they require special treatment
nrOfArguments :: Env -> String -> Int
nrOfArguments env con | isTupleConstructor con = length con - 1
                      | otherwise = case lookup (nameFromString con) $ map snd env
                                    of Just args -> length args
                                       Nothing   -> 0

-- convert constructor to fit in an Env
rearrange :: (Name, TpScheme) -> (Tp, (Name, [Tp]))
rearrange (name, tpscheme) = let (args, res) = functionSpine $ unqualify $ getQualifiedType tpscheme
                             in (res, (name, args))
  where
    unqualify :: QType -> Tp
    unqualify (_ :=> tp) = tp

-- get the constructors of a given type out of an Env
-- tuples ar not in the Env so they require special treatment
constructors :: ImportEnvironment -> Tp -> [(Name, [Tp])]
constructors _ (TVar _) = []
constructors impenv tp | isTupleConstructor name = [tupleconstructor]
                       | otherwise               = map expand $ concatMap (substitute tp) $ importEnvironmentToEnv impenv
  where
    name :: String
    name = unTCon $ fst $ leftSpine tp
    tupleconstructor :: (Name, [Tp])
    tupleconstructor = (nameFromString name, snd $ leftSpine tp)
    unTCon :: Tp -> String
    unTCon (TCon c) = c
    unTCon tp = pmError "unTCon" $ "type " ++ show tp ++ " is not a TCon"
    expand :: (Name, [Tp]) -> (Name, [Tp])
    expand (n, ts) = (n, map (expandTypeFromImportEnvironment impenv) ts)

-- check of an entry in an Env is a constructor for the given type
-- if so, return this constructor, but with variables substituted for whatever is in the given type
-- the list returns zero or one elements
-- for example: substitute (Maybe Int) (Maybe a, (Just, [a])) will return [(Just, [Int])]
substitute :: Tp -> (Tp, (Name, [Tp])) -> [(Name, [Tp])]
substitute t1 (t2, (con, args)) = let (c1, ts1) = leftSpine t1
                                      (c2, ts2) = leftSpine t2
                                      sub = listToSubstitution $ zip (map unTVar ts2) ts1
                                  in if c1 == c2
                                     then [(con, map (sub |->) args)]
                                     else []
  where
    unTVar :: Tp -> Int
    unTVar (TVar v) = v
    unTVar _ = pmError "unTVar" "type is not a TVar"

---------------------------------------------------------------
--- datastructures and functions for the solution structure ---
---------------------------------------------------------------

-- a pattern is a list of patternelements
data PatternElement = WildcardElement | InfiniteElement String | FiniteElement String deriving Eq
isInfiniteElement :: PatternElement -> Bool
isInfiniteElement (InfiniteElement _) = True
isInfiniteElement _                   = False
elementString :: PatternElement -> String
elementString (InfiniteElement s) = s
elementString (  FiniteElement s) = s
elementString _                   = []

-- needed for Pattern_List and Literal_String occurences
listPat :: [[PatternElement]] -> [PatternElement]
listPat [] = [FiniteElement "[]"]
listPat (ps:pss) = FiniteElement ":" : ps ++ listPat pss

stringPat :: String -> [PatternElement]
stringPat [] = [FiniteElement "[]"]
stringPat (c:cs) = FiniteElement ":" : InfiniteElement [c] : stringPat cs

-- tree of missing patterns
data PatternsMissing = PatternsMissing [(PatternElement, PatternsMissing)]
unMissing :: PatternsMissing -> [(PatternElement, PatternsMissing)]
unMissing (PatternsMissing l) = l

-- create a branch consisting of only wildcards
wildMissing :: Int -> PatternsMissing
wildMissing 0 = PatternsMissing []
wildMissing n = PatternsMissing [(WildcardElement, wildMissing $ n - 1)]

-- convert a missing patterns tree to a list of seperated missing patterns
missingList :: PatternsMissing -> [[PatternElement]]
missingList (PatternsMissing []) = [[]]
missingList (PatternsMissing [(d,t)]) = map (d:) $ missingList t
missingList (PatternsMissing (d:ds)) = (missingList $ PatternsMissing [d]) ++ (missingList $ PatternsMissing ds)

-------------------------------------------------------------------
--- functions to create a UHA_Pattern out of a [PatternElement] ---
-------------------------------------------------------------------

-- nice creates the actual pattern without parentheses
-- [Just, True, True, (,), Just, Nothing, False] -> [Just True, True, (Just Nothing, False)]
nicePattern :: Bool -> Env -> [PatternElement] -> [Pattern]
nicePattern b env = map (parensPattern b) . nice
  where
    nice :: [PatternElement] -> [Pattern]
    nice []             = []
    nice (WildcardElement    :ps) = Pattern_Wildcard noRange : nice ps
    nice (InfiniteElement _  :ps) = pmError "nicePattern" "InfiniteElement in pattern!"
    nice (FiniteElement con:ps) =
      let rest = nice ps
          name = nameFromString con
          n    = nrOfArguments env con
      in case name 
         of Name_Identifier _ _ _                          -> Pattern_Constructor noRange name (take n rest) : drop n rest
            Name_Operator   _ _ _ | con == ":"             -> case head $ tail rest
                                                              of Pattern_List _ ps -> Pattern_List noRange (head rest:ps) : (tail $ tail rest)
                                                                 _ -> Pattern_InfixConstructor noRange (head rest) name (head $ tail rest) : (tail $ tail rest)
                                  | otherwise              -> Pattern_InfixConstructor noRange (head rest) name (head $ tail rest) : (tail $ tail rest)
            Name_Special    _ _ _ | isTupleConstructor con -> Pattern_Tuple noRange (take n rest) : drop n rest
                                  | con == "[]"            -> Pattern_List  noRange [] : rest
                                  | otherwise              -> Pattern_Constructor noRange name (take n rest) : drop n rest

-- add parentheses to a pattern in the correct places
-- bool means: if needed, should there be parenthesis around the complete pattern?
parensPattern :: Bool -> Pattern -> Pattern
parensPattern b = if b then rap . par else fst . par
  where
    par :: Pattern -> (Pattern, Bool) -- Bool means: are parentheses needed around this pattern, shoud it be used in a more complex pattern
    par p@(Pattern_Literal          _ _    ) = (p, False)
    par p@(Pattern_Variable         _ _    ) = (p, False)
    par   (Pattern_Constructor      r n ps ) = (Pattern_Constructor r n $ map (rap.par) ps, length ps > 0)
    par   (Pattern_Parenthesized    _ p    ) = par p
    par   (Pattern_InfixConstructor r l n k) = (Pattern_InfixConstructor r (rap $ par l) n (rap $ par k), True)
    par   (Pattern_List             r ps   ) = (Pattern_List r $ map (fst.par) ps, False)
    par   (Pattern_Tuple            r ps   ) = (Pattern_Tuple r $ map (fst.par) ps, False)
    par   (Pattern_Record           _ _ _  ) = pmError "parensPattern" "Records are not supported" 
    par p@(Pattern_Negate           _ _    ) = (p, True)
    par p@(Pattern_NegateFloat      _ _    ) = (p, True)
    par   (Pattern_As               r n p  ) = (Pattern_As r n (rap $ par p), False)
    par p@(Pattern_Wildcard         _      ) = (p, False)
    par   (Pattern_Irrefutable      _ _    ) = pmError "parensPattern" "Irrefutable patterns are not supported"  
    par   (Pattern_Successor        _ _ _  ) = pmError "parensPattern" "Successors are not supported" 
    rap :: (Pattern, Bool) -> Pattern
    rap (p, False) = p
    rap (p, True ) = Pattern_Parenthesized noRange p

--------------------------------------
--- finally, the algorithm itself! ---
--------------------------------------

-- returns the tree of missing patterns for a given list of patterns    
complement :: ImportEnvironment -> [Tp] -> [[PatternElement]] -> PatternsMissing
complement _   []       _      = PatternsMissing []
complement _   _        ([]:_) = PatternsMissing []
complement env (tp:tps) pss    | null $ unMissing anyComplement                              = PatternsMissing []
                               | all (((== WildcardElement) |^| isInfiniteElement).head) pss = anyComplement
                               | otherwise                                                   = finComplement
  where
    patComplement :: [[PatternElement]] -> PatternElement -> [Tp] -> PatternsMissing
    patComplement []  current tps = PatternsMissing [(current, wildMissing $ length tps)]
    patComplement pss current tps = case unMissing $ complement env tps $ map tail $ pss
                                    of []   -> PatternsMissing []
                                       tegs -> PatternsMissing [(current, PatternsMissing tegs)]
    anyComplement :: PatternsMissing
    anyComplement = patComplement (filter ((== WildcardElement).head) pss) WildcardElement tps
    conComplement :: (Name, [Tp]) -> PatternsMissing
    conComplement (con, args) = patComplement (  filter ((== FiniteElement (getNameName con)).head) pss
                                              ++ map (\ps -> FiniteElement (getNameName con) : replicate (length args) WildcardElement ++ tail ps)
                                                     (filter ((== WildcardElement).head) pss)
                                              )
                                              (FiniteElement (getNameName con)) (args ++ tps)
    finComplement :: PatternsMissing
    finComplement = case constructors env tp
                    of []   -> wildMissing $ 1 + length tps
                       cons -> PatternsMissing $ concatMap (unMissing.conComplement) cons

----------------------------
--- unreachable patterns ---
----------------------------

-- complements the list of reachable patterns
unreachable :: ImportEnvironment -> [Tp] -> [([PatternElement], Int)] -> [Int]
unreachable env tps ps = let reach = reachable env tps ps
                         in  filter (not . flip elem reach) (map snd ps)

-- determines which patterns are reachable
-- possibly multiple occurances of indices
reachable :: ImportEnvironment -> [Tp] -> [([PatternElement], Int)] -> [Int]
reachable _   []       _  = pmError "reachable" "empty type list!"
reachable env (tp:tps) ps 
  | all ((== WildcardElement).head.fst) ps = conReachable ps
  | otherwise                              = concat $ map (conReachable.conPats) $ stop cons
  where
    cons :: [PatternElement]
    cons = thin $ map (head.fst) ps
    conPats :: PatternElement -> [([PatternElement], Int)]
    conPats con = map (\(es, i) -> (fill con es, i)) $ filter (((== con) |^| (== WildcardElement)).head.fst) ps
    fill :: PatternElement -> [PatternElement] -> [PatternElement]
    fill e@(FiniteElement c) (WildcardElement : es) = e : replicate (nrOfArguments (importEnvironmentToEnv env) c) WildcardElement ++ es
    fill e                   (_               : es) = e : es
    stop :: [PatternElement] -> [PatternElement]
    stop es | length (constructors env tp) > length es = FiniteElement "[*]" : es
            | length (constructors env tp) == 0        = FiniteElement "[*]" : es
            | otherwise                                = es
    conReachable :: [([PatternElement], Int)] -> [Int]
    conReachable [] = []
    conReachable pats 
      | null.tail.fst.head $ pats = [snd.head $ pats]
      | otherwise                 = reachable env (arguments (elementString.head.fst.head $ pats) ++ tps) 
                                            $ map (\(es, i) -> (tail es, i)) pats
    arguments :: String -> [Tp]
    arguments c = maybe [] id $ lookup c $ map (\(n, tps) -> (getNameName n, tps)) $ constructors env tp

-- remove double occurances and wildcards
thin :: [PatternElement] -> [PatternElement]
thin []                     = []
thin (WildcardElement : es) = thin es
thin (e               : es) | elem e thines =     thines
                            | otherwise     = e : thines
  where thines = thin es                            
                       
-- Alternative -------------------------------------------------
-- semantic domain
type T_Alternative = ([((Expression, [String]), Core_TypingStrategy)]) ->
                     (Predicates) ->
                     (Tp) ->
                     (Tp) ->
                     (Int) ->
                     (ChunkNumberMap) ->
                     (ChunkNumberMap) ->
                     (TypeErrors) ->
                     (Warnings) ->
                     (Int) ->
                     (DictionaryEnvironment) ->
                     (ImportEnvironment) ->
                     (FiniteMap NameWithRange TpScheme) ->
                     (IO ()) ->
                     (Tps) ->
                     (Names) ->
                     (Int) ->
                     (OrderedTypeSynonyms) ->
                     (InfoTree) ->
                     ([Warning]) ->
                     (Predicates) ->
                     (FixpointSubstitution) ->
                     (Int) ->
                     ( (Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),( ([PatternElement], Bool) ),(InfoTree),(IO ()),([Warning]),(Alternative),(Names),(Int),(Warning))
-- cata
sem_Alternative :: (Alternative) ->
                   (T_Alternative)
sem_Alternative ((Alternative_Alternative (_range) (_pattern) (_righthandside))) =
    (sem_Alternative_Alternative ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_RightHandSide (_righthandside))))
sem_Alternative ((Alternative_Empty (_range))) =
    (sem_Alternative_Empty ((sem_Range (_range))))
sem_Alternative_Alternative :: (T_Range) ->
                               (T_Pattern) ->
                               (T_RightHandSide) ->
                               (T_Alternative)
sem_Alternative_Alternative (_range)
                            (_pattern)
                            (_righthandside)
                            (_lhs_allPatterns)
                            (_lhs_availablePredicates)
                            (_lhs_betaLeft)
                            (_lhs_betaRight)
                            (_lhs_betaUnique)
                            (_lhs_chunkNumberMap)
                            (_lhs_collectChunkNumbers)
                            (_lhs_collectErrors)
                            (_lhs_collectWarnings)
                            (_lhs_currentChunk)
                            (_lhs_dictionaryEnvironment)
                            (_lhs_importEnvironment)
                            (_lhs_inferredTypes)
                            (_lhs_matchIO)
                            (_lhs_monos)
                            (_lhs_namesInScope)
                            (_lhs_nrOfAlternatives)
                            (_lhs_orderedTypeSynonyms)
                            (_lhs_parentTree)
                            (_lhs_patternMatchWarnings)
                            (_lhs_predicates)
                            (_lhs_substitution)
                            (_lhs_uniqueChunk) =
    let (_self) =
            Alternative_Alternative _range_self _pattern_self _righthandside_self
        (_constraints) =
            _csetBinds .>>.
            Node [ _conLeft  .<. _pattern_constraints
                 , _conRight .<. _righthandside_constraints
                 ]
        ((_csetBinds,_assumptions')) =
            (_pattern_environment .===. _righthandside_assumptions) _cinfoBind
        (_conLeft) =
            [ (_pattern_beta .==. _lhs_betaLeft) _cinfoLeft ]
        (_conRight) =
            [ (_righthandside_beta .==. _lhs_betaRight) _cinfoRight ]
        (_cinfoLeft) =
            orphanConstraint 0 "case pattern" _parentTree
               []
        (_cinfoRight) =
            orphanConstraint 1 "right-hand side of case alternative" _parentTree
               [ HasTrustFactor 10.0 | _lhs_nrOfAlternatives < 2 ]
        (_cinfoBind) =
            \name -> variableConstraint "variable" (nameToSelfExpr name)
               [FolkloreConstraint]
        (_localInfo) =
            LocalInfo { self = UHA_Alt _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_pattern_infoTree, _righthandside_infoTree]
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _pattern_patVarNames _righthandside_unboundNames _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_pattern_self,_pattern_unboundNames) =
            (_pattern (_lhs_betaUnique) (_lhs_importEnvironment) (_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
        ( _righthandside_assumptions,_righthandside_beta,_righthandside_betaUnique,_righthandside_collectChunkNumbers,_righthandside_collectErrors,_righthandside_collectWarnings,_righthandside_constraints,_righthandside_dictionaryEnvironment,_righthandside_fallthrough,_righthandside_infoTree,_righthandside_matchIO,_righthandside_patternMatchWarnings,_righthandside_self,_righthandside_unboundNames,_righthandside_uniqueChunk) =
            (_righthandside (_lhs_allPatterns)
                            ("->")
                            (_lhs_availablePredicates)
                            (_pattern_betaUnique)
                            (_lhs_chunkNumberMap)
                            (_lhs_collectChunkNumbers)
                            (_lhs_collectErrors)
                            (_lhs_collectWarnings)
                            (_lhs_currentChunk)
                            (_lhs_dictionaryEnvironment)
                            (_lhs_importEnvironment)
                            (_lhs_inferredTypes)
                            (_lhs_matchIO)
                            (eltsFM _pattern_environment ++ getMonos _csetBinds ++ _lhs_monos)
                            (_namesInScope)
                            (_lhs_orderedTypeSynonyms)
                            (_parentTree)
                            (_pattern_patternMatchWarnings)
                            (_lhs_predicates)
                            (_lhs_substitution)
                            (_lhs_uniqueChunk))
    in  ( _assumptions',_righthandside_betaUnique,_righthandside_collectChunkNumbers,_righthandside_collectErrors,_righthandside_collectWarnings,_constraints,_righthandside_dictionaryEnvironment,(_pattern_elements, _righthandside_fallthrough),_parentTree,_righthandside_matchIO,_righthandside_patternMatchWarnings,_self,_unboundNames,_righthandside_uniqueChunk,UnreachablePatternCase _range _pattern_self)
sem_Alternative_Empty :: (T_Range) ->
                         (T_Alternative)
sem_Alternative_Empty (_range)
                      (_lhs_allPatterns)
                      (_lhs_availablePredicates)
                      (_lhs_betaLeft)
                      (_lhs_betaRight)
                      (_lhs_betaUnique)
                      (_lhs_chunkNumberMap)
                      (_lhs_collectChunkNumbers)
                      (_lhs_collectErrors)
                      (_lhs_collectWarnings)
                      (_lhs_currentChunk)
                      (_lhs_dictionaryEnvironment)
                      (_lhs_importEnvironment)
                      (_lhs_inferredTypes)
                      (_lhs_matchIO)
                      (_lhs_monos)
                      (_lhs_namesInScope)
                      (_lhs_nrOfAlternatives)
                      (_lhs_orderedTypeSynonyms)
                      (_lhs_parentTree)
                      (_lhs_patternMatchWarnings)
                      (_lhs_predicates)
                      (_lhs_substitution)
                      (_lhs_uniqueChunk) =
    let (_self) =
            Alternative_Empty _range_self
        (_constraints) =
            emptyTree
        (_localInfo) =
            LocalInfo { self = UHA_Alt _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        ( _range_self) =
            (_range )
    in  ( noAssumptions,_lhs_betaUnique,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_constraints,_lhs_dictionaryEnvironment,([], False),_parentTree,_lhs_matchIO,_lhs_patternMatchWarnings,_self,[],_lhs_uniqueChunk,pmError "Alternative_Empty.unrwar" "empty alternative")
-- Alternatives ------------------------------------------------
-- semantic domain
type T_Alternatives = ([((Expression, [String]), Core_TypingStrategy)]) ->
                      (Predicates) ->
                      (Tp) ->
                      (Tp) ->
                      (Int) ->
                      (ChunkNumberMap) ->
                      (ChunkNumberMap) ->
                      (TypeErrors) ->
                      (Warnings) ->
                      (Int) ->
                      (DictionaryEnvironment) ->
                      (ImportEnvironment) ->
                      (FiniteMap NameWithRange TpScheme) ->
                      (IO ()) ->
                      (Tps) ->
                      (Names) ->
                      (Int) ->
                      (OrderedTypeSynonyms) ->
                      (InfoTree) ->
                      ([Warning]) ->
                      (Predicates) ->
                      (FixpointSubstitution) ->
                      (Int) ->
                      ( (Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSets),(DictionaryEnvironment),([([PatternElement], Bool)]),(InfoTrees),(IO ()),([Warning]),(Alternatives),(Names),(Int),([Warning]))
-- cata
sem_Alternatives :: (Alternatives) ->
                    (T_Alternatives)
sem_Alternatives (list) =
    (foldr (sem_Alternatives_Cons) (sem_Alternatives_Nil) ((map sem_Alternative list)))
sem_Alternatives_Cons :: (T_Alternative) ->
                         (T_Alternatives) ->
                         (T_Alternatives)
sem_Alternatives_Cons (_hd)
                      (_tl)
                      (_lhs_allPatterns)
                      (_lhs_availablePredicates)
                      (_lhs_betaLeft)
                      (_lhs_betaRight)
                      (_lhs_betaUnique)
                      (_lhs_chunkNumberMap)
                      (_lhs_collectChunkNumbers)
                      (_lhs_collectErrors)
                      (_lhs_collectWarnings)
                      (_lhs_currentChunk)
                      (_lhs_dictionaryEnvironment)
                      (_lhs_importEnvironment)
                      (_lhs_inferredTypes)
                      (_lhs_matchIO)
                      (_lhs_monos)
                      (_lhs_namesInScope)
                      (_lhs_nrOfAlternatives)
                      (_lhs_orderedTypeSynonyms)
                      (_lhs_parentTree)
                      (_lhs_patternMatchWarnings)
                      (_lhs_predicates)
                      (_lhs_substitution)
                      (_lhs_uniqueChunk) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_assumptions,_hd_betaUnique,_hd_collectChunkNumbers,_hd_collectErrors,_hd_collectWarnings,_hd_constraints,_hd_dictionaryEnvironment,_hd_elements,_hd_infoTree,_hd_matchIO,_hd_patternMatchWarnings,_hd_self,_hd_unboundNames,_hd_uniqueChunk,_hd_unrwar) =
            (_hd (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_lhs_betaLeft)
                 (_lhs_betaRight)
                 (_lhs_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_lhs_collectChunkNumbers)
                 (_lhs_collectErrors)
                 (_lhs_collectWarnings)
                 (_lhs_currentChunk)
                 (_lhs_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_lhs_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_nrOfAlternatives)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_lhs_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_lhs_uniqueChunk))
        ( _tl_assumptions,_tl_betaUnique,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_constraintslist,_tl_dictionaryEnvironment,_tl_elementss,_tl_infoTrees,_tl_matchIO,_tl_patternMatchWarnings,_tl_self,_tl_unboundNames,_tl_uniqueChunk,_tl_unrwars) =
            (_tl (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_lhs_betaLeft)
                 (_lhs_betaRight)
                 (_hd_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_hd_collectChunkNumbers)
                 (_hd_collectErrors)
                 (_hd_collectWarnings)
                 (_lhs_currentChunk)
                 (_hd_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_hd_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_nrOfAlternatives)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_hd_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_hd_uniqueChunk))
    in  ( _hd_assumptions `combine` _tl_assumptions,_tl_betaUnique,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_hd_constraints : _tl_constraintslist,_tl_dictionaryEnvironment,_hd_elements : _tl_elementss,_hd_infoTree : _tl_infoTrees,_tl_matchIO,_tl_patternMatchWarnings,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_uniqueChunk,_hd_unrwar   : _tl_unrwars)
sem_Alternatives_Nil :: (T_Alternatives)
sem_Alternatives_Nil (_lhs_allPatterns)
                     (_lhs_availablePredicates)
                     (_lhs_betaLeft)
                     (_lhs_betaRight)
                     (_lhs_betaUnique)
                     (_lhs_chunkNumberMap)
                     (_lhs_collectChunkNumbers)
                     (_lhs_collectErrors)
                     (_lhs_collectWarnings)
                     (_lhs_currentChunk)
                     (_lhs_dictionaryEnvironment)
                     (_lhs_importEnvironment)
                     (_lhs_inferredTypes)
                     (_lhs_matchIO)
                     (_lhs_monos)
                     (_lhs_namesInScope)
                     (_lhs_nrOfAlternatives)
                     (_lhs_orderedTypeSynonyms)
                     (_lhs_parentTree)
                     (_lhs_patternMatchWarnings)
                     (_lhs_predicates)
                     (_lhs_substitution)
                     (_lhs_uniqueChunk) =
    let (_self) =
            []
    in  ( noAssumptions,_lhs_betaUnique,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],[],_lhs_matchIO,_lhs_patternMatchWarnings,_self,[],_lhs_uniqueChunk,[])
-- AnnotatedType -----------------------------------------------
-- semantic domain
type T_AnnotatedType = (Names) ->
                       ( (AnnotatedType),(Names))
-- cata
sem_AnnotatedType :: (AnnotatedType) ->
                     (T_AnnotatedType)
sem_AnnotatedType ((AnnotatedType_AnnotatedType (_range) (_strict) (_type))) =
    (sem_AnnotatedType_AnnotatedType ((sem_Range (_range))) (_strict) ((sem_Type (_type))))
sem_AnnotatedType_AnnotatedType :: (T_Range) ->
                                   (Bool) ->
                                   (T_Type) ->
                                   (T_AnnotatedType)
sem_AnnotatedType_AnnotatedType (_range) (_strict) (_type) (_lhs_namesInScope) =
    let (_self) =
            AnnotatedType_AnnotatedType _range_self _strict _type_self
        ( _range_self) =
            (_range )
        ( _type_self) =
            (_type )
    in  ( _self,[])
-- AnnotatedTypes ----------------------------------------------
-- semantic domain
type T_AnnotatedTypes = (Names) ->
                        ( (AnnotatedTypes),(Names))
-- cata
sem_AnnotatedTypes :: (AnnotatedTypes) ->
                      (T_AnnotatedTypes)
sem_AnnotatedTypes (list) =
    (foldr (sem_AnnotatedTypes_Cons) (sem_AnnotatedTypes_Nil) ((map sem_AnnotatedType list)))
sem_AnnotatedTypes_Cons :: (T_AnnotatedType) ->
                           (T_AnnotatedTypes) ->
                           (T_AnnotatedTypes)
sem_AnnotatedTypes_Cons (_hd) (_tl) (_lhs_namesInScope) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self,_hd_unboundNames) =
            (_hd (_lhs_namesInScope))
        ( _tl_self,_tl_unboundNames) =
            (_tl (_lhs_namesInScope))
    in  ( _self,_hd_unboundNames ++ _tl_unboundNames)
sem_AnnotatedTypes_Nil :: (T_AnnotatedTypes)
sem_AnnotatedTypes_Nil (_lhs_namesInScope) =
    let (_self) =
            []
    in  ( _self,[])
-- Body --------------------------------------------------------
-- semantic domain
type T_Body = ([((Expression, [String]), Core_TypingStrategy)]) ->
              (Predicates) ->
              (Int) ->
              (ChunkNumberMap) ->
              (ChunkNumberMap) ->
              (TypeErrors) ->
              (Warnings) ->
              (Int) ->
              (DictionaryEnvironment) ->
              (ImportEnvironment) ->
              (FiniteMap NameWithRange TpScheme) ->
              (IO ()) ->
              (Tps) ->
              (Names) ->
              (OrderedTypeSynonyms) ->
              ([Warning]) ->
              (Predicates) ->
              (FixpointSubstitution) ->
              (Int) ->
              ( (Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(Names),(DictionaryEnvironment),(IO ()),([Warning]),(InfoTree),(Body),(TypeEnvironment),(Names),(Int))
-- cata
sem_Body :: (Body) ->
            (T_Body)
sem_Body ((Body_Body (_range) (_importdeclarations) (_declarations))) =
    (sem_Body_Body ((sem_Range (_range))) ((sem_ImportDeclarations (_importdeclarations))) ((sem_Declarations (_declarations))))
sem_Body_Body :: (T_Range) ->
                 (T_ImportDeclarations) ->
                 (T_Declarations) ->
                 (T_Body)
sem_Body_Body (_range)
              (_importdeclarations)
              (_declarations)
              (_lhs_allPatterns)
              (_lhs_availablePredicates)
              (_lhs_betaUnique)
              (_lhs_chunkNumberMap)
              (_lhs_collectChunkNumbers)
              (_lhs_collectErrors)
              (_lhs_collectWarnings)
              (_lhs_currentChunk)
              (_lhs_dictionaryEnvironment)
              (_lhs_importEnvironment)
              (_lhs_inferredTypes)
              (_lhs_matchIO)
              (_lhs_monos)
              (_lhs_namesInScope)
              (_lhs_orderedTypeSynonyms)
              (_lhs_patternMatchWarnings)
              (_lhs_predicates)
              (_lhs_substitution)
              (_lhs_uniqueChunk) =
    let (_self) =
            Body_Body _range_self _importdeclarations_self _declarations_self
        ((_aset,_cset,_inheritedBDG,_chunkNr)) =
            performBindingGroup _lhs_currentChunk _declarations_uniqueChunk _lhs_chunkNumberMap [] _declarations_typeSignatures Nothing _declarations_bindingGroups
        ((_csetBinds,_aset')) =
            (typeEnvironment _lhs_importEnvironment .:::. _aset) _cinfo
        (_constraints) =
            Chunk _lhs_currentChunk _cset [] (dependencyBinds _lhs_chunkNumberMap _csetBinds) emptyTree
        (_inferredTypes) =
            addListToFM _lhs_inferredTypes _localTypes
        (_localTypes) =
            getInferredTypes _lhs_monos _lhs_substitution _lhs_predicates _declarations_bindingGroups
        ((_errors,_warnings)) =
            checkAnnotations True _lhs_orderedTypeSynonyms _declarations_typeSignatures _localTypes
        (_cinfo) =
            \name -> variableConstraint "variable" (nameToSelfExpr name)
               [ FolkloreConstraint, HasTrustFactor 10.0, IsImported ]
        (_declInfo) =
            LocalInfo { self = UHA_Decls _declarations_self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            root _declInfo _declarations_infoTrees
        ( _range_self) =
            (_range )
        ( _importdeclarations_self) =
            (_importdeclarations )
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectChunkNumbers,_declarations_collectErrors,_declarations_collectWarnings,_declarations_declVarNames,_declarations_dictionaryEnvironment,_declarations_infoTrees,_declarations_matchIO,_declarations_patternMatchWarnings,_declarations_self,_declarations_typeSignatures,_declarations_unboundNames,_declarations_uniqueChunk) =
            (_declarations (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique)
                           ([])
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_inferredTypes)
                           (_inheritedBDG)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_lhs_namesInScope)
                           (_lhs_orderedTypeSynonyms)
                           (_parentTree)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (emptyFM)
                           (_lhs_uniqueChunk))
    in  ( _aset'
         ,_declarations_betaUnique
         ,_declarations_collectChunkNumbers
         ,_errors ++ _declarations_collectErrors
         ,_warnings ++ _declarations_collectWarnings
         ,_constraints
         ,_declarations_declVarNames
         ,_declarations_dictionaryEnvironment
         ,_declarations_matchIO
         ,_declarations_patternMatchWarnings
         ,_parentTree
         ,_self
         ,let (environment, _, _) = concatBindingGroups _declarations_bindingGroups
              monos' = ftv (_lhs_substitution |-> _lhs_monos)
              make _ = generalize monos' _lhs_predicates . (_lhs_substitution |->)
          in mapFM make environment
         ,_declarations_unboundNames
         ,_chunkNr
         )
-- Constructor -------------------------------------------------
-- semantic domain
type T_Constructor = (Names) ->
                     ( (Constructor),(Names))
-- cata
sem_Constructor :: (Constructor) ->
                   (T_Constructor)
sem_Constructor ((Constructor_Constructor (_range) (_constructor) (_types))) =
    (sem_Constructor_Constructor ((sem_Range (_range))) ((sem_Name (_constructor))) ((sem_AnnotatedTypes (_types))))
sem_Constructor ((Constructor_Infix (_range) (_leftType) (_constructorOperator) (_rightType))) =
    (sem_Constructor_Infix ((sem_Range (_range))) ((sem_AnnotatedType (_leftType))) ((sem_Name (_constructorOperator))) ((sem_AnnotatedType (_rightType))))
sem_Constructor ((Constructor_Record (_range) (_constructor) (_fieldDeclarations))) =
    (sem_Constructor_Record ((sem_Range (_range))) ((sem_Name (_constructor))) ((sem_FieldDeclarations (_fieldDeclarations))))
sem_Constructor_Constructor :: (T_Range) ->
                               (T_Name) ->
                               (T_AnnotatedTypes) ->
                               (T_Constructor)
sem_Constructor_Constructor (_range) (_constructor) (_types) (_lhs_namesInScope) =
    let (_self) =
            Constructor_Constructor _range_self _constructor_self _types_self
        ( _range_self) =
            (_range )
        ( _constructor_self) =
            (_constructor )
        ( _types_self,_types_unboundNames) =
            (_types (_lhs_namesInScope))
    in  ( _self,_types_unboundNames)
sem_Constructor_Infix :: (T_Range) ->
                         (T_AnnotatedType) ->
                         (T_Name) ->
                         (T_AnnotatedType) ->
                         (T_Constructor)
sem_Constructor_Infix (_range) (_leftType) (_constructorOperator) (_rightType) (_lhs_namesInScope) =
    let (_self) =
            Constructor_Infix _range_self _leftType_self _constructorOperator_self _rightType_self
        ( _range_self) =
            (_range )
        ( _leftType_self,_leftType_unboundNames) =
            (_leftType (_lhs_namesInScope))
        ( _constructorOperator_self) =
            (_constructorOperator )
        ( _rightType_self,_rightType_unboundNames) =
            (_rightType (_lhs_namesInScope))
    in  ( _self,_leftType_unboundNames ++ _rightType_unboundNames)
sem_Constructor_Record :: (T_Range) ->
                          (T_Name) ->
                          (T_FieldDeclarations) ->
                          (T_Constructor)
sem_Constructor_Record (_range) (_constructor) (_fieldDeclarations) (_lhs_namesInScope) =
    let (_self) =
            Constructor_Record _range_self _constructor_self _fieldDeclarations_self
        ( _range_self) =
            (_range )
        ( _constructor_self) =
            (_constructor )
        ( _fieldDeclarations_self,_fieldDeclarations_unboundNames) =
            (_fieldDeclarations (_lhs_namesInScope))
    in  ( _self,_fieldDeclarations_unboundNames)
-- Constructors ------------------------------------------------
-- semantic domain
type T_Constructors = (Names) ->
                      ( (Constructors),(Names))
-- cata
sem_Constructors :: (Constructors) ->
                    (T_Constructors)
sem_Constructors (list) =
    (foldr (sem_Constructors_Cons) (sem_Constructors_Nil) ((map sem_Constructor list)))
sem_Constructors_Cons :: (T_Constructor) ->
                         (T_Constructors) ->
                         (T_Constructors)
sem_Constructors_Cons (_hd) (_tl) (_lhs_namesInScope) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self,_hd_unboundNames) =
            (_hd (_lhs_namesInScope))
        ( _tl_self,_tl_unboundNames) =
            (_tl (_lhs_namesInScope))
    in  ( _self,_hd_unboundNames ++ _tl_unboundNames)
sem_Constructors_Nil :: (T_Constructors)
sem_Constructors_Nil (_lhs_namesInScope) =
    let (_self) =
            []
    in  ( _self,[])
-- ContextItem -------------------------------------------------
-- semantic domain
type T_ContextItem = ( (ContextItem))
-- cata
sem_ContextItem :: (ContextItem) ->
                   (T_ContextItem)
sem_ContextItem ((ContextItem_ContextItem (_range) (_name) (_types))) =
    (sem_ContextItem_ContextItem ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Types (_types))))
sem_ContextItem_ContextItem :: (T_Range) ->
                               (T_Name) ->
                               (T_Types) ->
                               (T_ContextItem)
sem_ContextItem_ContextItem (_range) (_name) (_types) =
    let (_self) =
            ContextItem_ContextItem _range_self _name_self _types_self
        (_tyconEnv) =
            internalError "PartialSyntax.ag" "n/a" "ContextItem.ContextItem"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _types_self) =
            (_types )
    in  ( _self)
-- ContextItems ------------------------------------------------
-- semantic domain
type T_ContextItems = ( (ContextItems))
-- cata
sem_ContextItems :: (ContextItems) ->
                    (T_ContextItems)
sem_ContextItems (list) =
    (foldr (sem_ContextItems_Cons) (sem_ContextItems_Nil) ((map sem_ContextItem list)))
sem_ContextItems_Cons :: (T_ContextItem) ->
                         (T_ContextItems) ->
                         (T_ContextItems)
sem_ContextItems_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_ContextItems_Nil :: (T_ContextItems)
sem_ContextItems_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Declaration -------------------------------------------------
-- semantic domain
type T_Declaration = ([((Expression, [String]), Core_TypingStrategy)]) ->
                     (Predicates) ->
                     (Int) ->
                     (BindingGroups) ->
                     (ChunkNumberMap) ->
                     (ChunkNumberMap) ->
                     (TypeErrors) ->
                     (Warnings) ->
                     (Int) ->
                     (DictionaryEnvironment) ->
                     (ImportEnvironment) ->
                     (FiniteMap NameWithRange TpScheme) ->
                     (InheritedBDG) ->
                     (IO ()) ->
                     (Tps) ->
                     (Names) ->
                     (OrderedTypeSynonyms) ->
                     (InfoTree) ->
                     ([Warning]) ->
                     (Predicates) ->
                     (FixpointSubstitution) ->
                     (FiniteMap Name TpScheme) ->
                     (Int) ->
                     ( (Int),(BindingGroups),(ChunkNumberMap),(TypeErrors),(Warnings),(Names),(DictionaryEnvironment),(InfoTrees),(IO ()),([Warning]),(Declaration),(FiniteMap Name TpScheme),(Names),(Int))
-- cata
sem_Declaration :: (Declaration) ->
                   (T_Declaration)
sem_Declaration ((Declaration_Class (_range) (_context) (_simpletype) (_where))) =
    (sem_Declaration_Class ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_MaybeDeclarations (_where))))
sem_Declaration ((Declaration_Data (_range) (_context) (_simpletype) (_constructors) (_derivings))) =
    (sem_Declaration_Data ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_Constructors (_constructors))) ((sem_Names (_derivings))))
sem_Declaration ((Declaration_Default (_range) (_types))) =
    (sem_Declaration_Default ((sem_Range (_range))) ((sem_Types (_types))))
sem_Declaration ((Declaration_Empty (_range))) =
    (sem_Declaration_Empty ((sem_Range (_range))))
sem_Declaration ((Declaration_Fixity (_range) (_fixity) (_priority) (_operators))) =
    (sem_Declaration_Fixity ((sem_Range (_range))) ((sem_Fixity (_fixity))) ((sem_MaybeInt (_priority))) ((sem_Names (_operators))))
sem_Declaration ((Declaration_FunctionBindings (_range) (_bindings))) =
    (sem_Declaration_FunctionBindings ((sem_Range (_range))) ((sem_FunctionBindings (_bindings))))
sem_Declaration ((Declaration_Instance (_range) (_context) (_name) (_types) (_where))) =
    (sem_Declaration_Instance ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_Name (_name))) ((sem_Types (_types))) ((sem_MaybeDeclarations (_where))))
sem_Declaration ((Declaration_Newtype (_range) (_context) (_simpletype) (_constructor) (_derivings))) =
    (sem_Declaration_Newtype ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_Constructor (_constructor))) ((sem_Names (_derivings))))
sem_Declaration ((Declaration_PatternBinding (_range) (_pattern) (_righthandside))) =
    (sem_Declaration_PatternBinding ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_RightHandSide (_righthandside))))
sem_Declaration ((Declaration_Type (_range) (_simpletype) (_type))) =
    (sem_Declaration_Type ((sem_Range (_range))) ((sem_SimpleType (_simpletype))) ((sem_Type (_type))))
sem_Declaration ((Declaration_TypeSignature (_range) (_names) (_type))) =
    (sem_Declaration_TypeSignature ((sem_Range (_range))) ((sem_Names (_names))) ((sem_Type (_type))))
sem_Declaration_Class :: (T_Range) ->
                         (T_ContextItems) ->
                         (T_SimpleType) ->
                         (T_MaybeDeclarations) ->
                         (T_Declaration)
sem_Declaration_Class (_range)
                      (_context)
                      (_simpletype)
                      (_where)
                      (_lhs_allPatterns)
                      (_lhs_availablePredicates)
                      (_lhs_betaUnique)
                      (_lhs_bindingGroups)
                      (_lhs_chunkNumberMap)
                      (_lhs_collectChunkNumbers)
                      (_lhs_collectErrors)
                      (_lhs_collectWarnings)
                      (_lhs_currentChunk)
                      (_lhs_dictionaryEnvironment)
                      (_lhs_importEnvironment)
                      (_lhs_inferredTypes)
                      (_lhs_inheritedBDG)
                      (_lhs_matchIO)
                      (_lhs_monos)
                      (_lhs_namesInScope)
                      (_lhs_orderedTypeSynonyms)
                      (_lhs_parentTree)
                      (_lhs_patternMatchWarnings)
                      (_lhs_predicates)
                      (_lhs_substitution)
                      (_lhs_typeSignatures)
                      (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_Class _range_self _context_self _simpletype_self _where_self
        ((_assumptions,_constraints,_unboundNames)) =
            internalError "PartialSyntax.ag" "n/a" "Declaration.Class"
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_self) =
            (_simpletype )
        ( _where_assumptions,_where_betaUnique,_where_collectChunkNumbers,_where_collectErrors,_where_collectWarnings,_where_constraints,_where_dictionaryEnvironment,_where_infoTrees,_where_localTypes,_where_matchIO,_where_namesInScope,_where_patternMatchWarnings,_where_self,_where_unboundNames,_where_uniqueChunk) =
            (_where (_lhs_allPatterns)
                    (_assumptions)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_constraints)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_unboundNames)
                    (_lhs_uniqueChunk))
    in  ( _where_betaUnique,_lhs_bindingGroups,_where_collectChunkNumbers,_where_collectErrors,_where_collectWarnings,[],_where_dictionaryEnvironment,_where_infoTrees,_where_matchIO,_where_patternMatchWarnings,_self,_lhs_typeSignatures,_unboundNames,_where_uniqueChunk)
sem_Declaration_Data :: (T_Range) ->
                        (T_ContextItems) ->
                        (T_SimpleType) ->
                        (T_Constructors) ->
                        (T_Names) ->
                        (T_Declaration)
sem_Declaration_Data (_range)
                     (_context)
                     (_simpletype)
                     (_constructors)
                     (_derivings)
                     (_lhs_allPatterns)
                     (_lhs_availablePredicates)
                     (_lhs_betaUnique)
                     (_lhs_bindingGroups)
                     (_lhs_chunkNumberMap)
                     (_lhs_collectChunkNumbers)
                     (_lhs_collectErrors)
                     (_lhs_collectWarnings)
                     (_lhs_currentChunk)
                     (_lhs_dictionaryEnvironment)
                     (_lhs_importEnvironment)
                     (_lhs_inferredTypes)
                     (_lhs_inheritedBDG)
                     (_lhs_matchIO)
                     (_lhs_monos)
                     (_lhs_namesInScope)
                     (_lhs_orderedTypeSynonyms)
                     (_lhs_parentTree)
                     (_lhs_patternMatchWarnings)
                     (_lhs_predicates)
                     (_lhs_substitution)
                     (_lhs_typeSignatures)
                     (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_Data _range_self _context_self _simpletype_self _constructors_self _derivings_self
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_self) =
            (_simpletype )
        ( _constructors_self,_constructors_unboundNames) =
            (_constructors (_lhs_namesInScope))
        ( _derivings_self) =
            (_derivings )
    in  ( _lhs_betaUnique,_lhs_bindingGroups,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],_lhs_matchIO,_lhs_patternMatchWarnings,_self,_lhs_typeSignatures,_constructors_unboundNames,_lhs_uniqueChunk)
sem_Declaration_Default :: (T_Range) ->
                           (T_Types) ->
                           (T_Declaration)
sem_Declaration_Default (_range)
                        (_types)
                        (_lhs_allPatterns)
                        (_lhs_availablePredicates)
                        (_lhs_betaUnique)
                        (_lhs_bindingGroups)
                        (_lhs_chunkNumberMap)
                        (_lhs_collectChunkNumbers)
                        (_lhs_collectErrors)
                        (_lhs_collectWarnings)
                        (_lhs_currentChunk)
                        (_lhs_dictionaryEnvironment)
                        (_lhs_importEnvironment)
                        (_lhs_inferredTypes)
                        (_lhs_inheritedBDG)
                        (_lhs_matchIO)
                        (_lhs_monos)
                        (_lhs_namesInScope)
                        (_lhs_orderedTypeSynonyms)
                        (_lhs_parentTree)
                        (_lhs_patternMatchWarnings)
                        (_lhs_predicates)
                        (_lhs_substitution)
                        (_lhs_typeSignatures)
                        (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_Default _range_self _types_self
        (_infoTrees) =
            globalInfoError
        ( _range_self) =
            (_range )
        ( _types_self) =
            (_types )
    in  ( _lhs_betaUnique,_lhs_bindingGroups,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,_infoTrees,_lhs_matchIO,_lhs_patternMatchWarnings,_self,_lhs_typeSignatures,[],_lhs_uniqueChunk)
sem_Declaration_Empty :: (T_Range) ->
                         (T_Declaration)
sem_Declaration_Empty (_range)
                      (_lhs_allPatterns)
                      (_lhs_availablePredicates)
                      (_lhs_betaUnique)
                      (_lhs_bindingGroups)
                      (_lhs_chunkNumberMap)
                      (_lhs_collectChunkNumbers)
                      (_lhs_collectErrors)
                      (_lhs_collectWarnings)
                      (_lhs_currentChunk)
                      (_lhs_dictionaryEnvironment)
                      (_lhs_importEnvironment)
                      (_lhs_inferredTypes)
                      (_lhs_inheritedBDG)
                      (_lhs_matchIO)
                      (_lhs_monos)
                      (_lhs_namesInScope)
                      (_lhs_orderedTypeSynonyms)
                      (_lhs_parentTree)
                      (_lhs_patternMatchWarnings)
                      (_lhs_predicates)
                      (_lhs_substitution)
                      (_lhs_typeSignatures)
                      (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_betaUnique,_lhs_bindingGroups,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],_lhs_matchIO,_lhs_patternMatchWarnings,_self,_lhs_typeSignatures,[],_lhs_uniqueChunk)
sem_Declaration_Fixity :: (T_Range) ->
                          (T_Fixity) ->
                          (T_MaybeInt) ->
                          (T_Names) ->
                          (T_Declaration)
sem_Declaration_Fixity (_range)
                       (_fixity)
                       (_priority)
                       (_operators)
                       (_lhs_allPatterns)
                       (_lhs_availablePredicates)
                       (_lhs_betaUnique)
                       (_lhs_bindingGroups)
                       (_lhs_chunkNumberMap)
                       (_lhs_collectChunkNumbers)
                       (_lhs_collectErrors)
                       (_lhs_collectWarnings)
                       (_lhs_currentChunk)
                       (_lhs_dictionaryEnvironment)
                       (_lhs_importEnvironment)
                       (_lhs_inferredTypes)
                       (_lhs_inheritedBDG)
                       (_lhs_matchIO)
                       (_lhs_monos)
                       (_lhs_namesInScope)
                       (_lhs_orderedTypeSynonyms)
                       (_lhs_parentTree)
                       (_lhs_patternMatchWarnings)
                       (_lhs_predicates)
                       (_lhs_substitution)
                       (_lhs_typeSignatures)
                       (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_Fixity _range_self _fixity_self _priority_self _operators_self
        ( _range_self) =
            (_range )
        ( _fixity_self) =
            (_fixity )
        ( _priority_self) =
            (_priority )
        ( _operators_self) =
            (_operators )
    in  ( _lhs_betaUnique,_lhs_bindingGroups,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],_lhs_matchIO,_lhs_patternMatchWarnings,_self,_lhs_typeSignatures,[],_lhs_uniqueChunk)
sem_Declaration_FunctionBindings :: (T_Range) ->
                                    (T_FunctionBindings) ->
                                    (T_Declaration)
sem_Declaration_FunctionBindings (_range)
                                 (_bindings)
                                 (_lhs_allPatterns)
                                 (_lhs_availablePredicates)
                                 (_lhs_betaUnique)
                                 (_lhs_bindingGroups)
                                 (_lhs_chunkNumberMap)
                                 (_lhs_collectChunkNumbers)
                                 (_lhs_collectErrors)
                                 (_lhs_collectWarnings)
                                 (_lhs_currentChunk)
                                 (_lhs_dictionaryEnvironment)
                                 (_lhs_importEnvironment)
                                 (_lhs_inferredTypes)
                                 (_lhs_inheritedBDG)
                                 (_lhs_matchIO)
                                 (_lhs_monos)
                                 (_lhs_namesInScope)
                                 (_lhs_orderedTypeSynonyms)
                                 (_lhs_parentTree)
                                 (_lhs_patternMatchWarnings)
                                 (_lhs_predicates)
                                 (_lhs_substitution)
                                 (_lhs_typeSignatures)
                                 (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_FunctionBindings _range_self _bindings_self
        (_beta) =
            TVar _lhs_betaUnique
        (_betaRight) =
            TVar (_lhs_betaUnique + 1)
        (_betasLeft) =
            take _bindings_numberOfPatterns (map TVar [_lhs_betaUnique + 2..])
        (_newcon) =
            (_beta .==. foldr (.->.) _betaRight _betasLeft) _cinfo
        (_mybdggrp) =
            ( unitFM _bindings_name _beta
            , _bindings_assumptions
            , [ Node [ Phase (-1) [_newcon]
                     , Receive _lhs_betaUnique
                     , Node _bindings_constraintslist
                     ]
              ]
            )
        (_declPredicates) =
            let scheme = lookupWithDefaultFM _lhs_inferredTypes err (NameWithRange _bindings_name)
                (predicates :=> _) = getQualifiedType scheme
                err = internalError "TypeInferenceOverloading.ag" "n/a" "could not find type for function binding"
            in expandPredicates _lhs_orderedTypeSynonyms predicates
        (_cinfo) =
            resultConstraint "function bindings (INTERNAL ERROR)" _parentTree
               [ FolkloreConstraint, HasTrustFactor 10000.0, FuntionBindingEdge _bindings_numberOfPatterns ]
        (_localInfo) =
            LocalInfo { self = UHA_Decl _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo _bindings_infoTrees
        ( _range_self) =
            (_range )
        ( _bindings_argcount,_bindings_assumptions,_bindings_betaUnique,_bindings_collectChunkNumbers,_bindings_collectErrors,_bindings_collectWarnings,_bindings_constraintslist,_bindings_dictionaryEnvironment,_bindings_elementss,_bindings_infoTrees,_bindings_matchIO,_bindings_name,_bindings_numberOfPatterns,_bindings_patternMatchWarnings,_bindings_self,_bindings_unboundNames,_bindings_uniqueChunk,_bindings_unrwars) =
            (_bindings (_lhs_allPatterns)
                       (_declPredicates ++ _lhs_availablePredicates)
                       (_betaRight)
                       (_lhs_betaUnique + 2 + _bindings_numberOfPatterns)
                       (_betasLeft)
                       (_lhs_chunkNumberMap)
                       (_lhs_collectChunkNumbers)
                       (_lhs_collectErrors)
                       (_lhs_collectWarnings)
                       (findCurrentChunk _bindings_name _lhs_inheritedBDG)
                       (_lhs_dictionaryEnvironment)
                       (_lhs_importEnvironment)
                       (_lhs_inferredTypes)
                       (_lhs_matchIO)
                       (findMono _bindings_name _lhs_inheritedBDG ++ _lhs_monos)
                       (_lhs_namesInScope)
                       (_lhs_orderedTypeSynonyms)
                       (_parentTree)
                       (_lhs_patternMatchWarnings)
                       (_lhs_predicates)
                       (_lhs_substitution)
                       (_lhs_uniqueChunk))
    in  ( _bindings_betaUnique
         ,_mybdggrp : _lhs_bindingGroups
         ,_bindings_collectChunkNumbers
         ,_bindings_collectErrors
         ,_bindings_collectWarnings
         ,[_bindings_name]
         ,addForDeclaration _bindings_name _declPredicates _bindings_dictionaryEnvironment
         ,[_parentTree]
         ,_bindings_matchIO
         ,patternMatchWarnings _lhs_importEnvironment
                               _lhs_substitution
                               _beta
                               (take _bindings_argcount . fst . functionSpine)
                               _bindings_elementss
                               _range
                               (Just _bindings_name)
                               True
                               _bindings_unrwars
                               "function bindings"
                               "="
          ++ _bindings_patternMatchWarnings
         ,_self
         ,_lhs_typeSignatures
         ,_bindings_unboundNames
         ,_bindings_uniqueChunk
         )
sem_Declaration_Instance :: (T_Range) ->
                            (T_ContextItems) ->
                            (T_Name) ->
                            (T_Types) ->
                            (T_MaybeDeclarations) ->
                            (T_Declaration)
sem_Declaration_Instance (_range)
                         (_context)
                         (_name)
                         (_types)
                         (_where)
                         (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique)
                         (_lhs_bindingGroups)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_inheritedBDG)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_lhs_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_lhs_typeSignatures)
                         (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_Instance _range_self _context_self _name_self _types_self _where_self
        ((_assumptions,_constraints,_unboundNames)) =
            internalError "PartialSyntax.ag" "n/a" "Declaration.Instance"
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _name_self) =
            (_name )
        ( _types_self) =
            (_types )
        ( _where_assumptions,_where_betaUnique,_where_collectChunkNumbers,_where_collectErrors,_where_collectWarnings,_where_constraints,_where_dictionaryEnvironment,_where_infoTrees,_where_localTypes,_where_matchIO,_where_namesInScope,_where_patternMatchWarnings,_where_self,_where_unboundNames,_where_uniqueChunk) =
            (_where (_lhs_allPatterns)
                    (_assumptions)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_constraints)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_unboundNames)
                    (_lhs_uniqueChunk))
    in  ( _where_betaUnique,_lhs_bindingGroups,_where_collectChunkNumbers,_where_collectErrors,_where_collectWarnings,[],_where_dictionaryEnvironment,_where_infoTrees,_where_matchIO,_where_patternMatchWarnings,_self,_lhs_typeSignatures,_unboundNames,_where_uniqueChunk)
sem_Declaration_Newtype :: (T_Range) ->
                           (T_ContextItems) ->
                           (T_SimpleType) ->
                           (T_Constructor) ->
                           (T_Names) ->
                           (T_Declaration)
sem_Declaration_Newtype (_range)
                        (_context)
                        (_simpletype)
                        (_constructor)
                        (_derivings)
                        (_lhs_allPatterns)
                        (_lhs_availablePredicates)
                        (_lhs_betaUnique)
                        (_lhs_bindingGroups)
                        (_lhs_chunkNumberMap)
                        (_lhs_collectChunkNumbers)
                        (_lhs_collectErrors)
                        (_lhs_collectWarnings)
                        (_lhs_currentChunk)
                        (_lhs_dictionaryEnvironment)
                        (_lhs_importEnvironment)
                        (_lhs_inferredTypes)
                        (_lhs_inheritedBDG)
                        (_lhs_matchIO)
                        (_lhs_monos)
                        (_lhs_namesInScope)
                        (_lhs_orderedTypeSynonyms)
                        (_lhs_parentTree)
                        (_lhs_patternMatchWarnings)
                        (_lhs_predicates)
                        (_lhs_substitution)
                        (_lhs_typeSignatures)
                        (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_Newtype _range_self _context_self _simpletype_self _constructor_self _derivings_self
        (_infoTrees) =
            globalInfoError
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _simpletype_self) =
            (_simpletype )
        ( _constructor_self,_constructor_unboundNames) =
            (_constructor (_lhs_namesInScope))
        ( _derivings_self) =
            (_derivings )
    in  ( _lhs_betaUnique,_lhs_bindingGroups,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,_infoTrees,_lhs_matchIO,_lhs_patternMatchWarnings,_self,_lhs_typeSignatures,_constructor_unboundNames,_lhs_uniqueChunk)
sem_Declaration_PatternBinding :: (T_Range) ->
                                  (T_Pattern) ->
                                  (T_RightHandSide) ->
                                  (T_Declaration)
sem_Declaration_PatternBinding (_range)
                               (_pattern)
                               (_righthandside)
                               (_lhs_allPatterns)
                               (_lhs_availablePredicates)
                               (_lhs_betaUnique)
                               (_lhs_bindingGroups)
                               (_lhs_chunkNumberMap)
                               (_lhs_collectChunkNumbers)
                               (_lhs_collectErrors)
                               (_lhs_collectWarnings)
                               (_lhs_currentChunk)
                               (_lhs_dictionaryEnvironment)
                               (_lhs_importEnvironment)
                               (_lhs_inferredTypes)
                               (_lhs_inheritedBDG)
                               (_lhs_matchIO)
                               (_lhs_monos)
                               (_lhs_namesInScope)
                               (_lhs_orderedTypeSynonyms)
                               (_lhs_parentTree)
                               (_lhs_patternMatchWarnings)
                               (_lhs_predicates)
                               (_lhs_substitution)
                               (_lhs_typeSignatures)
                               (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_PatternBinding _range_self _pattern_self _righthandside_self
        (_newcon) =
            [ (_righthandside_beta .==. _pattern_beta) _cinfo ]
        (_mybdggrp) =
            ( _pattern_environment
            , _righthandside_assumptions
            , [ _newcon .>.
                Node [ _pattern_constraints
                     , _righthandside_constraints
                     ]
              ]
            )
        (_declPredicates) =
            case _pattern_self of
              Pattern_Variable _ name ->
                 let scheme = lookupWithDefaultFM _lhs_inferredTypes err (NameWithRange name)
                     (predicates :=> _) = getQualifiedType scheme
                     err = internalError "TypeInferenceOverloading.ag" "n/a" "could not find type for pattern binding"
                 in Just (name, expandPredicates _lhs_orderedTypeSynonyms predicates)
              _                  -> Nothing
        (_cinfo) =
            orphanConstraint 1 "right hand side" _parentTree
               [ ]
        (_localInfo) =
            LocalInfo { self = UHA_Decl _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_pattern_infoTree, _righthandside_infoTree]
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_pattern_self,_pattern_unboundNames) =
            (_pattern (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
        ( _righthandside_assumptions,_righthandside_beta,_righthandside_betaUnique,_righthandside_collectChunkNumbers,_righthandside_collectErrors,_righthandside_collectWarnings,_righthandside_constraints,_righthandside_dictionaryEnvironment,_righthandside_fallthrough,_righthandside_infoTree,_righthandside_matchIO,_righthandside_patternMatchWarnings,_righthandside_self,_righthandside_unboundNames,_righthandside_uniqueChunk) =
            (_righthandside (_lhs_allPatterns)
                            ("=")
                            (case _declPredicates of
                                Just (n, ps) -> ps ++ _lhs_availablePredicates
                                Nothing      -> _lhs_availablePredicates)
                            (_pattern_betaUnique)
                            (_lhs_chunkNumberMap)
                            (_lhs_collectChunkNumbers)
                            (_lhs_collectErrors)
                            (_lhs_collectWarnings)
                            (findCurrentChunk (head (keysFM _pattern_environment)) _lhs_inheritedBDG)
                            (_lhs_dictionaryEnvironment)
                            (_lhs_importEnvironment)
                            (_lhs_inferredTypes)
                            (_lhs_matchIO)
                            (findMono (head (keysFM _pattern_environment)) _lhs_inheritedBDG ++ _lhs_monos)
                            (_lhs_namesInScope)
                            (_lhs_orderedTypeSynonyms)
                            (_parentTree)
                            (_pattern_patternMatchWarnings)
                            (_lhs_predicates)
                            (_lhs_substitution)
                            (_lhs_uniqueChunk))
    in  ( _righthandside_betaUnique
         ,_mybdggrp : _lhs_bindingGroups
         ,_righthandside_collectChunkNumbers
         ,_righthandside_collectErrors
         ,_righthandside_collectWarnings
         ,_pattern_patVarNames
         ,case _declPredicates of
             Just (n, ps) -> addForDeclaration n ps _righthandside_dictionaryEnvironment
             Nothing      -> _righthandside_dictionaryEnvironment
         ,[_parentTree]
         ,_righthandside_matchIO
         ,patternMatchWarnings _lhs_importEnvironment
                               _lhs_substitution
                               _pattern_beta
                               (:[])
                               [(_pattern_elements, _righthandside_fallthrough)]
                               _range
                               Nothing
                               False
                               []
                               "pattern binding"
                               "="
          ++ _righthandside_patternMatchWarnings
         ,_self
         ,_lhs_typeSignatures
         ,_pattern_unboundNames ++ _righthandside_unboundNames
         ,_righthandside_uniqueChunk
         )
sem_Declaration_Type :: (T_Range) ->
                        (T_SimpleType) ->
                        (T_Type) ->
                        (T_Declaration)
sem_Declaration_Type (_range)
                     (_simpletype)
                     (_type)
                     (_lhs_allPatterns)
                     (_lhs_availablePredicates)
                     (_lhs_betaUnique)
                     (_lhs_bindingGroups)
                     (_lhs_chunkNumberMap)
                     (_lhs_collectChunkNumbers)
                     (_lhs_collectErrors)
                     (_lhs_collectWarnings)
                     (_lhs_currentChunk)
                     (_lhs_dictionaryEnvironment)
                     (_lhs_importEnvironment)
                     (_lhs_inferredTypes)
                     (_lhs_inheritedBDG)
                     (_lhs_matchIO)
                     (_lhs_monos)
                     (_lhs_namesInScope)
                     (_lhs_orderedTypeSynonyms)
                     (_lhs_parentTree)
                     (_lhs_patternMatchWarnings)
                     (_lhs_predicates)
                     (_lhs_substitution)
                     (_lhs_typeSignatures)
                     (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_Type _range_self _simpletype_self _type_self
        ( _range_self) =
            (_range )
        ( _simpletype_self) =
            (_simpletype )
        ( _type_self) =
            (_type )
    in  ( _lhs_betaUnique,_lhs_bindingGroups,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],_lhs_matchIO,_lhs_patternMatchWarnings,_self,_lhs_typeSignatures,[],_lhs_uniqueChunk)
sem_Declaration_TypeSignature :: (T_Range) ->
                                 (T_Names) ->
                                 (T_Type) ->
                                 (T_Declaration)
sem_Declaration_TypeSignature (_range)
                              (_names)
                              (_type)
                              (_lhs_allPatterns)
                              (_lhs_availablePredicates)
                              (_lhs_betaUnique)
                              (_lhs_bindingGroups)
                              (_lhs_chunkNumberMap)
                              (_lhs_collectChunkNumbers)
                              (_lhs_collectErrors)
                              (_lhs_collectWarnings)
                              (_lhs_currentChunk)
                              (_lhs_dictionaryEnvironment)
                              (_lhs_importEnvironment)
                              (_lhs_inferredTypes)
                              (_lhs_inheritedBDG)
                              (_lhs_matchIO)
                              (_lhs_monos)
                              (_lhs_namesInScope)
                              (_lhs_orderedTypeSynonyms)
                              (_lhs_parentTree)
                              (_lhs_patternMatchWarnings)
                              (_lhs_predicates)
                              (_lhs_substitution)
                              (_lhs_typeSignatures)
                              (_lhs_uniqueChunk) =
    let (_self) =
            Declaration_TypeSignature _range_self _names_self _type_self
        (_typeScheme) =
            makeTpSchemeFromType _type_self
        ( _range_self) =
            (_range )
        ( _names_self) =
            (_names )
        ( _type_self) =
            (_type )
    in  ( _lhs_betaUnique,_lhs_bindingGroups,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],_lhs_matchIO,_lhs_patternMatchWarnings,_self,addListToFM _lhs_typeSignatures [ (name, _typeScheme) | name <- _names_self ],[],_lhs_uniqueChunk)
-- Declarations ------------------------------------------------
-- semantic domain
type T_Declarations = ([((Expression, [String]), Core_TypingStrategy)]) ->
                      (Predicates) ->
                      (Int) ->
                      (BindingGroups) ->
                      (ChunkNumberMap) ->
                      (ChunkNumberMap) ->
                      (TypeErrors) ->
                      (Warnings) ->
                      (Int) ->
                      (DictionaryEnvironment) ->
                      (ImportEnvironment) ->
                      (FiniteMap NameWithRange TpScheme) ->
                      (InheritedBDG) ->
                      (IO ()) ->
                      (Tps) ->
                      (Names) ->
                      (OrderedTypeSynonyms) ->
                      (InfoTree) ->
                      ([Warning]) ->
                      (Predicates) ->
                      (FixpointSubstitution) ->
                      (FiniteMap Name TpScheme) ->
                      (Int) ->
                      ( (Int),(BindingGroups),(ChunkNumberMap),(TypeErrors),(Warnings),(Names),(DictionaryEnvironment),(InfoTrees),(IO ()),([Warning]),(Declarations),(FiniteMap Name TpScheme),(Names),(Int))
-- cata
sem_Declarations :: (Declarations) ->
                    (T_Declarations)
sem_Declarations (list) =
    (foldr (sem_Declarations_Cons) (sem_Declarations_Nil) ((map sem_Declaration list)))
sem_Declarations_Cons :: (T_Declaration) ->
                         (T_Declarations) ->
                         (T_Declarations)
sem_Declarations_Cons (_hd)
                      (_tl)
                      (_lhs_allPatterns)
                      (_lhs_availablePredicates)
                      (_lhs_betaUnique)
                      (_lhs_bindingGroups)
                      (_lhs_chunkNumberMap)
                      (_lhs_collectChunkNumbers)
                      (_lhs_collectErrors)
                      (_lhs_collectWarnings)
                      (_lhs_currentChunk)
                      (_lhs_dictionaryEnvironment)
                      (_lhs_importEnvironment)
                      (_lhs_inferredTypes)
                      (_lhs_inheritedBDG)
                      (_lhs_matchIO)
                      (_lhs_monos)
                      (_lhs_namesInScope)
                      (_lhs_orderedTypeSynonyms)
                      (_lhs_parentTree)
                      (_lhs_patternMatchWarnings)
                      (_lhs_predicates)
                      (_lhs_substitution)
                      (_lhs_typeSignatures)
                      (_lhs_uniqueChunk) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_betaUnique,_hd_bindingGroups,_hd_collectChunkNumbers,_hd_collectErrors,_hd_collectWarnings,_hd_declVarNames,_hd_dictionaryEnvironment,_hd_infoTrees,_hd_matchIO,_hd_patternMatchWarnings,_hd_self,_hd_typeSignatures,_hd_unboundNames,_hd_uniqueChunk) =
            (_hd (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_lhs_betaUnique)
                 (_lhs_bindingGroups)
                 (_lhs_chunkNumberMap)
                 (_lhs_collectChunkNumbers)
                 (_lhs_collectErrors)
                 (_lhs_collectWarnings)
                 (_lhs_currentChunk)
                 (_lhs_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_lhs_inheritedBDG)
                 (_lhs_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_lhs_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_lhs_typeSignatures)
                 (_lhs_uniqueChunk))
        ( _tl_betaUnique,_tl_bindingGroups,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_declVarNames,_tl_dictionaryEnvironment,_tl_infoTrees,_tl_matchIO,_tl_patternMatchWarnings,_tl_self,_tl_typeSignatures,_tl_unboundNames,_tl_uniqueChunk) =
            (_tl (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_hd_betaUnique)
                 (_hd_bindingGroups)
                 (_lhs_chunkNumberMap)
                 (_hd_collectChunkNumbers)
                 (_hd_collectErrors)
                 (_hd_collectWarnings)
                 (_lhs_currentChunk)
                 (_hd_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_lhs_inheritedBDG)
                 (_hd_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_hd_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_hd_typeSignatures)
                 (_hd_uniqueChunk))
    in  ( _tl_betaUnique,_tl_bindingGroups,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_hd_declVarNames ++ _tl_declVarNames,_tl_dictionaryEnvironment,_hd_infoTrees ++ _tl_infoTrees,_tl_matchIO,_tl_patternMatchWarnings,_self,_tl_typeSignatures,_hd_unboundNames ++ _tl_unboundNames,_tl_uniqueChunk)
sem_Declarations_Nil :: (T_Declarations)
sem_Declarations_Nil (_lhs_allPatterns)
                     (_lhs_availablePredicates)
                     (_lhs_betaUnique)
                     (_lhs_bindingGroups)
                     (_lhs_chunkNumberMap)
                     (_lhs_collectChunkNumbers)
                     (_lhs_collectErrors)
                     (_lhs_collectWarnings)
                     (_lhs_currentChunk)
                     (_lhs_dictionaryEnvironment)
                     (_lhs_importEnvironment)
                     (_lhs_inferredTypes)
                     (_lhs_inheritedBDG)
                     (_lhs_matchIO)
                     (_lhs_monos)
                     (_lhs_namesInScope)
                     (_lhs_orderedTypeSynonyms)
                     (_lhs_parentTree)
                     (_lhs_patternMatchWarnings)
                     (_lhs_predicates)
                     (_lhs_substitution)
                     (_lhs_typeSignatures)
                     (_lhs_uniqueChunk) =
    let (_self) =
            []
    in  ( _lhs_betaUnique,_lhs_bindingGroups,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],_lhs_matchIO,_lhs_patternMatchWarnings,_self,_lhs_typeSignatures,[],_lhs_uniqueChunk)
-- Export ------------------------------------------------------
-- semantic domain
type T_Export = ( (Export))
-- cata
sem_Export :: (Export) ->
              (T_Export)
sem_Export ((Export_Module (_range) (_name))) =
    (sem_Export_Module ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export ((Export_TypeOrClass (_range) (_name) (_names))) =
    (sem_Export_TypeOrClass ((sem_Range (_range))) ((sem_Name (_name))) ((sem_MaybeNames (_names))))
sem_Export ((Export_TypeOrClassComplete (_range) (_name))) =
    (sem_Export_TypeOrClassComplete ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export ((Export_Variable (_range) (_name))) =
    (sem_Export_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export_Module :: (T_Range) ->
                     (T_Name) ->
                     (T_Export)
sem_Export_Module (_range) (_name) =
    let (_self) =
            Export_Module _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Export_TypeOrClass :: (T_Range) ->
                          (T_Name) ->
                          (T_MaybeNames) ->
                          (T_Export)
sem_Export_TypeOrClass (_range) (_name) (_names) =
    let (_self) =
            Export_TypeOrClass _range_self _name_self _names_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _names_self) =
            (_names )
    in  ( _self)
sem_Export_TypeOrClassComplete :: (T_Range) ->
                                  (T_Name) ->
                                  (T_Export)
sem_Export_TypeOrClassComplete (_range) (_name) =
    let (_self) =
            Export_TypeOrClassComplete _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Export_Variable :: (T_Range) ->
                       (T_Name) ->
                       (T_Export)
sem_Export_Variable (_range) (_name) =
    let (_self) =
            Export_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
-- Exports -----------------------------------------------------
-- semantic domain
type T_Exports = ( (Exports))
-- cata
sem_Exports :: (Exports) ->
               (T_Exports)
sem_Exports (list) =
    (foldr (sem_Exports_Cons) (sem_Exports_Nil) ((map sem_Export list)))
sem_Exports_Cons :: (T_Export) ->
                    (T_Exports) ->
                    (T_Exports)
sem_Exports_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Exports_Nil :: (T_Exports)
sem_Exports_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Expression --------------------------------------------------
-- semantic domain
type T_Expression = ([((Expression, [String]), Core_TypingStrategy)]) ->
                    (Predicates) ->
                    (Int) ->
                    (ChunkNumberMap) ->
                    (ChunkNumberMap) ->
                    (TypeErrors) ->
                    (Warnings) ->
                    (Int) ->
                    (DictionaryEnvironment) ->
                    (ImportEnvironment) ->
                    (FiniteMap NameWithRange TpScheme) ->
                    (IO ()) ->
                    (Tps) ->
                    (Names) ->
                    (OrderedTypeSynonyms) ->
                    (InfoTree) ->
                    ([Warning]) ->
                    (Predicates) ->
                    (FixpointSubstitution) ->
                    ([(Expression     , [String])]) ->
                    (Int) ->
                    (Int) ->
                    ( (Assumptions),(Tp),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(InfoTree),(IO ()),([Maybe (MetaVariableTable MetaVariableInfo)]),([Warning]),(Expression),(Names),(Int),(Int))
-- cata
sem_Expression :: (Expression) ->
                  (T_Expression)
sem_Expression ((Expression_Case (_range) (_expression) (_alternatives))) =
    (sem_Expression_Case ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Alternatives (_alternatives))))
sem_Expression ((Expression_Comprehension (_range) (_expression) (_qualifiers))) =
    (sem_Expression_Comprehension ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Qualifiers (_qualifiers))))
sem_Expression ((Expression_Constructor (_range) (_name))) =
    (sem_Expression_Constructor ((sem_Range (_range))) ((sem_Name (_name))))
sem_Expression ((Expression_Do (_range) (_statements))) =
    (sem_Expression_Do ((sem_Range (_range))) ((sem_Statements (_statements))))
sem_Expression ((Expression_Enum (_range) (_from) (_then) (_to))) =
    (sem_Expression_Enum ((sem_Range (_range))) ((sem_Expression (_from))) ((sem_MaybeExpression (_then))) ((sem_MaybeExpression (_to))))
sem_Expression ((Expression_If (_range) (_guardExpression) (_thenExpression) (_elseExpression))) =
    (sem_Expression_If ((sem_Range (_range))) ((sem_Expression (_guardExpression))) ((sem_Expression (_thenExpression))) ((sem_Expression (_elseExpression))))
sem_Expression ((Expression_InfixApplication (_range) (_leftExpression) (_operator) (_rightExpression))) =
    (sem_Expression_InfixApplication ((sem_Range (_range))) ((sem_MaybeExpression (_leftExpression))) ((sem_Expression (_operator))) ((sem_MaybeExpression (_rightExpression))))
sem_Expression ((Expression_Lambda (_range) (_patterns) (_expression))) =
    (sem_Expression_Lambda ((sem_Range (_range))) ((sem_Patterns (_patterns))) ((sem_Expression (_expression))))
sem_Expression ((Expression_Let (_range) (_declarations) (_expression))) =
    (sem_Expression_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))) ((sem_Expression (_expression))))
sem_Expression ((Expression_List (_range) (_expressions))) =
    (sem_Expression_List ((sem_Range (_range))) ((sem_Expressions (_expressions))))
sem_Expression ((Expression_Literal (_range) (_literal))) =
    (sem_Expression_Literal ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Expression ((Expression_Negate (_range) (_expression))) =
    (sem_Expression_Negate ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_NegateFloat (_range) (_expression))) =
    (sem_Expression_NegateFloat ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_NormalApplication (_range) (_function) (_arguments))) =
    (sem_Expression_NormalApplication ((sem_Range (_range))) ((sem_Expression (_function))) ((sem_Expressions (_arguments))))
sem_Expression ((Expression_Parenthesized (_range) (_expression))) =
    (sem_Expression_Parenthesized ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_RecordConstruction (_range) (_name) (_recordExpressionBindings))) =
    (sem_Expression_RecordConstruction ((sem_Range (_range))) ((sem_Name (_name))) ((sem_RecordExpressionBindings (_recordExpressionBindings))))
sem_Expression ((Expression_RecordUpdate (_range) (_expression) (_recordExpressionBindings))) =
    (sem_Expression_RecordUpdate ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_RecordExpressionBindings (_recordExpressionBindings))))
sem_Expression ((Expression_Tuple (_range) (_expressions))) =
    (sem_Expression_Tuple ((sem_Range (_range))) ((sem_Expressions (_expressions))))
sem_Expression ((Expression_Typed (_range) (_expression) (_type))) =
    (sem_Expression_Typed ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Type (_type))))
sem_Expression ((Expression_Variable (_range) (_name))) =
    (sem_Expression_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Expression_Case :: (T_Range) ->
                       (T_Expression) ->
                       (T_Alternatives) ->
                       (T_Expression)
sem_Expression_Case (_range)
                    (_expression)
                    (_alternatives)
                    (_lhs_allPatterns)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_tryPatterns)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Case _range_self _expression_self _alternatives_self
        (_constraints) =
            Node [ _newcon .<. _expression_constraints
                 , Node _alternatives_constraintslist
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        (_beta') =
            TVar (_lhs_betaUnique + 1)
        (_newcon) =
            [ (_expression_beta .==. _beta') _cinfo ]
        (_cinfo) =
            childConstraint 0 "scrutinee of case expression" _parentTree
               []
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_expression_infoTree : _alternatives_infoTrees)
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique + 2)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
        ( _alternatives_assumptions,_alternatives_betaUnique,_alternatives_collectChunkNumbers,_alternatives_collectErrors,_alternatives_collectWarnings,_alternatives_constraintslist,_alternatives_dictionaryEnvironment,_alternatives_elementss,_alternatives_infoTrees,_alternatives_matchIO,_alternatives_patternMatchWarnings,_alternatives_self,_alternatives_unboundNames,_alternatives_uniqueChunk,_alternatives_unrwars) =
            (_alternatives (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_beta')
                           (_beta)
                           (_expression_betaUnique)
                           (_lhs_chunkNumberMap)
                           (_expression_collectChunkNumbers)
                           (_expression_collectErrors)
                           (_expression_collectWarnings)
                           (_lhs_currentChunk)
                           (_expression_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_lhs_inferredTypes)
                           (_expression_matchIO)
                           (_lhs_monos)
                           (_lhs_namesInScope)
                           (length _alternatives_constraintslist)
                           (_lhs_orderedTypeSynonyms)
                           (_parentTree)
                           (_expression_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (_expression_uniqueChunk))
    in  ( _expression_assumptions `combine` _alternatives_assumptions
         ,_beta
         ,_alternatives_betaUnique
         ,_alternatives_collectChunkNumbers
         ,_alternatives_collectErrors
         ,_alternatives_collectWarnings
         ,_constraints
         ,_alternatives_dictionaryEnvironment
         ,_parentTree
         ,_alternatives_matchIO
         ,matchOnlyVariable _infoTuple _lhs_tryPatterns
         ,patternMatchWarnings _lhs_importEnvironment
                               _lhs_substitution
                               _expression_beta
                               (:[])
                               _alternatives_elementss
                               _range
                               Nothing
                               False
                               _alternatives_unrwars
                               "case expression"
                               "->"
          ++ _alternatives_patternMatchWarnings
         ,_self
         ,_expression_unboundNames ++ _alternatives_unboundNames
         ,_alternatives_uniqueChunk
         ,_expression_uniqueSecondRound
         )
sem_Expression_Comprehension :: (T_Range) ->
                                (T_Expression) ->
                                (T_Qualifiers) ->
                                (T_Expression)
sem_Expression_Comprehension (_range)
                             (_expression)
                             (_qualifiers)
                             (_lhs_allPatterns)
                             (_lhs_availablePredicates)
                             (_lhs_betaUnique)
                             (_lhs_chunkNumberMap)
                             (_lhs_collectChunkNumbers)
                             (_lhs_collectErrors)
                             (_lhs_collectWarnings)
                             (_lhs_currentChunk)
                             (_lhs_dictionaryEnvironment)
                             (_lhs_importEnvironment)
                             (_lhs_inferredTypes)
                             (_lhs_matchIO)
                             (_lhs_monos)
                             (_lhs_namesInScope)
                             (_lhs_orderedTypeSynonyms)
                             (_lhs_parentTree)
                             (_lhs_patternMatchWarnings)
                             (_lhs_predicates)
                             (_lhs_substitution)
                             (_lhs_tryPatterns)
                             (_lhs_uniqueChunk)
                             (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Comprehension _range_self _expression_self _qualifiers_self
        (_constraints) =
            _newcon .>. Node [ _qualifiers_constraints ]
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (listType _expression_beta .==. _beta) _cinfo ]
        (_cinfo) =
            resultConstraint "list comprehension" _parentTree
               [ FolkloreConstraint ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo _qualifiers_infoTrees
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique + 1)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_qualifiers_monos)
                         (_qualifiers_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
        ( _qualifiers_assumptions,_qualifiers_betaUnique,_qualifiers_collectChunkNumbers,_qualifiers_collectErrors,_qualifiers_collectWarnings,_qualifiers_constraints,_qualifiers_dictionaryEnvironment,_qualifiers_infoTrees,_qualifiers_matchIO,_qualifiers_monos,_qualifiers_namesInScope,_qualifiers_patternMatchWarnings,_qualifiers_self,_qualifiers_unboundNames,_qualifiers_uniqueChunk,_qualifiers_uniqueSecondRound) =
            (_qualifiers (_lhs_allPatterns)
                         (_expression_assumptions)
                         (_lhs_availablePredicates)
                         (_expression_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_expression_collectChunkNumbers)
                         (_expression_collectErrors)
                         (_expression_collectWarnings)
                         (_expression_constraints)
                         (_lhs_currentChunk)
                         (_expression_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_expression_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_expression_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_expression_unboundNames)
                         (_expression_uniqueChunk)
                         (_expression_uniqueSecondRound))
    in  ( _qualifiers_assumptions,_beta,_qualifiers_betaUnique,_qualifiers_collectChunkNumbers,_qualifiers_collectErrors,_qualifiers_collectWarnings,_constraints,_qualifiers_dictionaryEnvironment,_parentTree,_qualifiers_matchIO,matchOnlyVariable _infoTuple _lhs_tryPatterns,_qualifiers_patternMatchWarnings,_self,_qualifiers_unboundNames,_qualifiers_uniqueChunk,_qualifiers_uniqueSecondRound)
sem_Expression_Constructor :: (T_Range) ->
                              (T_Name) ->
                              (T_Expression)
sem_Expression_Constructor (_range)
                           (_name)
                           (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique)
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_lhs_inferredTypes)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_lhs_namesInScope)
                           (_lhs_orderedTypeSynonyms)
                           (_lhs_parentTree)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (_lhs_tryPatterns)
                           (_lhs_uniqueChunk)
                           (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Constructor _range_self _name_self
        (_constraints) =
            listTree _newcon
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            case lookupFM (valueConstructors _lhs_importEnvironment) _name_self of
               Nothing  -> []
               Just ctp -> [ (_beta .::. ctp) _cinfo ]
        (_cinfo) =
            resultConstraint "constructor" _parentTree
               [ FolkloreConstraint, HasTrustFactor 10.0, IsImported ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        (((),_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match0 _infoTuple _lhs_uniqueSecondRound
                   (match_Expression_Constructor _name_self)
                   _lhs_tryPatterns _lhs_allPatterns
                   []
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( noAssumptions,_beta,_lhs_betaUnique + 1,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_newConstraintSet,_lhs_dictionaryEnvironment,_parentTree,_lhs_matchIO >> _ioMatch,_matches,_lhs_patternMatchWarnings,_self,[],_lhs_uniqueChunk,_newUnique)
sem_Expression_Do :: (T_Range) ->
                     (T_Statements) ->
                     (T_Expression)
sem_Expression_Do (_range)
                  (_statements)
                  (_lhs_allPatterns)
                  (_lhs_availablePredicates)
                  (_lhs_betaUnique)
                  (_lhs_chunkNumberMap)
                  (_lhs_collectChunkNumbers)
                  (_lhs_collectErrors)
                  (_lhs_collectWarnings)
                  (_lhs_currentChunk)
                  (_lhs_dictionaryEnvironment)
                  (_lhs_importEnvironment)
                  (_lhs_inferredTypes)
                  (_lhs_matchIO)
                  (_lhs_monos)
                  (_lhs_namesInScope)
                  (_lhs_orderedTypeSynonyms)
                  (_lhs_parentTree)
                  (_lhs_patternMatchWarnings)
                  (_lhs_predicates)
                  (_lhs_substitution)
                  (_lhs_tryPatterns)
                  (_lhs_uniqueChunk)
                  (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Do _range_self _statements_self
        (_constraints) =
            emptyTree
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            case _statements_generatorBeta of
               Nothing -> []
               Just b  -> [ (ioType b .==. _beta) _cinfo ]
        (_cinfo) =
            resultConstraint "do-expression" _parentTree
               [ FolkloreConstraint ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo _statements_infoTrees
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ( _range_self) =
            (_range )
        ( _statements_assumptions,_statements_betaUnique,_statements_collectChunkNumbers,_statements_collectErrors,_statements_collectWarnings,_statements_constraints,_statements_dictionaryEnvironment,_statements_generatorBeta,_statements_infoTrees,_statements_matchIO,_statements_namesInScope,_statements_patternMatchWarnings,_statements_self,_statements_unboundNames,_statements_uniqueChunk,_statements_uniqueSecondRound) =
            (_statements (_lhs_allPatterns)
                         (noAssumptions)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique + 1)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_constraints)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (Nothing)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _statements_assumptions,_beta,_statements_betaUnique,_statements_collectChunkNumbers,_statements_collectErrors,_statements_collectWarnings,Node [ _newcon .<. _statements_constraints ],_statements_dictionaryEnvironment,_parentTree,_statements_matchIO,matchOnlyVariable _infoTuple _lhs_tryPatterns,_statements_patternMatchWarnings,_self,_statements_unboundNames,_statements_uniqueChunk,_statements_uniqueSecondRound)
sem_Expression_Enum :: (T_Range) ->
                       (T_Expression) ->
                       (T_MaybeExpression) ->
                       (T_MaybeExpression) ->
                       (T_Expression)
sem_Expression_Enum (_range)
                    (_from)
                    (_then)
                    (_to)
                    (_lhs_allPatterns)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_tryPatterns)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Enum _range_self _from_self _then_self _to_self
        (_constraints) =
            [ (listType intType .==. _beta) _cinfoResult ] .>.
            Node [ _conFrom .<. _from_constraints
                 , _conThen .<. _then_constraints
                 , _conTo   .<. _to_constraints
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        (_conFrom) =
            [ (_from_beta .==. intType) _cinfoFrom ]
        (_conThen) =
            [ (_then_beta .==. intType) _cinfoThen ]
        (_conTo) =
            [ (_to_beta   .==. intType) _cinfoTo   ]
        (_cinfoFrom) =
            childConstraint 0 "enumeration" _parentTree
               []
        (_cinfoThen) =
            childConstraint 1 "enumeration" _parentTree
               []
        (_toChildNr) =
            1 + length _then_infoTrees
        (_cinfoTo) =
            childConstraint _toChildNr "enumeration" _parentTree
               []
        (_cinfoResult) =
            resultConstraint "enumeration" _parentTree
               [ FolkloreConstraint ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_from_infoTree : _then_infoTrees ++ _to_infoTrees)
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        (((_t1,_t2,_t3),_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match3 _infoTuple _to_uniqueSecondRound
                   match_Expression_Enum
                   _lhs_tryPatterns _lhs_allPatterns
                   [_from_matches, _then_matches, _to_matches]
        ( _range_self) =
            (_range )
        ( _from_assumptions,_from_beta,_from_betaUnique,_from_collectChunkNumbers,_from_collectErrors,_from_collectWarnings,_from_constraints,_from_dictionaryEnvironment,_from_infoTree,_from_matchIO,_from_matches,_from_patternMatchWarnings,_from_self,_from_unboundNames,_from_uniqueChunk,_from_uniqueSecondRound) =
            (_from (_lhs_allPatterns)
                   (_lhs_availablePredicates)
                   (_lhs_betaUnique + 1)
                   (_lhs_chunkNumberMap)
                   (_lhs_collectChunkNumbers)
                   (_lhs_collectErrors)
                   (_lhs_collectWarnings)
                   (_lhs_currentChunk)
                   (_lhs_dictionaryEnvironment)
                   (_lhs_importEnvironment)
                   (_lhs_inferredTypes)
                   (_lhs_matchIO)
                   (_lhs_monos)
                   (_lhs_namesInScope)
                   (_lhs_orderedTypeSynonyms)
                   (_parentTree)
                   (_lhs_patternMatchWarnings)
                   (_lhs_predicates)
                   (_lhs_substitution)
                   (_t1)
                   (_lhs_uniqueChunk)
                   (_lhs_uniqueSecondRound))
        ( _then_assumptions,_then_beta,_then_betaUnique,_then_collectChunkNumbers,_then_collectErrors,_then_collectWarnings,_then_constraints,_then_dictionaryEnvironment,_then_infoTrees,_then_matchIO,_then_matches,_then_patternMatchWarnings,_then_section,_then_self,_then_unboundNames,_then_uniqueChunk,_then_uniqueSecondRound) =
            (_then (_lhs_allPatterns)
                   (_lhs_availablePredicates)
                   (_from_betaUnique)
                   (_lhs_chunkNumberMap)
                   (_from_collectChunkNumbers)
                   (_from_collectErrors)
                   (_from_collectWarnings)
                   (_lhs_currentChunk)
                   (_from_dictionaryEnvironment)
                   (_lhs_importEnvironment)
                   (_lhs_inferredTypes)
                   (_from_matchIO)
                   (_lhs_monos)
                   (_lhs_namesInScope)
                   (_lhs_orderedTypeSynonyms)
                   (_parentTree)
                   (_from_patternMatchWarnings)
                   (_lhs_predicates)
                   (_lhs_substitution)
                   (_t2)
                   (_from_uniqueChunk)
                   (_from_uniqueSecondRound))
        ( _to_assumptions,_to_beta,_to_betaUnique,_to_collectChunkNumbers,_to_collectErrors,_to_collectWarnings,_to_constraints,_to_dictionaryEnvironment,_to_infoTrees,_to_matchIO,_to_matches,_to_patternMatchWarnings,_to_section,_to_self,_to_unboundNames,_to_uniqueChunk,_to_uniqueSecondRound) =
            (_to (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_then_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_then_collectChunkNumbers)
                 (_then_collectErrors)
                 (_then_collectWarnings)
                 (_lhs_currentChunk)
                 (_then_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_then_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_parentTree)
                 (_then_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_t3)
                 (_then_uniqueChunk)
                 (_then_uniqueSecondRound))
    in  ( _from_assumptions `combine` _then_assumptions `combine` _to_assumptions,_beta,_to_betaUnique,_to_collectChunkNumbers,_to_collectErrors,_to_collectWarnings,_newConstraintSet,_to_dictionaryEnvironment,_parentTree,_to_matchIO >> _ioMatch,_matches,_to_patternMatchWarnings,_self,_from_unboundNames ++ _then_unboundNames ++ _to_unboundNames,_to_uniqueChunk,_newUnique)
sem_Expression_If :: (T_Range) ->
                     (T_Expression) ->
                     (T_Expression) ->
                     (T_Expression) ->
                     (T_Expression)
sem_Expression_If (_range)
                  (_guardExpression)
                  (_thenExpression)
                  (_elseExpression)
                  (_lhs_allPatterns)
                  (_lhs_availablePredicates)
                  (_lhs_betaUnique)
                  (_lhs_chunkNumberMap)
                  (_lhs_collectChunkNumbers)
                  (_lhs_collectErrors)
                  (_lhs_collectWarnings)
                  (_lhs_currentChunk)
                  (_lhs_dictionaryEnvironment)
                  (_lhs_importEnvironment)
                  (_lhs_inferredTypes)
                  (_lhs_matchIO)
                  (_lhs_monos)
                  (_lhs_namesInScope)
                  (_lhs_orderedTypeSynonyms)
                  (_lhs_parentTree)
                  (_lhs_patternMatchWarnings)
                  (_lhs_predicates)
                  (_lhs_substitution)
                  (_lhs_tryPatterns)
                  (_lhs_uniqueChunk)
                  (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_If _range_self _guardExpression_self _thenExpression_self _elseExpression_self
        (_constraints) =
            Node [ _conGuard .<. _guardExpression_constraints
                 , _conThen  .<. _thenExpression_constraints
                 , _conElse  .<. _elseExpression_constraints
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        (_conGuard) =
            [ (_guardExpression_beta .==. boolType) _cinfoGuard ]
        (_conThen) =
            [ (_thenExpression_beta  .==. _beta   ) _cinfoThen  ]
        (_conElse) =
            [ (_elseExpression_beta  .==. _beta   ) _cinfoElse  ]
        (_cinfoGuard) =
            childConstraint 0 "conditional" _parentTree
               []
        (_cinfoThen) =
            childConstraint 1 "then branch of conditional" _parentTree
               []
        (_cinfoElse) =
            childConstraint 2 "else branch of conditional" _parentTree
               []
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_guardExpression_infoTree, _thenExpression_infoTree, _elseExpression_infoTree]
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        (((_t1,_t2,_t3),_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match3 _infoTuple _elseExpression_uniqueSecondRound
                   match_Expression_If
                   _lhs_tryPatterns _lhs_allPatterns
                   [_guardExpression_matches,_thenExpression_matches,_elseExpression_matches]
        ( _range_self) =
            (_range )
        ( _guardExpression_assumptions
         ,_guardExpression_beta
         ,_guardExpression_betaUnique
         ,_guardExpression_collectChunkNumbers
         ,_guardExpression_collectErrors
         ,_guardExpression_collectWarnings
         ,_guardExpression_constraints
         ,_guardExpression_dictionaryEnvironment
         ,_guardExpression_infoTree
         ,_guardExpression_matchIO
         ,_guardExpression_matches
         ,_guardExpression_patternMatchWarnings
         ,_guardExpression_self
         ,_guardExpression_unboundNames
         ,_guardExpression_uniqueChunk
         ,_guardExpression_uniqueSecondRound
         ) =
            (_guardExpression (_lhs_allPatterns)
                              (_lhs_availablePredicates)
                              (_lhs_betaUnique + 1)
                              (_lhs_chunkNumberMap)
                              (_lhs_collectChunkNumbers)
                              (_lhs_collectErrors)
                              (_lhs_collectWarnings)
                              (_lhs_currentChunk)
                              (_lhs_dictionaryEnvironment)
                              (_lhs_importEnvironment)
                              (_lhs_inferredTypes)
                              (_lhs_matchIO)
                              (_lhs_monos)
                              (_lhs_namesInScope)
                              (_lhs_orderedTypeSynonyms)
                              (_parentTree)
                              (_lhs_patternMatchWarnings)
                              (_lhs_predicates)
                              (_lhs_substitution)
                              (_t1)
                              (_lhs_uniqueChunk)
                              (_lhs_uniqueSecondRound))
        ( _thenExpression_assumptions
         ,_thenExpression_beta
         ,_thenExpression_betaUnique
         ,_thenExpression_collectChunkNumbers
         ,_thenExpression_collectErrors
         ,_thenExpression_collectWarnings
         ,_thenExpression_constraints
         ,_thenExpression_dictionaryEnvironment
         ,_thenExpression_infoTree
         ,_thenExpression_matchIO
         ,_thenExpression_matches
         ,_thenExpression_patternMatchWarnings
         ,_thenExpression_self
         ,_thenExpression_unboundNames
         ,_thenExpression_uniqueChunk
         ,_thenExpression_uniqueSecondRound
         ) =
            (_thenExpression (_lhs_allPatterns)
                             (_lhs_availablePredicates)
                             (_guardExpression_betaUnique)
                             (_lhs_chunkNumberMap)
                             (_guardExpression_collectChunkNumbers)
                             (_guardExpression_collectErrors)
                             (_guardExpression_collectWarnings)
                             (_lhs_currentChunk)
                             (_guardExpression_dictionaryEnvironment)
                             (_lhs_importEnvironment)
                             (_lhs_inferredTypes)
                             (_guardExpression_matchIO)
                             (_lhs_monos)
                             (_lhs_namesInScope)
                             (_lhs_orderedTypeSynonyms)
                             (_parentTree)
                             (_guardExpression_patternMatchWarnings)
                             (_lhs_predicates)
                             (_lhs_substitution)
                             (_t2)
                             (_guardExpression_uniqueChunk)
                             (_guardExpression_uniqueSecondRound))
        ( _elseExpression_assumptions
         ,_elseExpression_beta
         ,_elseExpression_betaUnique
         ,_elseExpression_collectChunkNumbers
         ,_elseExpression_collectErrors
         ,_elseExpression_collectWarnings
         ,_elseExpression_constraints
         ,_elseExpression_dictionaryEnvironment
         ,_elseExpression_infoTree
         ,_elseExpression_matchIO
         ,_elseExpression_matches
         ,_elseExpression_patternMatchWarnings
         ,_elseExpression_self
         ,_elseExpression_unboundNames
         ,_elseExpression_uniqueChunk
         ,_elseExpression_uniqueSecondRound
         ) =
            (_elseExpression (_lhs_allPatterns)
                             (_lhs_availablePredicates)
                             (_thenExpression_betaUnique)
                             (_lhs_chunkNumberMap)
                             (_thenExpression_collectChunkNumbers)
                             (_thenExpression_collectErrors)
                             (_thenExpression_collectWarnings)
                             (_lhs_currentChunk)
                             (_thenExpression_dictionaryEnvironment)
                             (_lhs_importEnvironment)
                             (_lhs_inferredTypes)
                             (_thenExpression_matchIO)
                             (_lhs_monos)
                             (_lhs_namesInScope)
                             (_lhs_orderedTypeSynonyms)
                             (_parentTree)
                             (_thenExpression_patternMatchWarnings)
                             (_lhs_predicates)
                             (_lhs_substitution)
                             (_t3)
                             (_thenExpression_uniqueChunk)
                             (_thenExpression_uniqueSecondRound))
    in  ( _guardExpression_assumptions `combine` _thenExpression_assumptions `combine` _elseExpression_assumptions
         ,_beta
         ,_elseExpression_betaUnique
         ,_elseExpression_collectChunkNumbers
         ,_elseExpression_collectErrors
         ,_elseExpression_collectWarnings
         ,_newConstraintSet
         ,_elseExpression_dictionaryEnvironment
         ,_parentTree
         ,_elseExpression_matchIO >> _ioMatch
         ,_matches
         ,_elseExpression_patternMatchWarnings
         ,_self
         ,_guardExpression_unboundNames ++ _thenExpression_unboundNames ++ _elseExpression_unboundNames
         ,_elseExpression_uniqueChunk
         ,_newUnique
         )
sem_Expression_InfixApplication :: (T_Range) ->
                                   (T_MaybeExpression) ->
                                   (T_Expression) ->
                                   (T_MaybeExpression) ->
                                   (T_Expression)
sem_Expression_InfixApplication (_range)
                                (_leftExpression)
                                (_operator)
                                (_rightExpression)
                                (_lhs_allPatterns)
                                (_lhs_availablePredicates)
                                (_lhs_betaUnique)
                                (_lhs_chunkNumberMap)
                                (_lhs_collectChunkNumbers)
                                (_lhs_collectErrors)
                                (_lhs_collectWarnings)
                                (_lhs_currentChunk)
                                (_lhs_dictionaryEnvironment)
                                (_lhs_importEnvironment)
                                (_lhs_inferredTypes)
                                (_lhs_matchIO)
                                (_lhs_monos)
                                (_lhs_namesInScope)
                                (_lhs_orderedTypeSynonyms)
                                (_lhs_parentTree)
                                (_lhs_patternMatchWarnings)
                                (_lhs_predicates)
                                (_lhs_substitution)
                                (_lhs_tryPatterns)
                                (_lhs_uniqueChunk)
                                (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_InfixApplication _range_self _leftExpression_self _operator_self _rightExpression_self
        (_constraints) =
            _conTotal .>.
            Node [ _operator_constraints
                 , _leftExpression_constraints
                 , _rightExpression_constraints
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        (_betaResOp) =
            TVar (_lhs_betaUnique + 1)
        (_conOperator) =
            (_operator_beta .==. _leftExpression_beta .->. _rightExpression_beta .->. _betaResOp) _cinfoOperator
        (_conTotal) =
            case (_leftExpression_section,_rightExpression_section) of
                   (False,False) -> [ _conOperator, (_betaResOp     .==. _beta)                        _cinfoComplete     ]
                   (True ,True ) -> [               (_operator_beta .==. _beta)                        _cinfoEmpty        ]
                   (False,True ) -> [ _conOperator, (_rightExpression_beta .->. _betaResOp .==. _beta) _cinfoRightSection ]
                   (True ,False) -> [ _conOperator, (_leftExpression_beta  .->. _betaResOp .==. _beta) _cinfoLeftSection  ]
        (_operatorNr) =
            length _leftExpression_infoTrees
        (_cinfoOperator) =
            childConstraint _operatorNr "infix application" _parentTree $
               if _leftExpression_section || _rightExpression_section
               then [ HasTrustFactor 10.0 ]
               else [ ApplicationEdge True (map attribute (_leftExpression_infoTrees ++ _rightExpression_infoTrees)) ]
        (_cinfoComplete) =
            specialConstraint "infix application (INTERNAL ERROR)" _parentTree
               (self _localInfo, Nothing)
               [ FolkloreConstraint, HasTrustFactor 10000.0 ]
        (_cinfoLeftSection) =
            specialConstraint "left section" _parentTree
               (self _localInfo, Nothing)
               [ ]
        (_cinfoRightSection) =
            specialConstraint "right section" _parentTree
               (self _localInfo, Nothing)
               [ ]
        (_cinfoEmpty) =
            specialConstraint "infix application" _parentTree
              (self _localInfo, Nothing)
              [ FolkloreConstraint, HasTrustFactor 10.0, IsEmptyInfixApplication ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo
              (_leftExpression_infoTrees ++ [_operator_infoTree] ++ _rightExpression_infoTrees)
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        (((_t1,_t2,_t3),_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match3 _infoTuple _rightExpression_uniqueSecondRound
                   match_Expression_InfixApplication
                   _lhs_tryPatterns _lhs_allPatterns
                   [_leftExpression_matches, _operator_matches,_rightExpression_matches]
        ( _range_self) =
            (_range )
        ( _leftExpression_assumptions
         ,_leftExpression_beta
         ,_leftExpression_betaUnique
         ,_leftExpression_collectChunkNumbers
         ,_leftExpression_collectErrors
         ,_leftExpression_collectWarnings
         ,_leftExpression_constraints
         ,_leftExpression_dictionaryEnvironment
         ,_leftExpression_infoTrees
         ,_leftExpression_matchIO
         ,_leftExpression_matches
         ,_leftExpression_patternMatchWarnings
         ,_leftExpression_section
         ,_leftExpression_self
         ,_leftExpression_unboundNames
         ,_leftExpression_uniqueChunk
         ,_leftExpression_uniqueSecondRound
         ) =
            (_leftExpression (_lhs_allPatterns)
                             (_lhs_availablePredicates)
                             (_lhs_betaUnique + 2)
                             (_lhs_chunkNumberMap)
                             (_lhs_collectChunkNumbers)
                             (_lhs_collectErrors)
                             (_lhs_collectWarnings)
                             (_lhs_currentChunk)
                             (_lhs_dictionaryEnvironment)
                             (_lhs_importEnvironment)
                             (_lhs_inferredTypes)
                             (_lhs_matchIO)
                             (_lhs_monos)
                             (_lhs_namesInScope)
                             (_lhs_orderedTypeSynonyms)
                             (_parentTree)
                             (_lhs_patternMatchWarnings)
                             (_lhs_predicates)
                             (_lhs_substitution)
                             (_t1)
                             (_lhs_uniqueChunk)
                             (_lhs_uniqueSecondRound))
        ( _operator_assumptions,_operator_beta,_operator_betaUnique,_operator_collectChunkNumbers,_operator_collectErrors,_operator_collectWarnings,_operator_constraints,_operator_dictionaryEnvironment,_operator_infoTree,_operator_matchIO,_operator_matches,_operator_patternMatchWarnings,_operator_self,_operator_unboundNames,_operator_uniqueChunk,_operator_uniqueSecondRound) =
            (_operator (_lhs_allPatterns)
                       (_lhs_availablePredicates)
                       (_leftExpression_betaUnique)
                       (_lhs_chunkNumberMap)
                       (_leftExpression_collectChunkNumbers)
                       (_leftExpression_collectErrors)
                       (_leftExpression_collectWarnings)
                       (_lhs_currentChunk)
                       (_leftExpression_dictionaryEnvironment)
                       (_lhs_importEnvironment)
                       (_lhs_inferredTypes)
                       (_leftExpression_matchIO)
                       (_lhs_monos)
                       (_lhs_namesInScope)
                       (_lhs_orderedTypeSynonyms)
                       (_parentTree)
                       (_leftExpression_patternMatchWarnings)
                       (_lhs_predicates)
                       (_lhs_substitution)
                       (_t2)
                       (_leftExpression_uniqueChunk)
                       (_leftExpression_uniqueSecondRound))
        ( _rightExpression_assumptions
         ,_rightExpression_beta
         ,_rightExpression_betaUnique
         ,_rightExpression_collectChunkNumbers
         ,_rightExpression_collectErrors
         ,_rightExpression_collectWarnings
         ,_rightExpression_constraints
         ,_rightExpression_dictionaryEnvironment
         ,_rightExpression_infoTrees
         ,_rightExpression_matchIO
         ,_rightExpression_matches
         ,_rightExpression_patternMatchWarnings
         ,_rightExpression_section
         ,_rightExpression_self
         ,_rightExpression_unboundNames
         ,_rightExpression_uniqueChunk
         ,_rightExpression_uniqueSecondRound
         ) =
            (_rightExpression (_lhs_allPatterns)
                              (_lhs_availablePredicates)
                              (_operator_betaUnique)
                              (_lhs_chunkNumberMap)
                              (_operator_collectChunkNumbers)
                              (_operator_collectErrors)
                              (_operator_collectWarnings)
                              (_lhs_currentChunk)
                              (_operator_dictionaryEnvironment)
                              (_lhs_importEnvironment)
                              (_lhs_inferredTypes)
                              (_operator_matchIO)
                              (_lhs_monos)
                              (_lhs_namesInScope)
                              (_lhs_orderedTypeSynonyms)
                              (_parentTree)
                              (_operator_patternMatchWarnings)
                              (_lhs_predicates)
                              (_lhs_substitution)
                              (_t3)
                              (_operator_uniqueChunk)
                              (_operator_uniqueSecondRound))
    in  ( _leftExpression_assumptions `combine` _operator_assumptions `combine` _rightExpression_assumptions
         ,_beta
         ,_rightExpression_betaUnique
         ,_rightExpression_collectChunkNumbers
         ,_rightExpression_collectErrors
         ,_rightExpression_collectWarnings
         ,_newConstraintSet
         ,_rightExpression_dictionaryEnvironment
         ,_parentTree
         ,_rightExpression_matchIO >> _ioMatch
         ,_matches
         ,_rightExpression_patternMatchWarnings
         ,_self
         ,_leftExpression_unboundNames ++ _operator_unboundNames ++ _rightExpression_unboundNames
         ,_rightExpression_uniqueChunk
         ,_newUnique
         )
sem_Expression_Lambda :: (T_Range) ->
                         (T_Patterns) ->
                         (T_Expression) ->
                         (T_Expression)
sem_Expression_Lambda (_range)
                      (_patterns)
                      (_expression)
                      (_lhs_allPatterns)
                      (_lhs_availablePredicates)
                      (_lhs_betaUnique)
                      (_lhs_chunkNumberMap)
                      (_lhs_collectChunkNumbers)
                      (_lhs_collectErrors)
                      (_lhs_collectWarnings)
                      (_lhs_currentChunk)
                      (_lhs_dictionaryEnvironment)
                      (_lhs_importEnvironment)
                      (_lhs_inferredTypes)
                      (_lhs_matchIO)
                      (_lhs_monos)
                      (_lhs_namesInScope)
                      (_lhs_orderedTypeSynonyms)
                      (_lhs_parentTree)
                      (_lhs_patternMatchWarnings)
                      (_lhs_predicates)
                      (_lhs_substitution)
                      (_lhs_tryPatterns)
                      (_lhs_uniqueChunk)
                      (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Lambda _range_self _patterns_self _expression_self
        (_constraints) =
            _newcon .>. _csetBinds .>>.
            Node [ Node _patterns_constraintslist
                 , _expression_constraints
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        ((_csetBinds,_assumptions')) =
            (_patterns_environment .===. _expression_assumptions) _cinfoBind
        (_newcon) =
            [ (foldr (.->.) _expression_beta _patterns_betas .==. _beta) _cinfoType ]
        (_cinfoBind) =
            \name -> variableConstraint "variable" (nameToSelfExpr name)
               [FolkloreConstraint]
        (_cinfoType) =
            resultConstraint "lambda abstraction" _parentTree
               [ FolkloreConstraint ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_patterns_infoTrees ++ [_expression_infoTree])
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _patterns_patVarNames _expression_unboundNames _lhs_namesInScope
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ( _range_self) =
            (_range )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_elementss,_patterns_environment,_patterns_infoTrees,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_patternMatchWarnings,_patterns_self,_patterns_unboundNames) =
            (_patterns (_lhs_betaUnique + 1) (_lhs_importEnvironment) (_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_patterns_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (eltsFM _patterns_environment ++ getMonos _csetBinds ++ _lhs_monos)
                         (_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_patterns_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _assumptions'
         ,_beta
         ,_expression_betaUnique
         ,_expression_collectChunkNumbers
         ,_expression_collectErrors
         ,_expression_collectWarnings
         ,_constraints
         ,_expression_dictionaryEnvironment
         ,_parentTree
         ,_expression_matchIO
         ,matchOnlyVariable _infoTuple _lhs_tryPatterns
         ,patternMatchWarnings _lhs_importEnvironment
                               _lhs_substitution
                               _beta
                               (take (length _patterns_self) . fst . functionSpine)
                               [(concat _patterns_elementss, False)]
                               _range
                               (Just $ Name_Special noRange [] "\\")
                               True
                               []
                               "lambda expression"
                               "->"
          ++ _expression_patternMatchWarnings
         ,_self
         ,_unboundNames
         ,_expression_uniqueChunk
         ,_expression_uniqueSecondRound
         )
sem_Expression_Let :: (T_Range) ->
                      (T_Declarations) ->
                      (T_Expression) ->
                      (T_Expression)
sem_Expression_Let (_range)
                   (_declarations)
                   (_expression)
                   (_lhs_allPatterns)
                   (_lhs_availablePredicates)
                   (_lhs_betaUnique)
                   (_lhs_chunkNumberMap)
                   (_lhs_collectChunkNumbers)
                   (_lhs_collectErrors)
                   (_lhs_collectWarnings)
                   (_lhs_currentChunk)
                   (_lhs_dictionaryEnvironment)
                   (_lhs_importEnvironment)
                   (_lhs_inferredTypes)
                   (_lhs_matchIO)
                   (_lhs_monos)
                   (_lhs_namesInScope)
                   (_lhs_orderedTypeSynonyms)
                   (_lhs_parentTree)
                   (_lhs_patternMatchWarnings)
                   (_lhs_predicates)
                   (_lhs_substitution)
                   (_lhs_tryPatterns)
                   (_lhs_uniqueChunk)
                   (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Let _range_self _declarations_self _expression_self
        (_constraints) =
            [ (_expression_beta .==. _beta) _cinfoType ] .>. _cset
        (_beta) =
            TVar _lhs_betaUnique
        (_mybdggroup) =
            Just (_expression_assumptions, [_expression_constraints])
        ((_aset,_cset,_inheritedBDG,_chunkNr)) =
            performBindingGroup _lhs_currentChunk _expression_uniqueChunk _lhs_chunkNumberMap _lhs_monos _declarations_typeSignatures _mybdggroup _declarations_bindingGroups
        (_inferredTypes) =
            addListToFM _lhs_inferredTypes _localTypes
        (_localTypes) =
            getInferredTypes _lhs_monos _lhs_substitution _lhs_predicates _declarations_bindingGroups
        ((_errors,_warnings)) =
            checkAnnotations False _lhs_orderedTypeSynonyms _declarations_typeSignatures _localTypes
        (_cinfoType) =
            resultConstraint "let expression (INTERNAL ERROR)" _thisTree
               [ FolkloreConstraint, HasTrustFactor 10000.0 ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_declInfo) =
            LocalInfo { self = UHA_Decls _declarations_self
                      , assignedType = Nothing
                      }
        (_thisTree) =
            node _lhs_parentTree _localInfo [_declTree, _expression_infoTree]
        (_declTree) =
            node _thisTree _declInfo _declarations_infoTrees
        ((_collectTypeConstructors,_collectValueConstructors,_collectTypeSynonyms,_collectConstructorEnv,_derivedFunctions,_operatorFixities)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Expression"
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _declarations_declVarNames (_declarations_unboundNames ++ _expression_unboundNames) _lhs_namesInScope
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ( _range_self) =
            (_range )
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectChunkNumbers,_declarations_collectErrors,_declarations_collectWarnings,_declarations_declVarNames,_declarations_dictionaryEnvironment,_declarations_infoTrees,_declarations_matchIO,_declarations_patternMatchWarnings,_declarations_self,_declarations_typeSignatures,_declarations_unboundNames,_declarations_uniqueChunk) =
            (_declarations (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique + 1)
                           ([])
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_inferredTypes)
                           (_inheritedBDG)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_namesInScope)
                           (_lhs_orderedTypeSynonyms)
                           (_declTree)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (emptyFM)
                           (_lhs_uniqueChunk))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_declarations_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_declarations_collectChunkNumbers)
                         (_declarations_collectErrors)
                         (_declarations_collectWarnings)
                         (_lhs_currentChunk)
                         (_declarations_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_inferredTypes)
                         (_declarations_matchIO)
                         (_lhs_monos)
                         (_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_thisTree)
                         (_declarations_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_declarations_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _aset,_beta,_expression_betaUnique,_expression_collectChunkNumbers,_errors ++ _expression_collectErrors,_warnings ++ _expression_collectWarnings,_constraints,_expression_dictionaryEnvironment,_thisTree,_expression_matchIO,matchOnlyVariable _infoTuple _lhs_tryPatterns,_expression_patternMatchWarnings,_self,_unboundNames,_chunkNr,_expression_uniqueSecondRound)
sem_Expression_List :: (T_Range) ->
                       (T_Expressions) ->
                       (T_Expression)
sem_Expression_List (_range)
                    (_expressions)
                    (_lhs_allPatterns)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_tryPatterns)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_List _range_self _expressions_self
        (_constraints) =
            _newcon .>.
             Node (zipWith3 _zipf _expressions_betas [0..] _expressions_constraintslist)
        (_beta) =
            TVar _lhs_betaUnique
        (_beta') =
            TVar (_lhs_betaUnique + 1)
        (_newcon) =
            [ (listType _beta' .==. _beta) _cinfoResult ]
        (_zipf) =
            \tp childNr ctree -> [ (tp .==. _beta') (_cinfoElem childNr) ] .<. ctree
        (_cinfoElem) =
            \elemNr ->
            childConstraint elemNr "element of list" _parentTree
            [ HasTrustFactor 10.0 | length _expressions_betas < 2 ]
        (_cinfoResult) =
            resultConstraint "list" _parentTree
            [ FolkloreConstraint ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_expressions_infoTrees)
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ((_t1,_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match1 _infoTuple _expressions_uniqueSecondRound
               match_Expression_List
               _lhs_tryPatterns _lhs_allPatterns
               [_expressions_matches]
        ( _range_self) =
            (_range )
        ( _expressions_assumptions,_expressions_betaUnique,_expressions_betas,_expressions_collectChunkNumbers,_expressions_collectErrors,_expressions_collectWarnings,_expressions_constraintslist,_expressions_dictionaryEnvironment,_expressions_infoTrees,_expressions_matchIO,_expressions_matches,_expressions_patternMatchWarnings,_expressions_self,_expressions_unboundNames,_expressions_uniqueChunk,_expressions_uniqueSecondRound) =
            (_expressions (_lhs_allPatterns)
                          (_lhs_availablePredicates)
                          (_lhs_betaUnique + 2)
                          (_lhs_chunkNumberMap)
                          (_lhs_collectChunkNumbers)
                          (_lhs_collectErrors)
                          (_lhs_collectWarnings)
                          (_lhs_currentChunk)
                          (_lhs_dictionaryEnvironment)
                          (_lhs_importEnvironment)
                          (_lhs_inferredTypes)
                          (_lhs_matchIO)
                          (_lhs_monos)
                          (_lhs_namesInScope)
                          (_lhs_orderedTypeSynonyms)
                          (_parentTree)
                          (_lhs_patternMatchWarnings)
                          (_lhs_predicates)
                          (_lhs_substitution)
                          (_t1)
                          (_lhs_uniqueChunk)
                          (_lhs_uniqueSecondRound))
    in  ( _expressions_assumptions,_beta,_expressions_betaUnique,_expressions_collectChunkNumbers,_expressions_collectErrors,_expressions_collectWarnings,_newConstraintSet,_expressions_dictionaryEnvironment,_parentTree,_expressions_matchIO,_matches,_expressions_patternMatchWarnings,_self,_expressions_unboundNames,_expressions_uniqueChunk,_newUnique)
sem_Expression_Literal :: (T_Range) ->
                          (T_Literal) ->
                          (T_Expression)
sem_Expression_Literal (_range)
                       (_literal)
                       (_lhs_allPatterns)
                       (_lhs_availablePredicates)
                       (_lhs_betaUnique)
                       (_lhs_chunkNumberMap)
                       (_lhs_collectChunkNumbers)
                       (_lhs_collectErrors)
                       (_lhs_collectWarnings)
                       (_lhs_currentChunk)
                       (_lhs_dictionaryEnvironment)
                       (_lhs_importEnvironment)
                       (_lhs_inferredTypes)
                       (_lhs_matchIO)
                       (_lhs_monos)
                       (_lhs_namesInScope)
                       (_lhs_orderedTypeSynonyms)
                       (_lhs_parentTree)
                       (_lhs_patternMatchWarnings)
                       (_lhs_predicates)
                       (_lhs_substitution)
                       (_lhs_tryPatterns)
                       (_lhs_uniqueChunk)
                       (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Literal _range_self _literal_self
        (_constraints) =
            unitTree ((_literal_literalType .==. _beta) _cinfo)
        (_beta) =
            TVar _lhs_betaUnique
        (_cinfo) =
            resultConstraint "literal" _parentTree
               [ FolkloreConstraint, HasTrustFactor 10.0, IsLiteral _literal_self ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                           }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        (((),_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match0 _infoTuple _lhs_uniqueSecondRound
                   (match_Expression_Literal _literal_self)
                   _lhs_tryPatterns _lhs_allPatterns
                   []
        ( _range_self) =
            (_range )
        ( _literal_elements,_literal_literalType,_literal_self) =
            (_literal )
    in  ( noAssumptions,_beta,_lhs_betaUnique + 1,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_newConstraintSet,_lhs_dictionaryEnvironment,_parentTree,_lhs_matchIO >> _ioMatch,_matches,_lhs_patternMatchWarnings,_self,[],_lhs_uniqueChunk,_newUnique)
sem_Expression_Negate :: (T_Range) ->
                         (T_Expression) ->
                         (T_Expression)
sem_Expression_Negate (_range)
                      (_expression)
                      (_lhs_allPatterns)
                      (_lhs_availablePredicates)
                      (_lhs_betaUnique)
                      (_lhs_chunkNumberMap)
                      (_lhs_collectChunkNumbers)
                      (_lhs_collectErrors)
                      (_lhs_collectWarnings)
                      (_lhs_currentChunk)
                      (_lhs_dictionaryEnvironment)
                      (_lhs_importEnvironment)
                      (_lhs_inferredTypes)
                      (_lhs_matchIO)
                      (_lhs_monos)
                      (_lhs_namesInScope)
                      (_lhs_orderedTypeSynonyms)
                      (_lhs_parentTree)
                      (_lhs_patternMatchWarnings)
                      (_lhs_predicates)
                      (_lhs_substitution)
                      (_lhs_tryPatterns)
                      (_lhs_uniqueChunk)
                      (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Negate _range_self _expression_self
        (_constraints) =
            _newcon .>. Node [ _expression_constraints ]
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            let standard = generalize [] [Predicate "Num" (TVar 0)] (TVar 0 .->. TVar 0)
                tpscheme = lookupWithDefaultFM (typeEnvironment _lhs_importEnvironment) standard (nameFromString "negate")
            in [ (_expression_beta .->. _beta .::. tpscheme) _cinfo]
        (_localName) =
            setNameRange intUnaryMinusName _range_self
        (_negateTypeScheme) =
            case lookupFM (typeEnvironment _lhs_importEnvironment) _localName of
               Just scheme -> scheme
               Nothing     -> internalError "TypeInferenceOverloading.ag" "n/a" "type of negate unknown"
        (_requiredDictionaries) =
            getRequiredDictionaries
               (getOrderedTypeSynonyms _lhs_importEnvironment)
               (_lhs_substitution |-> (_expression_beta .->. _beta))
               _negateTypeScheme
        ((_newDEnv,_overloadingErrors)) =
            resolveOverloading _localName _lhs_availablePredicates _requiredDictionaries _expression_dictionaryEnvironment
        (_cinfo) =
            specialConstraint "negation" _parentTree
               (self _localInfo, Just $ nameToSelfExpr (Name_Identifier _range [] "-"))
               [ Negation True ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_expression_infoTree]
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ((_t1,_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match1 _infoTuple _expression_uniqueSecondRound
                   match_Expression_Negate
                   _lhs_tryPatterns _lhs_allPatterns
                   [_expression_matches]
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique + 1)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_t1)
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _expression_assumptions,_beta,_expression_betaUnique,_expression_collectChunkNumbers,map (makeUnresolvedOverloadingError _range_self (oneLinerSource $ self _localInfo)) _overloadingErrors ++ _expression_collectErrors,_expression_collectWarnings,_newConstraintSet,_newDEnv,_parentTree,_expression_matchIO >> _ioMatch,_matches,_expression_patternMatchWarnings,_self,_expression_unboundNames,_expression_uniqueChunk,_newUnique)
sem_Expression_NegateFloat :: (T_Range) ->
                              (T_Expression) ->
                              (T_Expression)
sem_Expression_NegateFloat (_range)
                           (_expression)
                           (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique)
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_lhs_inferredTypes)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_lhs_namesInScope)
                           (_lhs_orderedTypeSynonyms)
                           (_lhs_parentTree)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (_lhs_tryPatterns)
                           (_lhs_uniqueChunk)
                           (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_NegateFloat _range_self _expression_self
        (_constraints) =
            _newcon .>. Node [ _expression_constraints ]
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (floatType .->. floatType .==. _expression_beta .->. _beta) _cinfo]
        (_cinfo) =
            specialConstraint "negation" _parentTree
               (self _localInfo, Just $ nameToSelfExpr (Name_Identifier _range [] "-."))
               [ Negation False ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_expression_infoTree]
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ((_t1,_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match1 _infoTuple _expression_uniqueSecondRound
                   match_Expression_NegateFloat
                   _lhs_tryPatterns _lhs_allPatterns
                   [_expression_matches]
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique + 1)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_t1)
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _expression_assumptions,_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_newConstraintSet,_expression_dictionaryEnvironment,_parentTree,_expression_matchIO >> _ioMatch,_matches,_expression_patternMatchWarnings,_self,_expression_unboundNames,_expression_uniqueChunk,_newUnique)
sem_Expression_NormalApplication :: (T_Range) ->
                                    (T_Expression) ->
                                    (T_Expressions) ->
                                    (T_Expression)
sem_Expression_NormalApplication (_range)
                                 (_function)
                                 (_arguments)
                                 (_lhs_allPatterns)
                                 (_lhs_availablePredicates)
                                 (_lhs_betaUnique)
                                 (_lhs_chunkNumberMap)
                                 (_lhs_collectChunkNumbers)
                                 (_lhs_collectErrors)
                                 (_lhs_collectWarnings)
                                 (_lhs_currentChunk)
                                 (_lhs_dictionaryEnvironment)
                                 (_lhs_importEnvironment)
                                 (_lhs_inferredTypes)
                                 (_lhs_matchIO)
                                 (_lhs_monos)
                                 (_lhs_namesInScope)
                                 (_lhs_orderedTypeSynonyms)
                                 (_lhs_parentTree)
                                 (_lhs_patternMatchWarnings)
                                 (_lhs_predicates)
                                 (_lhs_substitution)
                                 (_lhs_tryPatterns)
                                 (_lhs_uniqueChunk)
                                 (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_NormalApplication _range_self _function_self _arguments_self
        (_constraints) =
            _newcon .>.
            Node [ _function_constraints
                 , Node _arguments_constraintslist
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (_function_beta .==. foldr (.->.) _beta _arguments_betas) _cinfo ]
        (_cinfo) =
            childConstraint 0 "application" _parentTree
               [ ApplicationEdge False (map attribute _arguments_infoTrees) ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_function_infoTree : _arguments_infoTrees)
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        (((_t1,_t2),_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match2 _infoTuple _arguments_uniqueSecondRound
                   match_Expression_NormalApplication
                   _lhs_tryPatterns _lhs_allPatterns
                   [_function_matches, _arguments_matches]
        ( _range_self) =
            (_range )
        ( _function_assumptions,_function_beta,_function_betaUnique,_function_collectChunkNumbers,_function_collectErrors,_function_collectWarnings,_function_constraints,_function_dictionaryEnvironment,_function_infoTree,_function_matchIO,_function_matches,_function_patternMatchWarnings,_function_self,_function_unboundNames,_function_uniqueChunk,_function_uniqueSecondRound) =
            (_function (_lhs_allPatterns)
                       (_lhs_availablePredicates)
                       (_lhs_betaUnique + 1)
                       (_lhs_chunkNumberMap)
                       (_lhs_collectChunkNumbers)
                       (_lhs_collectErrors)
                       (_lhs_collectWarnings)
                       (_lhs_currentChunk)
                       (_lhs_dictionaryEnvironment)
                       (_lhs_importEnvironment)
                       (_lhs_inferredTypes)
                       (_lhs_matchIO)
                       (_lhs_monos)
                       (_lhs_namesInScope)
                       (_lhs_orderedTypeSynonyms)
                       (_parentTree)
                       (_lhs_patternMatchWarnings)
                       (_lhs_predicates)
                       (_lhs_substitution)
                       (_t1)
                       (_lhs_uniqueChunk)
                       (_lhs_uniqueSecondRound))
        ( _arguments_assumptions,_arguments_betaUnique,_arguments_betas,_arguments_collectChunkNumbers,_arguments_collectErrors,_arguments_collectWarnings,_arguments_constraintslist,_arguments_dictionaryEnvironment,_arguments_infoTrees,_arguments_matchIO,_arguments_matches,_arguments_patternMatchWarnings,_arguments_self,_arguments_unboundNames,_arguments_uniqueChunk,_arguments_uniqueSecondRound) =
            (_arguments (_lhs_allPatterns)
                        (_lhs_availablePredicates)
                        (_function_betaUnique)
                        (_lhs_chunkNumberMap)
                        (_function_collectChunkNumbers)
                        (_function_collectErrors)
                        (_function_collectWarnings)
                        (_lhs_currentChunk)
                        (_function_dictionaryEnvironment)
                        (_lhs_importEnvironment)
                        (_lhs_inferredTypes)
                        (_function_matchIO)
                        (_lhs_monos)
                        (_lhs_namesInScope)
                        (_lhs_orderedTypeSynonyms)
                        (_parentTree)
                        (_function_patternMatchWarnings)
                        (_lhs_predicates)
                        (_lhs_substitution)
                        (_t2)
                        (_function_uniqueChunk)
                        (_function_uniqueSecondRound))
    in  ( _function_assumptions `combine` _arguments_assumptions,_beta,_arguments_betaUnique,_arguments_collectChunkNumbers,_arguments_collectErrors,_arguments_collectWarnings,_newConstraintSet,_arguments_dictionaryEnvironment,_parentTree,_arguments_matchIO >> _ioMatch,_matches,_arguments_patternMatchWarnings,_self,_function_unboundNames ++ _arguments_unboundNames,_arguments_uniqueChunk,_newUnique)
sem_Expression_Parenthesized :: (T_Range) ->
                                (T_Expression) ->
                                (T_Expression)
sem_Expression_Parenthesized (_range)
                             (_expression)
                             (_lhs_allPatterns)
                             (_lhs_availablePredicates)
                             (_lhs_betaUnique)
                             (_lhs_chunkNumberMap)
                             (_lhs_collectChunkNumbers)
                             (_lhs_collectErrors)
                             (_lhs_collectWarnings)
                             (_lhs_currentChunk)
                             (_lhs_dictionaryEnvironment)
                             (_lhs_importEnvironment)
                             (_lhs_inferredTypes)
                             (_lhs_matchIO)
                             (_lhs_monos)
                             (_lhs_namesInScope)
                             (_lhs_orderedTypeSynonyms)
                             (_lhs_parentTree)
                             (_lhs_patternMatchWarnings)
                             (_lhs_predicates)
                             (_lhs_substitution)
                             (_lhs_tryPatterns)
                             (_lhs_uniqueChunk)
                             (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Parenthesized _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_lhs_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_lhs_tryPatterns)
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound)
sem_Expression_RecordConstruction :: (T_Range) ->
                                     (T_Name) ->
                                     (T_RecordExpressionBindings) ->
                                     (T_Expression)
sem_Expression_RecordConstruction (_range)
                                  (_name)
                                  (_recordExpressionBindings)
                                  (_lhs_allPatterns)
                                  (_lhs_availablePredicates)
                                  (_lhs_betaUnique)
                                  (_lhs_chunkNumberMap)
                                  (_lhs_collectChunkNumbers)
                                  (_lhs_collectErrors)
                                  (_lhs_collectWarnings)
                                  (_lhs_currentChunk)
                                  (_lhs_dictionaryEnvironment)
                                  (_lhs_importEnvironment)
                                  (_lhs_inferredTypes)
                                  (_lhs_matchIO)
                                  (_lhs_monos)
                                  (_lhs_namesInScope)
                                  (_lhs_orderedTypeSynonyms)
                                  (_lhs_parentTree)
                                  (_lhs_patternMatchWarnings)
                                  (_lhs_predicates)
                                  (_lhs_substitution)
                                  (_lhs_tryPatterns)
                                  (_lhs_uniqueChunk)
                                  (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_RecordConstruction _range_self _name_self _recordExpressionBindings_self
        (_infoTree) =
            globalInfoError
        ((_assumptions,_constraints,_beta)) =
            internalError "PartialSyntax.ag" "n/a" "Expression.RecordConstruction"
        (_matches) =
            undefined
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _recordExpressionBindings_collectChunkNumbers,_recordExpressionBindings_collectErrors,_recordExpressionBindings_collectWarnings,_recordExpressionBindings_dictionaryEnvironment,_recordExpressionBindings_patternMatchWarnings,_recordExpressionBindings_self,_recordExpressionBindings_unboundNames,_recordExpressionBindings_uniqueChunk) =
            (_recordExpressionBindings (_lhs_availablePredicates) (_lhs_chunkNumberMap) (_lhs_collectChunkNumbers) (_lhs_collectErrors) (_lhs_collectWarnings) (_lhs_currentChunk) (_lhs_dictionaryEnvironment) (_lhs_importEnvironment) (_lhs_inferredTypes) (_lhs_namesInScope) (_lhs_orderedTypeSynonyms) (_lhs_patternMatchWarnings) (_lhs_predicates) (_lhs_substitution) (_lhs_uniqueChunk))
    in  ( _assumptions,_beta,_lhs_betaUnique,_recordExpressionBindings_collectChunkNumbers,_recordExpressionBindings_collectErrors,_recordExpressionBindings_collectWarnings,_constraints,_recordExpressionBindings_dictionaryEnvironment,_infoTree,_lhs_matchIO,_matches,_recordExpressionBindings_patternMatchWarnings,_self,_recordExpressionBindings_unboundNames,_recordExpressionBindings_uniqueChunk,_lhs_uniqueSecondRound)
sem_Expression_RecordUpdate :: (T_Range) ->
                               (T_Expression) ->
                               (T_RecordExpressionBindings) ->
                               (T_Expression)
sem_Expression_RecordUpdate (_range)
                            (_expression)
                            (_recordExpressionBindings)
                            (_lhs_allPatterns)
                            (_lhs_availablePredicates)
                            (_lhs_betaUnique)
                            (_lhs_chunkNumberMap)
                            (_lhs_collectChunkNumbers)
                            (_lhs_collectErrors)
                            (_lhs_collectWarnings)
                            (_lhs_currentChunk)
                            (_lhs_dictionaryEnvironment)
                            (_lhs_importEnvironment)
                            (_lhs_inferredTypes)
                            (_lhs_matchIO)
                            (_lhs_monos)
                            (_lhs_namesInScope)
                            (_lhs_orderedTypeSynonyms)
                            (_lhs_parentTree)
                            (_lhs_patternMatchWarnings)
                            (_lhs_predicates)
                            (_lhs_substitution)
                            (_lhs_tryPatterns)
                            (_lhs_uniqueChunk)
                            (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_RecordUpdate _range_self _expression_self _recordExpressionBindings_self
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_lhs_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_lhs_tryPatterns)
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
        ( _recordExpressionBindings_collectChunkNumbers,_recordExpressionBindings_collectErrors,_recordExpressionBindings_collectWarnings,_recordExpressionBindings_dictionaryEnvironment,_recordExpressionBindings_patternMatchWarnings,_recordExpressionBindings_self,_recordExpressionBindings_unboundNames,_recordExpressionBindings_uniqueChunk) =
            (_recordExpressionBindings (_lhs_availablePredicates) (_lhs_chunkNumberMap) (_expression_collectChunkNumbers) (_expression_collectErrors) (_expression_collectWarnings) (_lhs_currentChunk) (_expression_dictionaryEnvironment) (_lhs_importEnvironment) (_lhs_inferredTypes) (_lhs_namesInScope) (_lhs_orderedTypeSynonyms) (_expression_patternMatchWarnings) (_lhs_predicates) (_lhs_substitution) (_expression_uniqueChunk))
    in  ( _expression_assumptions
         ,_expression_beta
         ,_expression_betaUnique
         ,_recordExpressionBindings_collectChunkNumbers
         ,_recordExpressionBindings_collectErrors
         ,_recordExpressionBindings_collectWarnings
         ,_expression_constraints
         ,_recordExpressionBindings_dictionaryEnvironment
         ,_expression_infoTree
         ,_expression_matchIO
         ,_expression_matches
         ,_recordExpressionBindings_patternMatchWarnings
         ,_self
         ,_expression_unboundNames ++ _recordExpressionBindings_unboundNames
         ,_recordExpressionBindings_uniqueChunk
         ,_expression_uniqueSecondRound
         )
sem_Expression_Tuple :: (T_Range) ->
                        (T_Expressions) ->
                        (T_Expression)
sem_Expression_Tuple (_range)
                     (_expressions)
                     (_lhs_allPatterns)
                     (_lhs_availablePredicates)
                     (_lhs_betaUnique)
                     (_lhs_chunkNumberMap)
                     (_lhs_collectChunkNumbers)
                     (_lhs_collectErrors)
                     (_lhs_collectWarnings)
                     (_lhs_currentChunk)
                     (_lhs_dictionaryEnvironment)
                     (_lhs_importEnvironment)
                     (_lhs_inferredTypes)
                     (_lhs_matchIO)
                     (_lhs_monos)
                     (_lhs_namesInScope)
                     (_lhs_orderedTypeSynonyms)
                     (_lhs_parentTree)
                     (_lhs_patternMatchWarnings)
                     (_lhs_predicates)
                     (_lhs_substitution)
                     (_lhs_tryPatterns)
                     (_lhs_uniqueChunk)
                     (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Tuple _range_self _expressions_self
        (_constraints) =
            _newcon .>. Node _expressions_constraintslist
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (tupleType _expressions_betas .==. _beta) _cinfo ]
        (_cinfo) =
            resultConstraint "tuple" _parentTree
               [ FolkloreConstraint, IsTupleEdge ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_expressions_infoTrees)
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ((_t1,_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match1 _infoTuple _expressions_uniqueSecondRound
                   match_Expression_Tuple
                   _lhs_tryPatterns _lhs_allPatterns
                   [_expressions_matches]
        ( _range_self) =
            (_range )
        ( _expressions_assumptions,_expressions_betaUnique,_expressions_betas,_expressions_collectChunkNumbers,_expressions_collectErrors,_expressions_collectWarnings,_expressions_constraintslist,_expressions_dictionaryEnvironment,_expressions_infoTrees,_expressions_matchIO,_expressions_matches,_expressions_patternMatchWarnings,_expressions_self,_expressions_unboundNames,_expressions_uniqueChunk,_expressions_uniqueSecondRound) =
            (_expressions (_lhs_allPatterns)
                          (_lhs_availablePredicates)
                          (_lhs_betaUnique + 1)
                          (_lhs_chunkNumberMap)
                          (_lhs_collectChunkNumbers)
                          (_lhs_collectErrors)
                          (_lhs_collectWarnings)
                          (_lhs_currentChunk)
                          (_lhs_dictionaryEnvironment)
                          (_lhs_importEnvironment)
                          (_lhs_inferredTypes)
                          (_lhs_matchIO)
                          (_lhs_monos)
                          (_lhs_namesInScope)
                          (_lhs_orderedTypeSynonyms)
                          (_parentTree)
                          (_lhs_patternMatchWarnings)
                          (_lhs_predicates)
                          (_lhs_substitution)
                          (_t1)
                          (_lhs_uniqueChunk)
                          (_lhs_uniqueSecondRound))
    in  ( _expressions_assumptions,_beta,_expressions_betaUnique,_expressions_collectChunkNumbers,_expressions_collectErrors,_expressions_collectWarnings,_newConstraintSet,_expressions_dictionaryEnvironment,_parentTree,_expressions_matchIO >> _ioMatch,_matches,_expressions_patternMatchWarnings,_self,_expressions_unboundNames,_expressions_uniqueChunk,_newUnique)
sem_Expression_Typed :: (T_Range) ->
                        (T_Expression) ->
                        (T_Type) ->
                        (T_Expression)
sem_Expression_Typed (_range)
                     (_expression)
                     (_type)
                     (_lhs_allPatterns)
                     (_lhs_availablePredicates)
                     (_lhs_betaUnique)
                     (_lhs_chunkNumberMap)
                     (_lhs_collectChunkNumbers)
                     (_lhs_collectErrors)
                     (_lhs_collectWarnings)
                     (_lhs_currentChunk)
                     (_lhs_dictionaryEnvironment)
                     (_lhs_importEnvironment)
                     (_lhs_inferredTypes)
                     (_lhs_matchIO)
                     (_lhs_monos)
                     (_lhs_namesInScope)
                     (_lhs_orderedTypeSynonyms)
                     (_lhs_parentTree)
                     (_lhs_patternMatchWarnings)
                     (_lhs_predicates)
                     (_lhs_substitution)
                     (_lhs_tryPatterns)
                     (_lhs_uniqueChunk)
                     (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Typed _range_self _expression_self _type_self
        (_constraints) =
            _conResult .>.
            Node [ _conExpr .<. _expression_constraints ]
        (_beta) =
            TVar _lhs_betaUnique
        (_typeScheme) =
            makeTpSchemeFromType _type_self
        (_conResult) =
            [ (_beta            .::. _typeScheme) _cinfoResult ]
        (_conExpr) =
            [ (_expression_beta .::. _typeScheme) _cinfoExpr   ]
        (_errors) =
            let scheme = generalize monos' _lhs_predicates tp'
                monos' = ftv (_lhs_substitution |-> _lhs_monos)
                tp'    = _lhs_substitution |-> _expression_beta
                info   = ( (self . attribute) _expression_infoTree, _range_self)
            in checkNotTooGeneral info _lhs_orderedTypeSynonyms _typeScheme scheme
        (_cinfoExpr) =
            childConstraint 0 "type annotation" _parentTree
               []
        (_cinfoResult) =
            resultConstraint "type annotation" _parentTree
               [ FolkloreConstraint ]
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_expression_infoTree]
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique + 1)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
        ( _type_self) =
            (_type )
    in  ( _expression_assumptions,_beta,_expression_betaUnique,_expression_collectChunkNumbers,_errors ++ _expression_collectErrors,_expression_collectWarnings,_constraints,_expression_dictionaryEnvironment,_parentTree,_expression_matchIO,matchOnlyVariable _infoTuple _lhs_tryPatterns,_expression_patternMatchWarnings,_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound)
sem_Expression_Variable :: (T_Range) ->
                           (T_Name) ->
                           (T_Expression)
sem_Expression_Variable (_range)
                        (_name)
                        (_lhs_allPatterns)
                        (_lhs_availablePredicates)
                        (_lhs_betaUnique)
                        (_lhs_chunkNumberMap)
                        (_lhs_collectChunkNumbers)
                        (_lhs_collectErrors)
                        (_lhs_collectWarnings)
                        (_lhs_currentChunk)
                        (_lhs_dictionaryEnvironment)
                        (_lhs_importEnvironment)
                        (_lhs_inferredTypes)
                        (_lhs_matchIO)
                        (_lhs_monos)
                        (_lhs_namesInScope)
                        (_lhs_orderedTypeSynonyms)
                        (_lhs_parentTree)
                        (_lhs_patternMatchWarnings)
                        (_lhs_predicates)
                        (_lhs_substitution)
                        (_lhs_tryPatterns)
                        (_lhs_uniqueChunk)
                        (_lhs_uniqueSecondRound) =
    let (_self) =
            Expression_Variable _range_self _name_self
        (_constraints) =
            Node [ Receive _lhs_betaUnique ]
        (_beta) =
            TVar _lhs_betaUnique
        (_nameInScope) =
            case filter (_name_self==) _lhs_namesInScope of
               [name] -> NameWithRange name
               _      -> internalError "TypeInferenceOverloading.ag" "n/a" "name not in scope"
        (_requiredDictionaries) =
            case lookupFM _lhs_inferredTypes _nameInScope of
               Nothing     -> []
               Just scheme -> getRequiredDictionaries
                                 (getOrderedTypeSynonyms _lhs_importEnvironment)
                                 (_lhs_substitution |-> _beta)
                                 scheme
        ((_newDEnv,_overloadingErrors)) =
            resolveOverloading _name_self _lhs_availablePredicates _requiredDictionaries _lhs_dictionaryEnvironment
        (_localInfo) =
            LocalInfo { self = UHA_Expr _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        (_infoTuple) =
            (_constraints, (_beta, self _localInfo, _range_self))
        (((),_matches,_newConstraintSet,_newUnique,_ioMatch)) =
            match0 _infoTuple _lhs_uniqueSecondRound
                   (match_Expression_Variable _name_self)
                   _lhs_tryPatterns _lhs_allPatterns
                   []
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _name_self `single` _beta,_beta,_lhs_betaUnique + 1,addToFM _lhs_collectChunkNumbers _lhs_betaUnique _lhs_currentChunk,map (makeUnresolvedOverloadingError _range_self (oneLinerSource $ self _localInfo)) _overloadingErrors ++ _lhs_collectErrors,_lhs_collectWarnings,_newConstraintSet,_newDEnv,_parentTree,_lhs_matchIO >> _ioMatch,_matches,_lhs_patternMatchWarnings,_self,[ _name_self ],_lhs_uniqueChunk,_newUnique)
-- Expressions -------------------------------------------------
-- semantic domain
type T_Expressions = ([((Expression, [String]), Core_TypingStrategy)]) ->
                     (Predicates) ->
                     (Int) ->
                     (ChunkNumberMap) ->
                     (ChunkNumberMap) ->
                     (TypeErrors) ->
                     (Warnings) ->
                     (Int) ->
                     (DictionaryEnvironment) ->
                     (ImportEnvironment) ->
                     (FiniteMap NameWithRange TpScheme) ->
                     (IO ()) ->
                     (Tps) ->
                     (Names) ->
                     (OrderedTypeSynonyms) ->
                     (InfoTree) ->
                     ([Warning]) ->
                     (Predicates) ->
                     (FixpointSubstitution) ->
                     ([(Expressions    , [String])]) ->
                     (Int) ->
                     (Int) ->
                     ( (Assumptions),(Int),(Tps),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSets),(DictionaryEnvironment),(InfoTrees),(IO ()),([Maybe (MetaVariableTable MetaVariableInfo)]),([Warning]),(Expressions),(Names),(Int),(Int))
-- cata
sem_Expressions :: (Expressions) ->
                   (T_Expressions)
sem_Expressions (list) =
    (foldr (sem_Expressions_Cons) (sem_Expressions_Nil) ((map sem_Expression list)))
sem_Expressions_Cons :: (T_Expression) ->
                        (T_Expressions) ->
                        (T_Expressions)
sem_Expressions_Cons (_hd)
                     (_tl)
                     (_lhs_allPatterns)
                     (_lhs_availablePredicates)
                     (_lhs_betaUnique)
                     (_lhs_chunkNumberMap)
                     (_lhs_collectChunkNumbers)
                     (_lhs_collectErrors)
                     (_lhs_collectWarnings)
                     (_lhs_currentChunk)
                     (_lhs_dictionaryEnvironment)
                     (_lhs_importEnvironment)
                     (_lhs_inferredTypes)
                     (_lhs_matchIO)
                     (_lhs_monos)
                     (_lhs_namesInScope)
                     (_lhs_orderedTypeSynonyms)
                     (_lhs_parentTree)
                     (_lhs_patternMatchWarnings)
                     (_lhs_predicates)
                     (_lhs_substitution)
                     (_lhs_tryPatterns)
                     (_lhs_uniqueChunk)
                     (_lhs_uniqueSecondRound) =
    let (_self) =
            (:) _hd_self _tl_self
        (((_t1,_t2),_matches,_,_,_)) =
            match2' match_Expressions_Cons _lhs_tryPatterns [] [_hd_matches, _tl_matches]
        ( _hd_assumptions,_hd_beta,_hd_betaUnique,_hd_collectChunkNumbers,_hd_collectErrors,_hd_collectWarnings,_hd_constraints,_hd_dictionaryEnvironment,_hd_infoTree,_hd_matchIO,_hd_matches,_hd_patternMatchWarnings,_hd_self,_hd_unboundNames,_hd_uniqueChunk,_hd_uniqueSecondRound) =
            (_hd (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_lhs_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_lhs_collectChunkNumbers)
                 (_lhs_collectErrors)
                 (_lhs_collectWarnings)
                 (_lhs_currentChunk)
                 (_lhs_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_lhs_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_lhs_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_t1)
                 (_lhs_uniqueChunk)
                 (_lhs_uniqueSecondRound))
        ( _tl_assumptions,_tl_betaUnique,_tl_betas,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_constraintslist,_tl_dictionaryEnvironment,_tl_infoTrees,_tl_matchIO,_tl_matches,_tl_patternMatchWarnings,_tl_self,_tl_unboundNames,_tl_uniqueChunk,_tl_uniqueSecondRound) =
            (_tl (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_hd_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_hd_collectChunkNumbers)
                 (_hd_collectErrors)
                 (_hd_collectWarnings)
                 (_lhs_currentChunk)
                 (_hd_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_hd_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_hd_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_t2)
                 (_hd_uniqueChunk)
                 (_hd_uniqueSecondRound))
    in  ( _hd_assumptions `combine` _tl_assumptions,_tl_betaUnique,_hd_beta : _tl_betas,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_hd_constraints : _tl_constraintslist,_tl_dictionaryEnvironment,_hd_infoTree : _tl_infoTrees,_tl_matchIO,_matches,_tl_patternMatchWarnings,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_uniqueChunk,_tl_uniqueSecondRound)
sem_Expressions_Nil :: (T_Expressions)
sem_Expressions_Nil (_lhs_allPatterns)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_tryPatterns)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            []
        (((),_matches,_,_,_)) =
            match0' match_Expressions_Nil _lhs_tryPatterns [] []
    in  ( noAssumptions,_lhs_betaUnique,[],_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],_lhs_matchIO,_matches,_lhs_patternMatchWarnings,_self,[],_lhs_uniqueChunk,_lhs_uniqueSecondRound)
-- FieldDeclaration --------------------------------------------
-- semantic domain
type T_FieldDeclaration = (Names) ->
                          ( (FieldDeclaration),(Names))
-- cata
sem_FieldDeclaration :: (FieldDeclaration) ->
                        (T_FieldDeclaration)
sem_FieldDeclaration ((FieldDeclaration_FieldDeclaration (_range) (_names) (_type))) =
    (sem_FieldDeclaration_FieldDeclaration ((sem_Range (_range))) ((sem_Names (_names))) ((sem_AnnotatedType (_type))))
sem_FieldDeclaration_FieldDeclaration :: (T_Range) ->
                                         (T_Names) ->
                                         (T_AnnotatedType) ->
                                         (T_FieldDeclaration)
sem_FieldDeclaration_FieldDeclaration (_range) (_names) (_type) (_lhs_namesInScope) =
    let (_self) =
            FieldDeclaration_FieldDeclaration _range_self _names_self _type_self
        ((_kindErrors,_tyconEnv,_constructorenv,_importEnvironment,_valueConstructors,_allValueConstructors,_typeConstructors,_allTypeConstructors)) =
            internalError "PartialSyntax.ag" "n/a" "FieldDeclaration.FieldDeclaration"
        ( _range_self) =
            (_range )
        ( _names_self) =
            (_names )
        ( _type_self,_type_unboundNames) =
            (_type (_lhs_namesInScope))
    in  ( _self,_type_unboundNames)
-- FieldDeclarations -------------------------------------------
-- semantic domain
type T_FieldDeclarations = (Names) ->
                           ( (FieldDeclarations),(Names))
-- cata
sem_FieldDeclarations :: (FieldDeclarations) ->
                         (T_FieldDeclarations)
sem_FieldDeclarations (list) =
    (foldr (sem_FieldDeclarations_Cons) (sem_FieldDeclarations_Nil) ((map sem_FieldDeclaration list)))
sem_FieldDeclarations_Cons :: (T_FieldDeclaration) ->
                              (T_FieldDeclarations) ->
                              (T_FieldDeclarations)
sem_FieldDeclarations_Cons (_hd) (_tl) (_lhs_namesInScope) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self,_hd_unboundNames) =
            (_hd (_lhs_namesInScope))
        ( _tl_self,_tl_unboundNames) =
            (_tl (_lhs_namesInScope))
    in  ( _self,_hd_unboundNames ++ _tl_unboundNames)
sem_FieldDeclarations_Nil :: (T_FieldDeclarations)
sem_FieldDeclarations_Nil (_lhs_namesInScope) =
    let (_self) =
            []
    in  ( _self,[])
-- Fixity ------------------------------------------------------
-- semantic domain
type T_Fixity = ( (Fixity))
-- cata
sem_Fixity :: (Fixity) ->
              (T_Fixity)
sem_Fixity ((Fixity_Infix (_range))) =
    (sem_Fixity_Infix ((sem_Range (_range))))
sem_Fixity ((Fixity_Infixl (_range))) =
    (sem_Fixity_Infixl ((sem_Range (_range))))
sem_Fixity ((Fixity_Infixr (_range))) =
    (sem_Fixity_Infixr ((sem_Range (_range))))
sem_Fixity_Infix :: (T_Range) ->
                    (T_Fixity)
sem_Fixity_Infix (_range) =
    let (_self) =
            Fixity_Infix _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Fixity_Infixl :: (T_Range) ->
                     (T_Fixity)
sem_Fixity_Infixl (_range) =
    let (_self) =
            Fixity_Infixl _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Fixity_Infixr :: (T_Range) ->
                     (T_Fixity)
sem_Fixity_Infixr (_range) =
    let (_self) =
            Fixity_Infixr _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
-- FunctionBinding ---------------------------------------------
-- semantic domain
type T_FunctionBinding = ([((Expression, [String]), Core_TypingStrategy)]) ->
                         (Predicates) ->
                         (Tp) ->
                         (Int) ->
                         (Tps) ->
                         (ChunkNumberMap) ->
                         (ChunkNumberMap) ->
                         (TypeErrors) ->
                         (Warnings) ->
                         (Int) ->
                         (DictionaryEnvironment) ->
                         (ImportEnvironment) ->
                         (FiniteMap NameWithRange TpScheme) ->
                         (IO ()) ->
                         (Tps) ->
                         (Names) ->
                         (OrderedTypeSynonyms) ->
                         (InfoTree) ->
                         ([Warning]) ->
                         (Predicates) ->
                         (FixpointSubstitution) ->
                         (Int) ->
                         ( (Int),(Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),( ([PatternElement], Bool) ),(InfoTree),(IO ()),(Name),(Int),([Warning]),(FunctionBinding),(Names),(Int),(Warning))
-- cata
sem_FunctionBinding :: (FunctionBinding) ->
                       (T_FunctionBinding)
sem_FunctionBinding ((FunctionBinding_FunctionBinding (_range) (_lefthandside) (_righthandside))) =
    (sem_FunctionBinding_FunctionBinding ((sem_Range (_range))) ((sem_LeftHandSide (_lefthandside))) ((sem_RightHandSide (_righthandside))))
sem_FunctionBinding_FunctionBinding :: (T_Range) ->
                                       (T_LeftHandSide) ->
                                       (T_RightHandSide) ->
                                       (T_FunctionBinding)
sem_FunctionBinding_FunctionBinding (_range)
                                    (_lefthandside)
                                    (_righthandside)
                                    (_lhs_allPatterns)
                                    (_lhs_availablePredicates)
                                    (_lhs_betaRight)
                                    (_lhs_betaUnique)
                                    (_lhs_betasLeft)
                                    (_lhs_chunkNumberMap)
                                    (_lhs_collectChunkNumbers)
                                    (_lhs_collectErrors)
                                    (_lhs_collectWarnings)
                                    (_lhs_currentChunk)
                                    (_lhs_dictionaryEnvironment)
                                    (_lhs_importEnvironment)
                                    (_lhs_inferredTypes)
                                    (_lhs_matchIO)
                                    (_lhs_monos)
                                    (_lhs_namesInScope)
                                    (_lhs_orderedTypeSynonyms)
                                    (_lhs_parentTree)
                                    (_lhs_patternMatchWarnings)
                                    (_lhs_predicates)
                                    (_lhs_substitution)
                                    (_lhs_uniqueChunk) =
    let (_self) =
            FunctionBinding_FunctionBinding _range_self _lefthandside_self _righthandside_self
        (_constraints) =
            _csetBinds .>>.
            Node [ _conLeft  .<. _lefthandside_constraints
                 , _conRight .<. _righthandside_constraints
                 ]
        ((_csetBinds,_assumptions')) =
            (_lefthandside_environment .===. _righthandside_assumptions) _cinfoBind
        (_conLeft) =
            zipWith3 (\t1 t2 nr -> (t1 .==. t2) (_cinfoLeft nr)) _lefthandside_betas _lhs_betasLeft [0..]
        (_conRight) =
            [ (_righthandside_beta .==. _lhs_betaRight) _cinfoRight ]
        (_cinfoLeft) =
            \num  ->
            orphanConstraint num "pattern of function binding" _parentTree
               [ ]
        (_cinfoRight) =
            orphanConstraint 1 "right hand side" _parentTree
               []
        (_cinfoBind) =
            \name -> variableConstraint "variable" (nameToSelfExpr name)
               [FolkloreConstraint]
        (_localInfo) =
            LocalInfo { self = UHA_FB _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_lefthandside_infoTrees ++ [_righthandside_infoTree])
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _lefthandside_patVarNames _righthandside_unboundNames _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _lefthandside_argcount,_lefthandside_betaUnique,_lefthandside_betas,_lefthandside_constraints,_lefthandside_elements,_lefthandside_environment,_lefthandside_infoTrees,_lefthandside_name,_lefthandside_numberOfPatterns,_lefthandside_patVarNames,_lefthandside_patternMatchWarnings,_lefthandside_self,_lefthandside_unboundNames) =
            (_lefthandside (_lhs_betaUnique) (_lhs_importEnvironment) (_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
        ( _righthandside_assumptions,_righthandside_beta,_righthandside_betaUnique,_righthandside_collectChunkNumbers,_righthandside_collectErrors,_righthandside_collectWarnings,_righthandside_constraints,_righthandside_dictionaryEnvironment,_righthandside_fallthrough,_righthandside_infoTree,_righthandside_matchIO,_righthandside_patternMatchWarnings,_righthandside_self,_righthandside_unboundNames,_righthandside_uniqueChunk) =
            (_righthandside (_lhs_allPatterns)
                            ("=")
                            (_lhs_availablePredicates)
                            (_lefthandside_betaUnique)
                            (_lhs_chunkNumberMap)
                            (_lhs_collectChunkNumbers)
                            (_lhs_collectErrors)
                            (_lhs_collectWarnings)
                            (_lhs_currentChunk)
                            (_lhs_dictionaryEnvironment)
                            (_lhs_importEnvironment)
                            (_lhs_inferredTypes)
                            (_lhs_matchIO)
                            (eltsFM _lefthandside_environment ++ getMonos _csetBinds ++ _lhs_monos)
                            (_namesInScope)
                            (_lhs_orderedTypeSynonyms)
                            (_parentTree)
                            (_lefthandside_patternMatchWarnings)
                            (_lhs_predicates)
                            (_lhs_substitution)
                            (_lhs_uniqueChunk))
    in  ( _lefthandside_argcount
         ,_assumptions'
         ,_righthandside_betaUnique
         ,_righthandside_collectChunkNumbers
         ,_righthandside_collectErrors
         ,_righthandside_collectWarnings
         ,_constraints
         ,_righthandside_dictionaryEnvironment
         ,(_lefthandside_elements, _righthandside_fallthrough)
         ,_parentTree
         ,_righthandside_matchIO
         ,_lefthandside_name
         ,_lefthandside_numberOfPatterns
         ,_righthandside_patternMatchWarnings
         ,_self
         ,_unboundNames
         ,_righthandside_uniqueChunk
         ,UnreachablePatternLHS _lefthandside_self
         )
-- FunctionBindings --------------------------------------------
-- semantic domain
type T_FunctionBindings = ([((Expression, [String]), Core_TypingStrategy)]) ->
                          (Predicates) ->
                          (Tp) ->
                          (Int) ->
                          (Tps) ->
                          (ChunkNumberMap) ->
                          (ChunkNumberMap) ->
                          (TypeErrors) ->
                          (Warnings) ->
                          (Int) ->
                          (DictionaryEnvironment) ->
                          (ImportEnvironment) ->
                          (FiniteMap NameWithRange TpScheme) ->
                          (IO ()) ->
                          (Tps) ->
                          (Names) ->
                          (OrderedTypeSynonyms) ->
                          (InfoTree) ->
                          ([Warning]) ->
                          (Predicates) ->
                          (FixpointSubstitution) ->
                          (Int) ->
                          ( (Int),(Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSets),(DictionaryEnvironment),([([PatternElement], Bool)]),(InfoTrees),(IO ()),(Name),(Int),([Warning]),(FunctionBindings),(Names),(Int),([Warning]))
-- cata
sem_FunctionBindings :: (FunctionBindings) ->
                        (T_FunctionBindings)
sem_FunctionBindings (list) =
    (foldr (sem_FunctionBindings_Cons) (sem_FunctionBindings_Nil) ((map sem_FunctionBinding list)))
sem_FunctionBindings_Cons :: (T_FunctionBinding) ->
                             (T_FunctionBindings) ->
                             (T_FunctionBindings)
sem_FunctionBindings_Cons (_hd)
                          (_tl)
                          (_lhs_allPatterns)
                          (_lhs_availablePredicates)
                          (_lhs_betaRight)
                          (_lhs_betaUnique)
                          (_lhs_betasLeft)
                          (_lhs_chunkNumberMap)
                          (_lhs_collectChunkNumbers)
                          (_lhs_collectErrors)
                          (_lhs_collectWarnings)
                          (_lhs_currentChunk)
                          (_lhs_dictionaryEnvironment)
                          (_lhs_importEnvironment)
                          (_lhs_inferredTypes)
                          (_lhs_matchIO)
                          (_lhs_monos)
                          (_lhs_namesInScope)
                          (_lhs_orderedTypeSynonyms)
                          (_lhs_parentTree)
                          (_lhs_patternMatchWarnings)
                          (_lhs_predicates)
                          (_lhs_substitution)
                          (_lhs_uniqueChunk) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_argcount,_hd_assumptions,_hd_betaUnique,_hd_collectChunkNumbers,_hd_collectErrors,_hd_collectWarnings,_hd_constraints,_hd_dictionaryEnvironment,_hd_elements,_hd_infoTree,_hd_matchIO,_hd_name,_hd_numberOfPatterns,_hd_patternMatchWarnings,_hd_self,_hd_unboundNames,_hd_uniqueChunk,_hd_unrwar) =
            (_hd (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_lhs_betaRight)
                 (_lhs_betaUnique)
                 (_lhs_betasLeft)
                 (_lhs_chunkNumberMap)
                 (_lhs_collectChunkNumbers)
                 (_lhs_collectErrors)
                 (_lhs_collectWarnings)
                 (_lhs_currentChunk)
                 (_lhs_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_lhs_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_lhs_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_lhs_uniqueChunk))
        ( _tl_argcount,_tl_assumptions,_tl_betaUnique,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_constraintslist,_tl_dictionaryEnvironment,_tl_elementss,_tl_infoTrees,_tl_matchIO,_tl_name,_tl_numberOfPatterns,_tl_patternMatchWarnings,_tl_self,_tl_unboundNames,_tl_uniqueChunk,_tl_unrwars) =
            (_tl (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_lhs_betaRight)
                 (_hd_betaUnique)
                 (_lhs_betasLeft)
                 (_lhs_chunkNumberMap)
                 (_hd_collectChunkNumbers)
                 (_hd_collectErrors)
                 (_hd_collectWarnings)
                 (_lhs_currentChunk)
                 (_hd_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_hd_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_hd_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_hd_uniqueChunk))
    in  ( _hd_argcount,_hd_assumptions `combine` _tl_assumptions,_tl_betaUnique,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_hd_constraints : _tl_constraintslist,_tl_dictionaryEnvironment,_hd_elements : _tl_elementss,_hd_infoTree : _tl_infoTrees,_tl_matchIO,_hd_name,_hd_numberOfPatterns,_tl_patternMatchWarnings,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_uniqueChunk,_hd_unrwar   : _tl_unrwars)
sem_FunctionBindings_Nil :: (T_FunctionBindings)
sem_FunctionBindings_Nil (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaRight)
                         (_lhs_betaUnique)
                         (_lhs_betasLeft)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_lhs_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_lhs_uniqueChunk) =
    let (_self) =
            []
    in  ( pmError "FunctionBindings_Nil.argcount" "?empty list of function bindings?",noAssumptions,_lhs_betaUnique,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,[],[],_lhs_matchIO,internalError "TypeInferencing.ag" "n/a" "FunctionBindings(2)",internalError "TypeInferencing.ag" "n/a" "FunctionBindings(1)",_lhs_patternMatchWarnings,_self,[],_lhs_uniqueChunk,[])
-- GuardedExpression -------------------------------------------
-- semantic domain
type T_GuardedExpression = ([((Expression, [String]), Core_TypingStrategy)]) ->
                           (Predicates) ->
                           (Int) ->
                           (ChunkNumberMap) ->
                           (ChunkNumberMap) ->
                           (TypeErrors) ->
                           (Warnings) ->
                           (Int) ->
                           (DictionaryEnvironment) ->
                           (ImportEnvironment) ->
                           (FiniteMap NameWithRange TpScheme) ->
                           (IO ()) ->
                           (Tps) ->
                           (Names) ->
                           (Int) ->
                           (OrderedTypeSynonyms) ->
                           (InfoTree) ->
                           ([Warning]) ->
                           (Predicates) ->
                           (Tp) ->
                           (FixpointSubstitution) ->
                           (Int) ->
                           (Int) ->
                           ( (Assumptions),(Tp),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(Bool),(InfoTrees),(IO ()),([Warning]),(Range),(GuardedExpression),(Names),(Int),(Int),(Warning))
-- cata
sem_GuardedExpression :: (GuardedExpression) ->
                         (T_GuardedExpression)
sem_GuardedExpression ((GuardedExpression_GuardedExpression (_range) (_guard) (_expression))) =
    (sem_GuardedExpression_GuardedExpression ((sem_Range (_range))) ((sem_Expression (_guard))) ((sem_Expression (_expression))))
sem_GuardedExpression_GuardedExpression :: (T_Range) ->
                                           (T_Expression) ->
                                           (T_Expression) ->
                                           (T_GuardedExpression)
sem_GuardedExpression_GuardedExpression (_range)
                                        (_guard)
                                        (_expression)
                                        (_lhs_allPatterns)
                                        (_lhs_availablePredicates)
                                        (_lhs_betaUnique)
                                        (_lhs_chunkNumberMap)
                                        (_lhs_collectChunkNumbers)
                                        (_lhs_collectErrors)
                                        (_lhs_collectWarnings)
                                        (_lhs_currentChunk)
                                        (_lhs_dictionaryEnvironment)
                                        (_lhs_importEnvironment)
                                        (_lhs_inferredTypes)
                                        (_lhs_matchIO)
                                        (_lhs_monos)
                                        (_lhs_namesInScope)
                                        (_lhs_numberOfGuards)
                                        (_lhs_orderedTypeSynonyms)
                                        (_lhs_parentTree)
                                        (_lhs_patternMatchWarnings)
                                        (_lhs_predicates)
                                        (_lhs_rightBeta)
                                        (_lhs_substitution)
                                        (_lhs_uniqueChunk)
                                        (_lhs_uniqueSecondRound) =
    let (_self) =
            GuardedExpression_GuardedExpression _range_self _guard_self _expression_self
        (_newconGuard) =
            [ (_guard_beta .==. boolType) _cinfoGuard ]
        (_newconExpr) =
            [ (_expression_beta .==. _lhs_rightBeta) _cinfoExpr ]
        (_cinfoGuard) =
            resultConstraint "guard" _guard_infoTree
               []
        (_cinfoExpr) =
            resultConstraint "guarded expression" _expression_infoTree
               [ HasTrustFactor 10.0 | _lhs_numberOfGuards < 2 ]
        ( _range_self) =
            (_range )
        ( _guard_assumptions,_guard_beta,_guard_betaUnique,_guard_collectChunkNumbers,_guard_collectErrors,_guard_collectWarnings,_guard_constraints,_guard_dictionaryEnvironment,_guard_infoTree,_guard_matchIO,_guard_matches,_guard_patternMatchWarnings,_guard_self,_guard_unboundNames,_guard_uniqueChunk,_guard_uniqueSecondRound) =
            (_guard (_lhs_allPatterns)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    ([])
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_guard_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_guard_collectChunkNumbers)
                         (_guard_collectErrors)
                         (_guard_collectWarnings)
                         (_lhs_currentChunk)
                         (_guard_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_guard_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_lhs_parentTree)
                         (_guard_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_guard_uniqueChunk)
                         (_guard_uniqueSecondRound))
    in  ( _guard_assumptions `combine` _expression_assumptions
         ,_expression_beta
         ,_expression_betaUnique
         ,_expression_collectChunkNumbers
         ,_expression_collectErrors
         ,_expression_collectWarnings
         ,Node [ _newconGuard .<. _guard_constraints
               , _newconExpr  .<. _expression_constraints
               ]
         ,_expression_dictionaryEnvironment
         ,case _guard_self
          of Expression_Variable    _ (Name_Identifier _ _ "otherwise") -> False
             Expression_Constructor _ (Name_Identifier _ _ "True"     ) -> False
             _                                                          -> True
         ,[_guard_infoTree, _expression_infoTree]
         ,_expression_matchIO
         ,_expression_patternMatchWarnings
         ,_range
         ,_self
         ,_guard_unboundNames ++ _expression_unboundNames
         ,_expression_uniqueChunk
         ,_expression_uniqueSecondRound
         ,UnreachableGuard _range _guard_self
         )
-- GuardedExpressions ------------------------------------------
-- semantic domain
type T_GuardedExpressions = ([((Expression, [String]), Core_TypingStrategy)]) ->
                            (Predicates) ->
                            (Int) ->
                            (ChunkNumberMap) ->
                            (ChunkNumberMap) ->
                            (TypeErrors) ->
                            (Warnings) ->
                            (Int) ->
                            (DictionaryEnvironment) ->
                            (ImportEnvironment) ->
                            (FiniteMap NameWithRange TpScheme) ->
                            (IO ()) ->
                            (Tps) ->
                            (Names) ->
                            (Int) ->
                            (Bool) ->
                            (OrderedTypeSynonyms) ->
                            (InfoTree) ->
                            ([Warning]) ->
                            (Predicates) ->
                            (Tp) ->
                            (FixpointSubstitution) ->
                            (Int) ->
                            (Int) ->
                            ( (Assumptions),(Int),(Tps),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSets),(DictionaryEnvironment),(Bool),(InfoTrees),(IO ()),([Warning]),(GuardedExpressions),(Names),(Int),(Int))
-- cata
sem_GuardedExpressions :: (GuardedExpressions) ->
                          (T_GuardedExpressions)
sem_GuardedExpressions (list) =
    (foldr (sem_GuardedExpressions_Cons) (sem_GuardedExpressions_Nil) ((map sem_GuardedExpression list)))
sem_GuardedExpressions_Cons :: (T_GuardedExpression) ->
                               (T_GuardedExpressions) ->
                               (T_GuardedExpressions)
sem_GuardedExpressions_Cons (_hd)
                            (_tl)
                            (_lhs_allPatterns)
                            (_lhs_availablePredicates)
                            (_lhs_betaUnique)
                            (_lhs_chunkNumberMap)
                            (_lhs_collectChunkNumbers)
                            (_lhs_collectErrors)
                            (_lhs_collectWarnings)
                            (_lhs_currentChunk)
                            (_lhs_dictionaryEnvironment)
                            (_lhs_importEnvironment)
                            (_lhs_inferredTypes)
                            (_lhs_matchIO)
                            (_lhs_monos)
                            (_lhs_namesInScope)
                            (_lhs_numberOfGuards)
                            (_lhs_open)
                            (_lhs_orderedTypeSynonyms)
                            (_lhs_parentTree)
                            (_lhs_patternMatchWarnings)
                            (_lhs_predicates)
                            (_lhs_rightBeta)
                            (_lhs_substitution)
                            (_lhs_uniqueChunk)
                            (_lhs_uniqueSecondRound) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_assumptions,_hd_beta,_hd_betaUnique,_hd_collectChunkNumbers,_hd_collectErrors,_hd_collectWarnings,_hd_constraints,_hd_dictionaryEnvironment,_hd_fallthrough,_hd_infoTrees,_hd_matchIO,_hd_patternMatchWarnings,_hd_range,_hd_self,_hd_unboundNames,_hd_uniqueChunk,_hd_uniqueSecondRound,_hd_unrwar) =
            (_hd (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_lhs_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_lhs_collectChunkNumbers)
                 (_lhs_collectErrors)
                 (_lhs_collectWarnings)
                 (_lhs_currentChunk)
                 (_lhs_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_lhs_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_numberOfGuards)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_lhs_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_rightBeta)
                 (_lhs_substitution)
                 (_lhs_uniqueChunk)
                 (_lhs_uniqueSecondRound))
        ( _tl_assumptions,_tl_betaUnique,_tl_betas,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_constraintslist,_tl_dictionaryEnvironment,_tl_fallthrough,_tl_infoTrees,_tl_matchIO,_tl_patternMatchWarnings,_tl_self,_tl_unboundNames,_tl_uniqueChunk,_tl_uniqueSecondRound) =
            (_tl (_lhs_allPatterns)
                 (_lhs_availablePredicates)
                 (_hd_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_hd_collectChunkNumbers)
                 (_hd_collectErrors)
                 (_hd_collectWarnings)
                 (_lhs_currentChunk)
                 (_hd_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_hd_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_numberOfGuards)
                 (_hd_fallthrough && _lhs_open)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_hd_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_rightBeta)
                 (_lhs_substitution)
                 (_hd_uniqueChunk)
                 (_hd_uniqueSecondRound))
    in  ( _hd_assumptions `combine` _tl_assumptions
         ,_tl_betaUnique
         ,_hd_beta : _tl_betas
         ,_tl_collectChunkNumbers
         ,_tl_collectErrors
         ,_tl_collectWarnings
         ,_hd_constraints : _tl_constraintslist
         ,_tl_dictionaryEnvironment
         ,_hd_fallthrough && _tl_fallthrough
         ,_hd_infoTrees ++ _tl_infoTrees
         ,_tl_matchIO
         ,(if not _lhs_open then [_hd_unrwar] else [])
          ++ _tl_patternMatchWarnings
         ,_self
         ,_hd_unboundNames ++ _tl_unboundNames
         ,_tl_uniqueChunk
         ,_tl_uniqueSecondRound
         )
sem_GuardedExpressions_Nil :: (T_GuardedExpressions)
sem_GuardedExpressions_Nil (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique)
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_lhs_inferredTypes)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_lhs_namesInScope)
                           (_lhs_numberOfGuards)
                           (_lhs_open)
                           (_lhs_orderedTypeSynonyms)
                           (_lhs_parentTree)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_rightBeta)
                           (_lhs_substitution)
                           (_lhs_uniqueChunk)
                           (_lhs_uniqueSecondRound) =
    let (_self) =
            []
    in  ( noAssumptions,_lhs_betaUnique,[],_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,[],_lhs_dictionaryEnvironment,True,[],_lhs_matchIO,_lhs_patternMatchWarnings,_self,[],_lhs_uniqueChunk,_lhs_uniqueSecondRound)
-- Import ------------------------------------------------------
-- semantic domain
type T_Import = ( (Import))
-- cata
sem_Import :: (Import) ->
              (T_Import)
sem_Import ((Import_TypeOrClass (_range) (_name) (_names))) =
    (sem_Import_TypeOrClass ((sem_Range (_range))) ((sem_Name (_name))) ((sem_MaybeNames (_names))))
sem_Import ((Import_TypeOrClassComplete (_range) (_name))) =
    (sem_Import_TypeOrClassComplete ((sem_Range (_range))) ((sem_Name (_name))))
sem_Import ((Import_Variable (_range) (_name))) =
    (sem_Import_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Import_TypeOrClass :: (T_Range) ->
                          (T_Name) ->
                          (T_MaybeNames) ->
                          (T_Import)
sem_Import_TypeOrClass (_range) (_name) (_names) =
    let (_self) =
            Import_TypeOrClass _range_self _name_self _names_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _names_self) =
            (_names )
    in  ( _self)
sem_Import_TypeOrClassComplete :: (T_Range) ->
                                  (T_Name) ->
                                  (T_Import)
sem_Import_TypeOrClassComplete (_range) (_name) =
    let (_self) =
            Import_TypeOrClassComplete _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Import_Variable :: (T_Range) ->
                       (T_Name) ->
                       (T_Import)
sem_Import_Variable (_range) (_name) =
    let (_self) =
            Import_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
-- ImportDeclaration -------------------------------------------
-- semantic domain
type T_ImportDeclaration = ( (ImportDeclaration))
-- cata
sem_ImportDeclaration :: (ImportDeclaration) ->
                         (T_ImportDeclaration)
sem_ImportDeclaration ((ImportDeclaration_Empty (_range))) =
    (sem_ImportDeclaration_Empty ((sem_Range (_range))))
sem_ImportDeclaration ((ImportDeclaration_Import (_range) (_qualified) (_name) (_asname) (_importspecification))) =
    (sem_ImportDeclaration_Import ((sem_Range (_range))) (_qualified) ((sem_Name (_name))) ((sem_MaybeName (_asname))) ((sem_MaybeImportSpecification (_importspecification))))
sem_ImportDeclaration_Empty :: (T_Range) ->
                               (T_ImportDeclaration)
sem_ImportDeclaration_Empty (_range) =
    let (_self) =
            ImportDeclaration_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
sem_ImportDeclaration_Import :: (T_Range) ->
                                (Bool) ->
                                (T_Name) ->
                                (T_MaybeName) ->
                                (T_MaybeImportSpecification) ->
                                (T_ImportDeclaration)
sem_ImportDeclaration_Import (_range) (_qualified) (_name) (_asname) (_importspecification) =
    let (_self) =
            ImportDeclaration_Import _range_self _qualified _name_self _asname_self _importspecification_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _asname_self) =
            (_asname )
        ( _importspecification_self) =
            (_importspecification )
    in  ( _self)
-- ImportDeclarations ------------------------------------------
-- semantic domain
type T_ImportDeclarations = ( (ImportDeclarations))
-- cata
sem_ImportDeclarations :: (ImportDeclarations) ->
                          (T_ImportDeclarations)
sem_ImportDeclarations (list) =
    (foldr (sem_ImportDeclarations_Cons) (sem_ImportDeclarations_Nil) ((map sem_ImportDeclaration list)))
sem_ImportDeclarations_Cons :: (T_ImportDeclaration) ->
                               (T_ImportDeclarations) ->
                               (T_ImportDeclarations)
sem_ImportDeclarations_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_ImportDeclarations_Nil :: (T_ImportDeclarations)
sem_ImportDeclarations_Nil  =
    let (_self) =
            []
    in  ( _self)
-- ImportSpecification -----------------------------------------
-- semantic domain
type T_ImportSpecification = ( (ImportSpecification))
-- cata
sem_ImportSpecification :: (ImportSpecification) ->
                           (T_ImportSpecification)
sem_ImportSpecification ((ImportSpecification_Import (_range) (_hiding) (_imports))) =
    (sem_ImportSpecification_Import ((sem_Range (_range))) (_hiding) ((sem_Imports (_imports))))
sem_ImportSpecification_Import :: (T_Range) ->
                                  (Bool) ->
                                  (T_Imports) ->
                                  (T_ImportSpecification)
sem_ImportSpecification_Import (_range) (_hiding) (_imports) =
    let (_self) =
            ImportSpecification_Import _range_self _hiding _imports_self
        ( _range_self) =
            (_range )
        ( _imports_self) =
            (_imports )
    in  ( _self)
-- Imports -----------------------------------------------------
-- semantic domain
type T_Imports = ( (Imports))
-- cata
sem_Imports :: (Imports) ->
               (T_Imports)
sem_Imports (list) =
    (foldr (sem_Imports_Cons) (sem_Imports_Nil) ((map sem_Import list)))
sem_Imports_Cons :: (T_Import) ->
                    (T_Imports) ->
                    (T_Imports)
sem_Imports_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Imports_Nil :: (T_Imports)
sem_Imports_Nil  =
    let (_self) =
            []
    in  ( _self)
-- LeftHandSide ------------------------------------------------
-- semantic domain
type T_LeftHandSide = (Int) ->
                      (ImportEnvironment) ->
                      (Names) ->
                      (InfoTree) ->
                      ([Warning]) ->
                      ( (Int),(Int),(Tps),(ConstraintSet),(  [PatternElement]        ),(PatternAssumptions),(InfoTrees),(Name),(Int),(Names),([Warning]),(LeftHandSide),(Names))
-- cata
sem_LeftHandSide :: (LeftHandSide) ->
                    (T_LeftHandSide)
sem_LeftHandSide ((LeftHandSide_Function (_range) (_name) (_patterns))) =
    (sem_LeftHandSide_Function ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Patterns (_patterns))))
sem_LeftHandSide ((LeftHandSide_Infix (_range) (_leftPattern) (_operator) (_rightPattern))) =
    (sem_LeftHandSide_Infix ((sem_Range (_range))) ((sem_Pattern (_leftPattern))) ((sem_Name (_operator))) ((sem_Pattern (_rightPattern))))
sem_LeftHandSide ((LeftHandSide_Parenthesized (_range) (_lefthandside) (_patterns))) =
    (sem_LeftHandSide_Parenthesized ((sem_Range (_range))) ((sem_LeftHandSide (_lefthandside))) ((sem_Patterns (_patterns))))
sem_LeftHandSide_Function :: (T_Range) ->
                             (T_Name) ->
                             (T_Patterns) ->
                             (T_LeftHandSide)
sem_LeftHandSide_Function (_range) (_name) (_patterns) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            LeftHandSide_Function _range_self _name_self _patterns_self
        (_constraints) =
            Node _patterns_constraintslist
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_elementss,_patterns_environment,_patterns_infoTrees,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_patternMatchWarnings,_patterns_self,_patterns_unboundNames) =
            (_patterns (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings))
    in  ( length _patterns_self,_patterns_betaUnique,_patterns_betas,_constraints,concat _patterns_elementss,_patterns_environment,_patterns_infoTrees,_name_self,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_patternMatchWarnings,_self,_patterns_unboundNames)
sem_LeftHandSide_Infix :: (T_Range) ->
                          (T_Pattern) ->
                          (T_Name) ->
                          (T_Pattern) ->
                          (T_LeftHandSide)
sem_LeftHandSide_Infix (_range) (_leftPattern) (_operator) (_rightPattern) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            LeftHandSide_Infix _range_self _leftPattern_self _operator_self _rightPattern_self
        (_constraints) =
            Node [ _leftPattern_constraints
                 , _rightPattern_constraints
                 ]
        ( _range_self) =
            (_range )
        ( _leftPattern_beta,_leftPattern_betaUnique,_leftPattern_constraints,_leftPattern_elements,_leftPattern_environment,_leftPattern_infoTree,_leftPattern_patVarNames,_leftPattern_patternMatchWarnings,_leftPattern_self,_leftPattern_unboundNames) =
            (_leftPattern (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings))
        ( _operator_self) =
            (_operator )
        ( _rightPattern_beta,_rightPattern_betaUnique,_rightPattern_constraints,_rightPattern_elements,_rightPattern_environment,_rightPattern_infoTree,_rightPattern_patVarNames,_rightPattern_patternMatchWarnings,_rightPattern_self,_rightPattern_unboundNames) =
            (_rightPattern (_leftPattern_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_leftPattern_patternMatchWarnings))
    in  ( 2,_rightPattern_betaUnique,[_leftPattern_beta,_rightPattern_beta],_constraints,_leftPattern_elements ++ _rightPattern_elements,_leftPattern_environment `plusFM` _rightPattern_environment,[_leftPattern_infoTree, _rightPattern_infoTree],_operator_self,2,_leftPattern_patVarNames ++ _rightPattern_patVarNames,_rightPattern_patternMatchWarnings,_self,_leftPattern_unboundNames ++ _rightPattern_unboundNames)
sem_LeftHandSide_Parenthesized :: (T_Range) ->
                                  (T_LeftHandSide) ->
                                  (T_Patterns) ->
                                  (T_LeftHandSide)
sem_LeftHandSide_Parenthesized (_range) (_lefthandside) (_patterns) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            LeftHandSide_Parenthesized _range_self _lefthandside_self _patterns_self
        (_constraints) =
            Node ( _lefthandside_constraints : _patterns_constraintslist )
        ( _range_self) =
            (_range )
        ( _lefthandside_argcount,_lefthandside_betaUnique,_lefthandside_betas,_lefthandside_constraints,_lefthandside_elements,_lefthandside_environment,_lefthandside_infoTrees,_lefthandside_name,_lefthandside_numberOfPatterns,_lefthandside_patVarNames,_lefthandside_patternMatchWarnings,_lefthandside_self,_lefthandside_unboundNames) =
            (_lefthandside (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings))
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_elementss,_patterns_environment,_patterns_infoTrees,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_patternMatchWarnings,_patterns_self,_patterns_unboundNames) =
            (_patterns (_lefthandside_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lefthandside_patternMatchWarnings))
    in  ( _lefthandside_argcount
         ,_patterns_betaUnique
         ,_lefthandside_betas ++ _patterns_betas
         ,_constraints
         ,_lefthandside_elements
         ,_lefthandside_environment `plusFM` _patterns_environment
         ,_lefthandside_infoTrees ++ _patterns_infoTrees
         ,_lefthandside_name
         ,_lefthandside_numberOfPatterns + _patterns_numberOfPatterns
         ,_lefthandside_patVarNames ++ _patterns_patVarNames
         ,_patterns_patternMatchWarnings
         ,_self
         ,_lefthandside_unboundNames ++ _patterns_unboundNames
         )
-- Literal -----------------------------------------------------
-- semantic domain
type T_Literal = ( (  [PatternElement]        ),(Tp),(Literal))
-- cata
sem_Literal :: (Literal) ->
               (T_Literal)
sem_Literal ((Literal_Char (_range) (_value))) =
    (sem_Literal_Char ((sem_Range (_range))) (_value))
sem_Literal ((Literal_Float (_range) (_value))) =
    (sem_Literal_Float ((sem_Range (_range))) (_value))
sem_Literal ((Literal_Int (_range) (_value))) =
    (sem_Literal_Int ((sem_Range (_range))) (_value))
sem_Literal ((Literal_String (_range) (_value))) =
    (sem_Literal_String ((sem_Range (_range))) (_value))
sem_Literal_Char :: (T_Range) ->
                    (String) ->
                    (T_Literal)
sem_Literal_Char (_range) (_value) =
    let (_self) =
            Literal_Char _range_self _value
        ( _range_self) =
            (_range )
    in  ( [InfiniteElement _value],charType,_self)
sem_Literal_Float :: (T_Range) ->
                     (String) ->
                     (T_Literal)
sem_Literal_Float (_range) (_value) =
    let (_self) =
            Literal_Float _range_self _value
        ( _range_self) =
            (_range )
    in  ( [InfiniteElement _value],floatType,_self)
sem_Literal_Int :: (T_Range) ->
                   (String) ->
                   (T_Literal)
sem_Literal_Int (_range) (_value) =
    let (_self) =
            Literal_Int _range_self _value
        ( _range_self) =
            (_range )
    in  ( [InfiniteElement _value],intType,_self)
sem_Literal_String :: (T_Range) ->
                      (String) ->
                      (T_Literal)
sem_Literal_String (_range) (_value) =
    let (_self) =
            Literal_String _range_self _value
        ( _range_self) =
            (_range )
    in  ( stringPat _value,stringType,_self)
-- MaybeDeclarations -------------------------------------------
-- semantic domain
type T_MaybeDeclarations = ([((Expression, [String]), Core_TypingStrategy)]) ->
                           (Assumptions) ->
                           (Predicates) ->
                           (Int) ->
                           (ChunkNumberMap) ->
                           (ChunkNumberMap) ->
                           (TypeErrors) ->
                           (Warnings) ->
                           (ConstraintSet) ->
                           (Int) ->
                           (DictionaryEnvironment) ->
                           (ImportEnvironment) ->
                           (FiniteMap NameWithRange TpScheme) ->
                           (IO ()) ->
                           (Tps) ->
                           (Names) ->
                           (OrderedTypeSynonyms) ->
                           (InfoTree) ->
                           ([Warning]) ->
                           (Predicates) ->
                           (FixpointSubstitution) ->
                           (Names) ->
                           (Int) ->
                           ( (Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(InfoTrees),([(NameWithRange, TpScheme)]),(IO ()),(Names),([Warning]),(MaybeDeclarations),(Names),(Int))
-- cata
sem_MaybeDeclarations :: (MaybeDeclarations) ->
                         (T_MaybeDeclarations)
sem_MaybeDeclarations ((MaybeDeclarations_Just (_declarations))) =
    (sem_MaybeDeclarations_Just ((sem_Declarations (_declarations))))
sem_MaybeDeclarations ((MaybeDeclarations_Nothing )) =
    (sem_MaybeDeclarations_Nothing )
sem_MaybeDeclarations_Just :: (T_Declarations) ->
                              (T_MaybeDeclarations)
sem_MaybeDeclarations_Just (_declarations)
                           (_lhs_allPatterns)
                           (_lhs_assumptions)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique)
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_constraints)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_lhs_inferredTypes)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_lhs_namesInScope)
                           (_lhs_orderedTypeSynonyms)
                           (_lhs_parentTree)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (_lhs_unboundNames)
                           (_lhs_uniqueChunk) =
    let (_self) =
            MaybeDeclarations_Just _declarations_self
        ((_aset,_cset,_inheritedBDG,_chunkNr)) =
            performBindingGroup _lhs_currentChunk _declarations_uniqueChunk _lhs_chunkNumberMap _lhs_monos _declarations_typeSignatures _mybdggroup _declarations_bindingGroups
        (_mybdggroup) =
            Just (_lhs_assumptions, [_lhs_constraints])
        (_localTypes) =
            getInferredTypes _lhs_monos _lhs_substitution _lhs_predicates _declarations_bindingGroups
        ((_errors,_warnings)) =
            checkAnnotations False _lhs_orderedTypeSynonyms _declarations_typeSignatures _localTypes
        (_declInfo) =
            LocalInfo { self = UHA_Decls _declarations_self
                      , assignedType = Nothing
                      }
        (_theNode) =
            node _lhs_parentTree _declInfo _declarations_infoTrees
        ((_collectTypeConstructors,_collectValueConstructors,_collectTypeSynonyms,_collectConstructorEnv,_derivedFunctions,_operatorFixities)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel MaybeDeclaration"
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _declarations_declVarNames (_declarations_unboundNames ++ _lhs_unboundNames) _lhs_namesInScope
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectChunkNumbers,_declarations_collectErrors,_declarations_collectWarnings,_declarations_declVarNames,_declarations_dictionaryEnvironment,_declarations_infoTrees,_declarations_matchIO,_declarations_patternMatchWarnings,_declarations_self,_declarations_typeSignatures,_declarations_unboundNames,_declarations_uniqueChunk) =
            (_declarations (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique)
                           ([])
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_lhs_inferredTypes)
                           (_inheritedBDG)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_namesInScope)
                           (_lhs_orderedTypeSynonyms)
                           (_theNode)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (emptyFM)
                           (_lhs_uniqueChunk))
    in  ( _aset,_declarations_betaUnique,_declarations_collectChunkNumbers,_errors ++ _declarations_collectErrors,_warnings ++ _declarations_collectWarnings,_cset,_declarations_dictionaryEnvironment,[_theNode],_localTypes,_declarations_matchIO,_namesInScope,_declarations_patternMatchWarnings,_self,_unboundNames,_chunkNr)
sem_MaybeDeclarations_Nothing :: (T_MaybeDeclarations)
sem_MaybeDeclarations_Nothing (_lhs_allPatterns)
                              (_lhs_assumptions)
                              (_lhs_availablePredicates)
                              (_lhs_betaUnique)
                              (_lhs_chunkNumberMap)
                              (_lhs_collectChunkNumbers)
                              (_lhs_collectErrors)
                              (_lhs_collectWarnings)
                              (_lhs_constraints)
                              (_lhs_currentChunk)
                              (_lhs_dictionaryEnvironment)
                              (_lhs_importEnvironment)
                              (_lhs_inferredTypes)
                              (_lhs_matchIO)
                              (_lhs_monos)
                              (_lhs_namesInScope)
                              (_lhs_orderedTypeSynonyms)
                              (_lhs_parentTree)
                              (_lhs_patternMatchWarnings)
                              (_lhs_predicates)
                              (_lhs_substitution)
                              (_lhs_unboundNames)
                              (_lhs_uniqueChunk) =
    let (_self) =
            MaybeDeclarations_Nothing
        (_localTypes) =
            []
    in  ( _lhs_assumptions,_lhs_betaUnique,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_lhs_constraints,_lhs_dictionaryEnvironment,[],_localTypes,_lhs_matchIO,_lhs_namesInScope,_lhs_patternMatchWarnings,_self,_lhs_unboundNames,_lhs_uniqueChunk)
-- MaybeExports ------------------------------------------------
-- semantic domain
type T_MaybeExports = ( (MaybeExports))
-- cata
sem_MaybeExports :: (MaybeExports) ->
                    (T_MaybeExports)
sem_MaybeExports ((MaybeExports_Just (_exports))) =
    (sem_MaybeExports_Just ((sem_Exports (_exports))))
sem_MaybeExports ((MaybeExports_Nothing )) =
    (sem_MaybeExports_Nothing )
sem_MaybeExports_Just :: (T_Exports) ->
                         (T_MaybeExports)
sem_MaybeExports_Just (_exports) =
    let (_self) =
            MaybeExports_Just _exports_self
        ( _exports_self) =
            (_exports )
    in  ( _self)
sem_MaybeExports_Nothing :: (T_MaybeExports)
sem_MaybeExports_Nothing  =
    let (_self) =
            MaybeExports_Nothing
    in  ( _self)
-- MaybeExpression ---------------------------------------------
-- semantic domain
type T_MaybeExpression = ([((Expression, [String]), Core_TypingStrategy)]) ->
                         (Predicates) ->
                         (Int) ->
                         (ChunkNumberMap) ->
                         (ChunkNumberMap) ->
                         (TypeErrors) ->
                         (Warnings) ->
                         (Int) ->
                         (DictionaryEnvironment) ->
                         (ImportEnvironment) ->
                         (FiniteMap NameWithRange TpScheme) ->
                         (IO ()) ->
                         (Tps) ->
                         (Names) ->
                         (OrderedTypeSynonyms) ->
                         (InfoTree) ->
                         ([Warning]) ->
                         (Predicates) ->
                         (FixpointSubstitution) ->
                         ([(MaybeExpression, [String])]) ->
                         (Int) ->
                         (Int) ->
                         ( (Assumptions),(Tp),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(InfoTrees),(IO ()),([Maybe (MetaVariableTable MetaVariableInfo)]),([Warning]),(Bool),(MaybeExpression),(Names),(Int),(Int))
-- cata
sem_MaybeExpression :: (MaybeExpression) ->
                       (T_MaybeExpression)
sem_MaybeExpression ((MaybeExpression_Just (_expression))) =
    (sem_MaybeExpression_Just ((sem_Expression (_expression))))
sem_MaybeExpression ((MaybeExpression_Nothing )) =
    (sem_MaybeExpression_Nothing )
sem_MaybeExpression_Just :: (T_Expression) ->
                            (T_MaybeExpression)
sem_MaybeExpression_Just (_expression)
                         (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_lhs_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_lhs_tryPatterns)
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound) =
    let (_self) =
            MaybeExpression_Just _expression_self
        ((_t1,_matches,_,_,_)) =
            match1' match_MaybeExpression_Just _lhs_tryPatterns [] [_expression_matches]
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_lhs_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_t1)
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,[_expression_infoTree],_expression_matchIO,_matches,_expression_patternMatchWarnings,False,_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound)
sem_MaybeExpression_Nothing :: (T_MaybeExpression)
sem_MaybeExpression_Nothing (_lhs_allPatterns)
                            (_lhs_availablePredicates)
                            (_lhs_betaUnique)
                            (_lhs_chunkNumberMap)
                            (_lhs_collectChunkNumbers)
                            (_lhs_collectErrors)
                            (_lhs_collectWarnings)
                            (_lhs_currentChunk)
                            (_lhs_dictionaryEnvironment)
                            (_lhs_importEnvironment)
                            (_lhs_inferredTypes)
                            (_lhs_matchIO)
                            (_lhs_monos)
                            (_lhs_namesInScope)
                            (_lhs_orderedTypeSynonyms)
                            (_lhs_parentTree)
                            (_lhs_patternMatchWarnings)
                            (_lhs_predicates)
                            (_lhs_substitution)
                            (_lhs_tryPatterns)
                            (_lhs_uniqueChunk)
                            (_lhs_uniqueSecondRound) =
    let (_self) =
            MaybeExpression_Nothing
        (_beta) =
            TVar _lhs_betaUnique
        (((),_matches,_,_,_)) =
            match0' match_MaybeExpression_Nothing _lhs_tryPatterns [] []
    in  ( noAssumptions,_beta,_lhs_betaUnique + 1,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,emptyTree,_lhs_dictionaryEnvironment,[],_lhs_matchIO,_matches,_lhs_patternMatchWarnings,True,_self,[],_lhs_uniqueChunk,_lhs_uniqueSecondRound)
-- MaybeImportSpecification ------------------------------------
-- semantic domain
type T_MaybeImportSpecification = ( (MaybeImportSpecification))
-- cata
sem_MaybeImportSpecification :: (MaybeImportSpecification) ->
                                (T_MaybeImportSpecification)
sem_MaybeImportSpecification ((MaybeImportSpecification_Just (_importspecification))) =
    (sem_MaybeImportSpecification_Just ((sem_ImportSpecification (_importspecification))))
sem_MaybeImportSpecification ((MaybeImportSpecification_Nothing )) =
    (sem_MaybeImportSpecification_Nothing )
sem_MaybeImportSpecification_Just :: (T_ImportSpecification) ->
                                     (T_MaybeImportSpecification)
sem_MaybeImportSpecification_Just (_importspecification) =
    let (_self) =
            MaybeImportSpecification_Just _importspecification_self
        ( _importspecification_self) =
            (_importspecification )
    in  ( _self)
sem_MaybeImportSpecification_Nothing :: (T_MaybeImportSpecification)
sem_MaybeImportSpecification_Nothing  =
    let (_self) =
            MaybeImportSpecification_Nothing
    in  ( _self)
-- MaybeInt ----------------------------------------------------
-- semantic domain
type T_MaybeInt = ( (MaybeInt))
-- cata
sem_MaybeInt :: (MaybeInt) ->
                (T_MaybeInt)
sem_MaybeInt ((MaybeInt_Just (_int))) =
    (sem_MaybeInt_Just (_int))
sem_MaybeInt ((MaybeInt_Nothing )) =
    (sem_MaybeInt_Nothing )
sem_MaybeInt_Just :: (Int) ->
                     (T_MaybeInt)
sem_MaybeInt_Just (_int) =
    let (_self) =
            MaybeInt_Just _int
    in  ( _self)
sem_MaybeInt_Nothing :: (T_MaybeInt)
sem_MaybeInt_Nothing  =
    let (_self) =
            MaybeInt_Nothing
    in  ( _self)
-- MaybeName ---------------------------------------------------
-- semantic domain
type T_MaybeName = ( (MaybeName))
-- cata
sem_MaybeName :: (MaybeName) ->
                 (T_MaybeName)
sem_MaybeName ((MaybeName_Just (_name))) =
    (sem_MaybeName_Just ((sem_Name (_name))))
sem_MaybeName ((MaybeName_Nothing )) =
    (sem_MaybeName_Nothing )
sem_MaybeName_Just :: (T_Name) ->
                      (T_MaybeName)
sem_MaybeName_Just (_name) =
    let (_self) =
            MaybeName_Just _name_self
        ( _name_self) =
            (_name )
    in  ( _self)
sem_MaybeName_Nothing :: (T_MaybeName)
sem_MaybeName_Nothing  =
    let (_self) =
            MaybeName_Nothing
    in  ( _self)
-- MaybeNames --------------------------------------------------
-- semantic domain
type T_MaybeNames = ( (MaybeNames))
-- cata
sem_MaybeNames :: (MaybeNames) ->
                  (T_MaybeNames)
sem_MaybeNames ((MaybeNames_Just (_names))) =
    (sem_MaybeNames_Just ((sem_Names (_names))))
sem_MaybeNames ((MaybeNames_Nothing )) =
    (sem_MaybeNames_Nothing )
sem_MaybeNames_Just :: (T_Names) ->
                       (T_MaybeNames)
sem_MaybeNames_Just (_names) =
    let (_self) =
            MaybeNames_Just _names_self
        ( _names_self) =
            (_names )
    in  ( _self)
sem_MaybeNames_Nothing :: (T_MaybeNames)
sem_MaybeNames_Nothing  =
    let (_self) =
            MaybeNames_Nothing
    in  ( _self)
-- Module ------------------------------------------------------
-- semantic domain
type T_Module = (ImportEnvironment) ->
                ([Option]) ->
                ( (IO ()),(DictionaryEnvironment),(Module),(TypeEnvironment),(TypeErrors),(Warnings))
-- cata
sem_Module :: (Module) ->
              (T_Module)
sem_Module ((Module_Module (_range) (_name) (_exports) (_body))) =
    (sem_Module_Module ((sem_Range (_range))) ((sem_MaybeName (_name))) ((sem_MaybeExports (_exports))) ((sem_Body (_body))))
sem_Module_Module :: (T_Range) ->
                     (T_MaybeName) ->
                     (T_MaybeExports) ->
                     (T_Body) ->
                     (T_Module)
sem_Module_Module (_range) (_name) (_exports) (_body) (_lhs_importEnvironment) (_lhs_options) =
    let (_self) =
            Module_Module _range_self _name_self _exports_self _body_self
        (_selectedSolver) =
            let select
                   | SolverSimple      `elem` _lhs_options = solveSimple      _orderedTypeSynonyms
                   | SolverGreedy      `elem` _lhs_options = solveGreedy      _orderedTypeSynonyms
                   | SolverCombination `elem` _lhs_options = solveCombination (_orderedTypeSynonyms, _siblings)
                   | SolverTypeGraph   `elem` _lhs_options = solveTypeGraph   (_orderedTypeSynonyms, _siblings)
                   | otherwise = \unique _ ->
                                    let options = (_flattening, _orderedTypeSynonyms, _siblings)
                                        chunkConstraints = chunkTree dependencyTypeConstraint _body_constraints
                                    in solveChunkConstraints options unique chunkConstraints
            in select
        (_selectedTreeWalk) =
            let select
                   | TreeWalkTopDown             `elem` _lhs_options = topDownTreeWalk
                   | TreeWalkBottomUp            `elem` _lhs_options = bottomUpTreeWalk
                   | TreeWalkInorderTopFirstPre  `elem` _lhs_options = inorderTopFirstPreTreeWalk
                   | TreeWalkInorderTopLastPre   `elem` _lhs_options = inorderTopLastPreTreeWalk
                   | TreeWalkInorderTopFirstPost `elem` _lhs_options = inorderTopFirstPostTreeWalk
                   | otherwise                                       = inorderTopLastPostTreeWalk
                reverseOrNot
                   | RightToLeft `elem` _lhs_options = reverseTreeWalk
                   | otherwise                       = id
            in reverseOrNot select
        (_spreadingOrNot) =
            if NoSpreading `elem` _lhs_options
              then id
              else spreadTree variableInConstraint
        (_flattening) =
            zipWith setPosition [0..] . flattenTree _selectedTreeWalk . phaseTree . _spreadingOrNot
        (_constraints) =
            _flattening _body_constraints
        (_orderedTypeSynonyms) =
            getOrderedTypeSynonyms _lhs_importEnvironment
        ((_betaUniqueAtTheEnd,_substitution,_predicates,_solveErrors,_debugIO)) =
            _selectedSolver _body_betaUnique _constraints
        (_siblings) =
            let f s = [ (s, ts) | ts <- findTpScheme (nameFromString s) ]
                findTpScheme n = catMaybes
                                    [ lookupFM (valueConstructors _lhs_importEnvironment) n
                                    , lookupFM (typeEnvironment   _lhs_importEnvironment) n
                                    ]
            in map (concatMap f) (getSiblings _lhs_importEnvironment)
        (_monomorphics) =
            ftv (  (eltsFM $ valueConstructors _lhs_importEnvironment)
                ++ (eltsFM $ typeEnvironment _lhs_importEnvironment)
                )
        (_monos) =
            map TVar _monomorphics
        (_checkedSolveErrors) =
            catMaybes (map (checkTypeError _orderedTypeSynonyms . (_substitution |->) . makeTypeError) _solveErrors)
        (_typeErrors) =
            if null _checkedSolveErrors then _body_collectErrors else _checkedSolveErrors
        (_warnings) =
            _body_collectWarnings
        (_initialScope) =
            keysFM (typeEnvironment _lhs_importEnvironment)
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope (_initialScope ++ _body_declVarNames) _body_unboundNames []
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _exports_self) =
            (_exports )
        ( _body_assumptions,_body_betaUnique,_body_collectChunkNumbers,_body_collectErrors,_body_collectWarnings,_body_constraints,_body_declVarNames,_body_dictionaryEnvironment,_body_matchIO,_body_patternMatchWarnings,_body_root,_body_self,_body_toplevelTypes,_body_unboundNames,_body_uniqueChunk) =
            (_body ([ (matchInfo, typingStrategy)
                    | typingStrategy <- typingStrategies _lhs_importEnvironment
                    , matchInfo      <- matchInformation
                                         _lhs_importEnvironment
                                         typingStrategy
                    ])
                   ([])
                   (maximum (0 : _monomorphics) + 1)
                   (_body_collectChunkNumbers)
                   (emptyFM)
                   ([])
                   ([])
                   (0)
                   (emptyDictionaryEnvironment)
                   (_lhs_importEnvironment)
                   (listToFM [ (NameWithRange name, scheme)
                             | (name, scheme) <- fmToList (typeEnvironment _lhs_importEnvironment)
                             ])
                   (return ())
                   (_monos)
                   (_namesInScope)
                   (_orderedTypeSynonyms)
                   ([])
                   (_predicates)
                   (_substitution)
                   (1))
    in  ( _debugIO >> putStrLn "Inference Strategies:" >> _body_matchIO,_body_dictionaryEnvironment,_self,_body_toplevelTypes,_typeErrors,_warnings     ++ _body_patternMatchWarnings)
-- Name --------------------------------------------------------
-- semantic domain
type T_Name = ( (Name))
-- cata
sem_Name :: (Name) ->
            (T_Name)
sem_Name ((Name_Identifier (_range) (_module) (_name))) =
    (sem_Name_Identifier ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name ((Name_Operator (_range) (_module) (_name))) =
    (sem_Name_Operator ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name ((Name_Special (_range) (_module) (_name))) =
    (sem_Name_Special ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name_Identifier :: (T_Range) ->
                       (T_Strings) ->
                       (String) ->
                       (T_Name)
sem_Name_Identifier (_range) (_module) (_name) =
    let (_self) =
            Name_Identifier _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
sem_Name_Operator :: (T_Range) ->
                     (T_Strings) ->
                     (String) ->
                     (T_Name)
sem_Name_Operator (_range) (_module) (_name) =
    let (_self) =
            Name_Operator _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
sem_Name_Special :: (T_Range) ->
                    (T_Strings) ->
                    (String) ->
                    (T_Name)
sem_Name_Special (_range) (_module) (_name) =
    let (_self) =
            Name_Special _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
-- Names -------------------------------------------------------
-- semantic domain
type T_Names = ( (Names))
-- cata
sem_Names :: (Names) ->
             (T_Names)
sem_Names (list) =
    (foldr (sem_Names_Cons) (sem_Names_Nil) ((map sem_Name list)))
sem_Names_Cons :: (T_Name) ->
                  (T_Names) ->
                  (T_Names)
sem_Names_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Names_Nil :: (T_Names)
sem_Names_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Pattern -----------------------------------------------------
-- semantic domain
type T_Pattern = (Int) ->
                 (ImportEnvironment) ->
                 (Names) ->
                 (InfoTree) ->
                 ([Warning]) ->
                 ( (Tp),(Int),(ConstraintSet),(  [PatternElement]        ),(PatternAssumptions),(InfoTree),(Names),([Warning]),(Pattern),(Names))
-- cata
sem_Pattern :: (Pattern) ->
               (T_Pattern)
sem_Pattern ((Pattern_As (_range) (_name) (_pattern))) =
    (sem_Pattern_As ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_Constructor (_range) (_name) (_patterns))) =
    (sem_Pattern_Constructor ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_InfixConstructor (_range) (_leftPattern) (_constructorOperator) (_rightPattern))) =
    (sem_Pattern_InfixConstructor ((sem_Range (_range))) ((sem_Pattern (_leftPattern))) ((sem_Name (_constructorOperator))) ((sem_Pattern (_rightPattern))))
sem_Pattern ((Pattern_Irrefutable (_range) (_pattern))) =
    (sem_Pattern_Irrefutable ((sem_Range (_range))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_List (_range) (_patterns))) =
    (sem_Pattern_List ((sem_Range (_range))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_Literal (_range) (_literal))) =
    (sem_Pattern_Literal ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Negate (_range) (_literal))) =
    (sem_Pattern_Negate ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_NegateFloat (_range) (_literal))) =
    (sem_Pattern_NegateFloat ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Parenthesized (_range) (_pattern))) =
    (sem_Pattern_Parenthesized ((sem_Range (_range))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_Record (_range) (_name) (_recordPatternBindings))) =
    (sem_Pattern_Record ((sem_Range (_range))) ((sem_Name (_name))) ((sem_RecordPatternBindings (_recordPatternBindings))))
sem_Pattern ((Pattern_Successor (_range) (_name) (_literal))) =
    (sem_Pattern_Successor ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Tuple (_range) (_patterns))) =
    (sem_Pattern_Tuple ((sem_Range (_range))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_Variable (_range) (_name))) =
    (sem_Pattern_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Pattern ((Pattern_Wildcard (_range))) =
    (sem_Pattern_Wildcard ((sem_Range (_range))))
sem_Pattern_As :: (T_Range) ->
                  (T_Name) ->
                  (T_Pattern) ->
                  (T_Pattern)
sem_Pattern_As (_range) (_name) (_pattern) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_As _range_self _name_self _pattern_self
        (_constraints) =
            _newcon .>.
            Node [ Receive _lhs_betaUnique
                 , _pattern_constraints
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (_beta .==. _pattern_beta) _cinfo ]
        (_cinfo) =
            specialConstraint "as pattern" _parentTree
               (self _localInfo, Just $ nameToSelfPat _name_self)
               []
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_pattern_infoTree]
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_pattern_self,_pattern_unboundNames) =
            (_pattern (_lhs_betaUnique + 1) (_lhs_importEnvironment) (_lhs_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
    in  ( _beta,_pattern_betaUnique,_constraints,_pattern_elements,addToFM _pattern_environment _name_self _beta,_parentTree,_name_self : _pattern_patVarNames,_pattern_patternMatchWarnings,_self,_pattern_unboundNames)
sem_Pattern_Constructor :: (T_Range) ->
                           (T_Name) ->
                           (T_Patterns) ->
                           (T_Pattern)
sem_Pattern_Constructor (_range) (_name) (_patterns) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Constructor _range_self _name_self _patterns_self
        (_constraints) =
            _conApply .>.
            Node [ listTree _conConstructor
                 , Node _patterns_constraintslist
                 ]
        (_beta) =
            TVar (_lhs_betaUnique)
        (_betaCon) =
            TVar (_lhs_betaUnique + 1)
        (_conApply) =
            [ (_betaCon .==. foldr (.->.) _beta _patterns_betas)
              (if _patterns_numberOfPatterns == 0  then _cinfoEmpty else _cinfoApply) ]
        (_conConstructor) =
            case lookupFM (valueConstructors _lhs_importEnvironment) _name_self of
               Nothing  -> []
               Just ctp -> [ (_betaCon .::. ctp) _cinfoConstructor ]
        (_cinfoConstructor) =
            resultConstraint "pattern constructor" _parentTree
               [ FolkloreConstraint, HasTrustFactor 10.0 ]
        (_cinfoApply) =
            specialConstraint "pattern application" _parentTree
               (self _localInfo, Just $ nameToSelfPat _name_self)
               [ ApplicationEdge False (map attribute _patterns_infoTrees) ]
        (_cinfoEmpty) =
            resultConstraint "pattern constructor" _parentTree
               [ HasTrustFactor 10.0 ]
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo _patterns_infoTrees
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_elementss,_patterns_environment,_patterns_infoTrees,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_patternMatchWarnings,_patterns_self,_patterns_unboundNames) =
            (_patterns (_lhs_betaUnique + 2) (_lhs_importEnvironment) (_lhs_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
    in  ( _beta,_patterns_betaUnique,_constraints,FiniteElement (getNameName _name_self) : concat _patterns_elementss,_patterns_environment,_parentTree,_patterns_patVarNames,_patterns_patternMatchWarnings,_self,_patterns_unboundNames)
sem_Pattern_InfixConstructor :: (T_Range) ->
                                (T_Pattern) ->
                                (T_Name) ->
                                (T_Pattern) ->
                                (T_Pattern)
sem_Pattern_InfixConstructor (_range) (_leftPattern) (_constructorOperator) (_rightPattern) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_InfixConstructor _range_self _leftPattern_self _constructorOperator_self _rightPattern_self
        (_constraints) =
            _conApply .>.
            Node [ listTree _conConstructor
                 , _leftPattern_constraints
                 , _rightPattern_constraints
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        (_betaCon) =
            TVar (_lhs_betaUnique + 1)
        (_conApply) =
            [ (_betaCon .==. _leftPattern_beta .->. _rightPattern_beta .->. _beta) _cinfoApply ]
        (_conConstructor) =
            case lookupFM (valueConstructors _lhs_importEnvironment) _constructorOperator_self  of
               Nothing  -> []
               Just ctp -> [ (_betaCon .::. ctp) _cinfoConstructor ]
        (_cinfoConstructor) =
            variableConstraint "pattern constructor" (nameToSelfPat _constructorOperator_self)
               [ FolkloreConstraint, HasTrustFactor 10.0 ]
        (_cinfoApply) =
            specialConstraint "infix pattern application" _parentTree
               (self _localInfo, Just $ nameToSelfPat  _constructorOperator_self)
               [ ApplicationEdge True (map attribute [_leftPattern_infoTree, _rightPattern_infoTree]) ]
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_leftPattern_infoTree, _rightPattern_infoTree]
        ( _range_self) =
            (_range )
        ( _leftPattern_beta,_leftPattern_betaUnique,_leftPattern_constraints,_leftPattern_elements,_leftPattern_environment,_leftPattern_infoTree,_leftPattern_patVarNames,_leftPattern_patternMatchWarnings,_leftPattern_self,_leftPattern_unboundNames) =
            (_leftPattern (_lhs_betaUnique + 2) (_lhs_importEnvironment) (_lhs_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
        ( _constructorOperator_self) =
            (_constructorOperator )
        ( _rightPattern_beta,_rightPattern_betaUnique,_rightPattern_constraints,_rightPattern_elements,_rightPattern_environment,_rightPattern_infoTree,_rightPattern_patVarNames,_rightPattern_patternMatchWarnings,_rightPattern_self,_rightPattern_unboundNames) =
            (_rightPattern (_leftPattern_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_parentTree) (_leftPattern_patternMatchWarnings))
    in  ( _beta,_rightPattern_betaUnique,_constraints,FiniteElement (getNameName _constructorOperator_self) : _leftPattern_elements ++ _rightPattern_elements,_leftPattern_environment `plusFM` _rightPattern_environment,_parentTree,_leftPattern_patVarNames ++ _rightPattern_patVarNames,_rightPattern_patternMatchWarnings,_self,_leftPattern_unboundNames ++ _rightPattern_unboundNames)
sem_Pattern_Irrefutable :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Pattern)
sem_Pattern_Irrefutable (_range) (_pattern) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Irrefutable _range_self _pattern_self
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_pattern_self,_pattern_unboundNames) =
            (_pattern (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings))
    in  ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_self,_pattern_unboundNames)
sem_Pattern_List :: (T_Range) ->
                    (T_Patterns) ->
                    (T_Pattern)
sem_Pattern_List (_range) (_patterns) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_List _range_self _patterns_self
        (_constraints) =
            _newcon .>.
            Node (zipWith3 _zipf _patterns_betas [0..] _patterns_constraintslist)
        (_beta) =
            TVar _lhs_betaUnique
        (_beta') =
            TVar (_lhs_betaUnique + 1)
        (_newcon) =
            [ (listType _beta' .==. _beta) _cinfoResult ]
        (_zipf) =
            \tp elemNr ctree -> [ (tp .==. _beta') (_cinfoElem elemNr) ] .<. ctree
        (_cinfoElem) =
            \elemNr ->
            childConstraint elemNr "element of pattern list" _parentTree
               [ HasTrustFactor 10.0 | length _patterns_constraintslist < 2 ]
        (_cinfoResult) =
            resultConstraint "pattern list" _parentTree
               [ FolkloreConstraint ]
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo _patterns_infoTrees
        ( _range_self) =
            (_range )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_elementss,_patterns_environment,_patterns_infoTrees,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_patternMatchWarnings,_patterns_self,_patterns_unboundNames) =
            (_patterns (_lhs_betaUnique + 2) (_lhs_importEnvironment) (_lhs_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
    in  ( _beta,_patterns_betaUnique,_constraints,listPat _patterns_elementss,_patterns_environment,_parentTree,_patterns_patVarNames,_patterns_patternMatchWarnings,_self,_patterns_unboundNames)
sem_Pattern_Literal :: (T_Range) ->
                       (T_Literal) ->
                       (T_Pattern)
sem_Pattern_Literal (_range) (_literal) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Literal _range_self _literal_self
        (_constraints) =
            unitTree ((_literal_literalType .==. _beta) _cinfo)
        (_beta) =
            TVar _lhs_betaUnique
        (_cinfo) =
            resultConstraint "literal pattern" _parentTree
               [ FolkloreConstraint, HasTrustFactor 10.0, IsLiteral _literal_self ]
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        ( _range_self) =
            (_range )
        ( _literal_elements,_literal_literalType,_literal_self) =
            (_literal )
    in  ( _beta,_lhs_betaUnique + 1,_constraints,_literal_elements,noAssumptions,_parentTree,[],_lhs_patternMatchWarnings,_self,[])
sem_Pattern_Negate :: (T_Range) ->
                      (T_Literal) ->
                      (T_Pattern)
sem_Pattern_Negate (_range) (_literal) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Negate _range_self _literal_self
        (_constraints) =
            listTree _newcon
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            let standard = generalize [] [Predicate "Num" (TVar 0)] (TVar 0 .->. TVar 0)
                tpscheme = lookupWithDefaultFM (typeEnvironment _lhs_importEnvironment) standard (nameFromString "negate")
            in [ (_literal_literalType .->. _beta .::. tpscheme) _cinfo]
        (_cinfo) =
            resultConstraint "pattern negation" _parentTree
               [ FolkloreConstraint ]
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        ( _range_self) =
            (_range )
        ( _literal_elements,_literal_literalType,_literal_self) =
            (_literal )
    in  ( _beta,_lhs_betaUnique + 1,_constraints,_literal_elements,noAssumptions,_parentTree,[],_lhs_patternMatchWarnings,_self,[])
sem_Pattern_NegateFloat :: (T_Range) ->
                           (T_Literal) ->
                           (T_Pattern)
sem_Pattern_NegateFloat (_range) (_literal) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_NegateFloat _range_self _literal_self
        (_constraints) =
            listTree _newcon
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (floatType .==. _beta) _cinfo ]
        (_cinfo) =
            resultConstraint "pattern negation" _parentTree
               [ FolkloreConstraint, NegationResult ]
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        ( _range_self) =
            (_range )
        ( _literal_elements,_literal_literalType,_literal_self) =
            (_literal )
    in  ( _beta,_lhs_betaUnique + 1,_constraints,_literal_elements,noAssumptions,_parentTree,[],_lhs_patternMatchWarnings,_self,[])
sem_Pattern_Parenthesized :: (T_Range) ->
                             (T_Pattern) ->
                             (T_Pattern)
sem_Pattern_Parenthesized (_range) (_pattern) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Parenthesized _range_self _pattern_self
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_pattern_self,_pattern_unboundNames) =
            (_pattern (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings))
    in  ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_self,_pattern_unboundNames)
sem_Pattern_Record :: (T_Range) ->
                      (T_Name) ->
                      (T_RecordPatternBindings) ->
                      (T_Pattern)
sem_Pattern_Record (_range) (_name) (_recordPatternBindings) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Record _range_self _name_self _recordPatternBindings_self
        (_infoTree) =
            globalInfoError
        ((_beta,_constraints,_environment)) =
            internalError "PartialSyntax.ag" "n/a" "Pattern.Record"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _recordPatternBindings_patternMatchWarnings,_recordPatternBindings_self,_recordPatternBindings_unboundNames) =
            (_recordPatternBindings (_lhs_namesInScope) (_lhs_patternMatchWarnings))
    in  ( _beta,_lhs_betaUnique,_constraints,pmError "Pattern_Record.elements" "Records are not supported",_environment,_infoTree,[],_recordPatternBindings_patternMatchWarnings,_self,_recordPatternBindings_unboundNames)
sem_Pattern_Successor :: (T_Range) ->
                         (T_Name) ->
                         (T_Literal) ->
                         (T_Pattern)
sem_Pattern_Successor (_range) (_name) (_literal) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Successor _range_self _name_self _literal_self
        (_infoTree) =
            globalInfoError
        ((_beta,_constraints,_environment)) =
            internalError "PartialSyntax.ag" "n/a" "Pattern.Successor"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _literal_elements,_literal_literalType,_literal_self) =
            (_literal )
    in  ( _beta,_lhs_betaUnique,_constraints,pmError "Pattern_Successor.elements" "Successors are not supported",_environment,_infoTree,[],_lhs_patternMatchWarnings,_self,[])
sem_Pattern_Tuple :: (T_Range) ->
                     (T_Patterns) ->
                     (T_Pattern)
sem_Pattern_Tuple (_range) (_patterns) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Tuple _range_self _patterns_self
        (_constraints) =
            _newcon .>. Node _patterns_constraintslist
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (tupleType _patterns_betas .==. _beta) _cinfo ]
        (_cinfo) =
            resultConstraint "pattern tuple" _parentTree
            [ FolkloreConstraint, IsTupleEdge ]
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo _patterns_infoTrees
        ( _range_self) =
            (_range )
        ( _patterns_betaUnique,_patterns_betas,_patterns_constraintslist,_patterns_elementss,_patterns_environment,_patterns_infoTrees,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_patternMatchWarnings,_patterns_self,_patterns_unboundNames) =
            (_patterns (_lhs_betaUnique + 1) (_lhs_importEnvironment) (_lhs_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
    in  ( _beta,_patterns_betaUnique,_constraints,FiniteElement ("(" ++ replicate (length $ tail _patterns_self) ',' ++ ")") : concat _patterns_elementss,_patterns_environment,_parentTree,_patterns_patVarNames,_patterns_patternMatchWarnings,_self,_patterns_unboundNames)
sem_Pattern_Variable :: (T_Range) ->
                        (T_Name) ->
                        (T_Pattern)
sem_Pattern_Variable (_range) (_name) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Variable _range_self _name_self
        (_constraints) =
            Receive _lhs_betaUnique
        (_beta) =
            TVar _lhs_betaUnique
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _beta,_lhs_betaUnique + 1,_constraints,[WildcardElement],unitFM _name_self _beta,_parentTree,[ _name_self ],_lhs_patternMatchWarnings,_self,[])
sem_Pattern_Wildcard :: (T_Range) ->
                        (T_Pattern)
sem_Pattern_Wildcard (_range) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            Pattern_Wildcard _range_self
        (_constraints) =
            emptyTree
        (_beta) =
            TVar _lhs_betaUnique
        (_localInfo) =
            LocalInfo { self = UHA_Pat _self
                      , assignedType = Just _beta
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        ( _range_self) =
            (_range )
    in  ( _beta,_lhs_betaUnique + 1,_constraints,[WildcardElement],noAssumptions,_parentTree,[],_lhs_patternMatchWarnings,_self,[])
-- Patterns ----------------------------------------------------
-- semantic domain
type T_Patterns = (Int) ->
                  (ImportEnvironment) ->
                  (Names) ->
                  (InfoTree) ->
                  ([Warning]) ->
                  ( (Int),(Tps),(ConstraintSets),([ [PatternElement]       ]),(PatternAssumptions),(InfoTrees),(Int),(Names),([Warning]),(Patterns),(Names))
-- cata
sem_Patterns :: (Patterns) ->
                (T_Patterns)
sem_Patterns (list) =
    (foldr (sem_Patterns_Cons) (sem_Patterns_Nil) ((map sem_Pattern list)))
sem_Patterns_Cons :: (T_Pattern) ->
                     (T_Patterns) ->
                     (T_Patterns)
sem_Patterns_Cons (_hd) (_tl) (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_beta,_hd_betaUnique,_hd_constraints,_hd_elements,_hd_environment,_hd_infoTree,_hd_patVarNames,_hd_patternMatchWarnings,_hd_self,_hd_unboundNames) =
            (_hd (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings))
        ( _tl_betaUnique,_tl_betas,_tl_constraintslist,_tl_elementss,_tl_environment,_tl_infoTrees,_tl_numberOfPatterns,_tl_patVarNames,_tl_patternMatchWarnings,_tl_self,_tl_unboundNames) =
            (_tl (_hd_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_hd_patternMatchWarnings))
    in  ( _tl_betaUnique,_hd_beta : _tl_betas,_hd_constraints : _tl_constraintslist,_hd_elements : _tl_elementss,_hd_environment `plusFM` _tl_environment,_hd_infoTree : _tl_infoTrees,1 + _tl_numberOfPatterns,_hd_patVarNames ++ _tl_patVarNames,_tl_patternMatchWarnings,_self,_hd_unboundNames ++ _tl_unboundNames)
sem_Patterns_Nil :: (T_Patterns)
sem_Patterns_Nil (_lhs_betaUnique) (_lhs_importEnvironment) (_lhs_namesInScope) (_lhs_parentTree) (_lhs_patternMatchWarnings) =
    let (_self) =
            []
    in  ( _lhs_betaUnique,[],[],[],noAssumptions,[],0,[],_lhs_patternMatchWarnings,_self,[])
-- Position ----------------------------------------------------
-- semantic domain
type T_Position = ( (Position))
-- cata
sem_Position :: (Position) ->
                (T_Position)
sem_Position ((Position_Position (_filename) (_line) (_column))) =
    (sem_Position_Position (_filename) (_line) (_column))
sem_Position ((Position_Unknown )) =
    (sem_Position_Unknown )
sem_Position_Position :: (String) ->
                         (Int) ->
                         (Int) ->
                         (T_Position)
sem_Position_Position (_filename) (_line) (_column) =
    let (_self) =
            Position_Position _filename _line _column
    in  ( _self)
sem_Position_Unknown :: (T_Position)
sem_Position_Unknown  =
    let (_self) =
            Position_Unknown
    in  ( _self)
-- Qualifier ---------------------------------------------------
-- semantic domain
type T_Qualifier = ([((Expression, [String]), Core_TypingStrategy)]) ->
                   (Assumptions) ->
                   (Predicates) ->
                   (Int) ->
                   (ChunkNumberMap) ->
                   (ChunkNumberMap) ->
                   (TypeErrors) ->
                   (Warnings) ->
                   (ConstraintSet) ->
                   (Int) ->
                   (DictionaryEnvironment) ->
                   (ImportEnvironment) ->
                   (FiniteMap NameWithRange TpScheme) ->
                   (IO ()) ->
                   (Tps) ->
                   (Names) ->
                   (OrderedTypeSynonyms) ->
                   (InfoTree) ->
                   ([Warning]) ->
                   (Predicates) ->
                   (FixpointSubstitution) ->
                   (Names) ->
                   (Int) ->
                   (Int) ->
                   ( (Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(InfoTree),(IO ()),(Tps),(Names),([Warning]),(Qualifier),(Names),(Int),(Int))
-- cata
sem_Qualifier :: (Qualifier) ->
                 (T_Qualifier)
sem_Qualifier ((Qualifier_Empty (_range))) =
    (sem_Qualifier_Empty ((sem_Range (_range))))
sem_Qualifier ((Qualifier_Generator (_range) (_pattern) (_expression))) =
    (sem_Qualifier_Generator ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_Expression (_expression))))
sem_Qualifier ((Qualifier_Guard (_range) (_guard))) =
    (sem_Qualifier_Guard ((sem_Range (_range))) ((sem_Expression (_guard))))
sem_Qualifier ((Qualifier_Let (_range) (_declarations))) =
    (sem_Qualifier_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))))
sem_Qualifier_Empty :: (T_Range) ->
                       (T_Qualifier)
sem_Qualifier_Empty (_range)
                    (_lhs_allPatterns)
                    (_lhs_assumptions)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_constraints)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_unboundNames)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            Qualifier_Empty _range_self
        (_localInfo) =
            LocalInfo { self = UHA_Qual _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        ( _range_self) =
            (_range )
    in  ( _lhs_assumptions,_lhs_betaUnique,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_lhs_constraints,_lhs_dictionaryEnvironment,_parentTree,_lhs_matchIO,_lhs_monos,_lhs_namesInScope,_lhs_patternMatchWarnings,_self,_lhs_unboundNames,_lhs_uniqueChunk,_lhs_uniqueSecondRound)
sem_Qualifier_Generator :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Expression) ->
                           (T_Qualifier)
sem_Qualifier_Generator (_range)
                        (_pattern)
                        (_expression)
                        (_lhs_allPatterns)
                        (_lhs_assumptions)
                        (_lhs_availablePredicates)
                        (_lhs_betaUnique)
                        (_lhs_chunkNumberMap)
                        (_lhs_collectChunkNumbers)
                        (_lhs_collectErrors)
                        (_lhs_collectWarnings)
                        (_lhs_constraints)
                        (_lhs_currentChunk)
                        (_lhs_dictionaryEnvironment)
                        (_lhs_importEnvironment)
                        (_lhs_inferredTypes)
                        (_lhs_matchIO)
                        (_lhs_monos)
                        (_lhs_namesInScope)
                        (_lhs_orderedTypeSynonyms)
                        (_lhs_parentTree)
                        (_lhs_patternMatchWarnings)
                        (_lhs_predicates)
                        (_lhs_substitution)
                        (_lhs_unboundNames)
                        (_lhs_uniqueChunk)
                        (_lhs_uniqueSecondRound) =
    let (_self) =
            Qualifier_Generator _range_self _pattern_self _expression_self
        (_locConstraints) =
            _newcon .>. _csetBinds .>>.
               Node [ _pattern_constraints
                    , _expression_constraints
                    , _lhs_constraints
                    ]
        ((_csetBinds,_assumptions')) =
            (_pattern_environment .===. _lhs_assumptions) _cinfoBind
        (_newcon) =
            [ (_expression_beta .==. listType _pattern_beta) _cinfoResult ]
        (_cinfoResult) =
            childConstraint 1 "generator" _parentTree
               []
        (_cinfoBind) =
            \name -> variableConstraint "variable" (nameToSelfExpr name)
               [FolkloreConstraint]
        (_localInfo) =
            LocalInfo { self = UHA_Qual _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_pattern_infoTree, _expression_infoTree]
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _pattern_patVarNames (_expression_unboundNames  ++ _lhs_unboundNames)  _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_pattern_self,_pattern_unboundNames) =
            (_pattern (_lhs_betaUnique) (_lhs_importEnvironment) (_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_pattern_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_pattern_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _assumptions' `combine` _expression_assumptions
         ,_expression_betaUnique
         ,_expression_collectChunkNumbers
         ,_expression_collectErrors
         ,_expression_collectWarnings
         ,_locConstraints
         ,_expression_dictionaryEnvironment
         ,_parentTree
         ,_expression_matchIO
         ,eltsFM _pattern_environment ++ getMonos _csetBinds ++ _lhs_monos
         ,_namesInScope
         ,patternMatchWarnings _lhs_importEnvironment
                               _lhs_substitution
                               _pattern_beta
                               (:[])
                               [(_pattern_elements, False)]
                               _range
                               Nothing
                               False
                               []
                               "generator"
                               "<-"
          ++ _expression_patternMatchWarnings
         ,_self
         ,_unboundNames
         ,_expression_uniqueChunk
         ,_expression_uniqueSecondRound
         )
sem_Qualifier_Guard :: (T_Range) ->
                       (T_Expression) ->
                       (T_Qualifier)
sem_Qualifier_Guard (_range)
                    (_guard)
                    (_lhs_allPatterns)
                    (_lhs_assumptions)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_constraints)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_unboundNames)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            Qualifier_Guard _range_self _guard_self
        (_locConstraints) =
            Node [ _newcon .<. _guard_constraints
                 , _lhs_constraints
                 ]
        (_newcon) =
            [ (_guard_beta .==. boolType) _cinfo ]
        (_cinfo) =
            orphanConstraint 0 "boolean qualifier" _parentTree
               []
        (_localInfo) =
            LocalInfo { self = UHA_Qual _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_guard_infoTree]
        ( _range_self) =
            (_range )
        ( _guard_assumptions,_guard_beta,_guard_betaUnique,_guard_collectChunkNumbers,_guard_collectErrors,_guard_collectWarnings,_guard_constraints,_guard_dictionaryEnvironment,_guard_infoTree,_guard_matchIO,_guard_matches,_guard_patternMatchWarnings,_guard_self,_guard_unboundNames,_guard_uniqueChunk,_guard_uniqueSecondRound) =
            (_guard (_lhs_allPatterns)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    ([])
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound))
    in  ( _lhs_assumptions `combine` _guard_assumptions,_guard_betaUnique,_guard_collectChunkNumbers,_guard_collectErrors,_guard_collectWarnings,_locConstraints,_guard_dictionaryEnvironment,_parentTree,_guard_matchIO,_lhs_monos,_lhs_namesInScope,_guard_patternMatchWarnings,_self,_guard_unboundNames ++ _lhs_unboundNames,_guard_uniqueChunk,_guard_uniqueSecondRound)
sem_Qualifier_Let :: (T_Range) ->
                     (T_Declarations) ->
                     (T_Qualifier)
sem_Qualifier_Let (_range)
                  (_declarations)
                  (_lhs_allPatterns)
                  (_lhs_assumptions)
                  (_lhs_availablePredicates)
                  (_lhs_betaUnique)
                  (_lhs_chunkNumberMap)
                  (_lhs_collectChunkNumbers)
                  (_lhs_collectErrors)
                  (_lhs_collectWarnings)
                  (_lhs_constraints)
                  (_lhs_currentChunk)
                  (_lhs_dictionaryEnvironment)
                  (_lhs_importEnvironment)
                  (_lhs_inferredTypes)
                  (_lhs_matchIO)
                  (_lhs_monos)
                  (_lhs_namesInScope)
                  (_lhs_orderedTypeSynonyms)
                  (_lhs_parentTree)
                  (_lhs_patternMatchWarnings)
                  (_lhs_predicates)
                  (_lhs_substitution)
                  (_lhs_unboundNames)
                  (_lhs_uniqueChunk)
                  (_lhs_uniqueSecondRound) =
    let (_self) =
            Qualifier_Let _range_self _declarations_self
        ((_aset,_locConstraints,_inheritedBDG,_chunkNr)) =
            performBindingGroup _lhs_currentChunk _declarations_uniqueChunk _lhs_chunkNumberMap _lhs_monos _declarations_typeSignatures _mybdggroup _declarations_bindingGroups
        (_mybdggroup) =
            Just (_lhs_assumptions, [_lhs_constraints])
        (_inferredTypes) =
            addListToFM _lhs_inferredTypes _localTypes
        (_localTypes) =
            getInferredTypes _lhs_monos _lhs_substitution _lhs_predicates _declarations_bindingGroups
        ((_errors,_warnings)) =
            checkAnnotations False _lhs_orderedTypeSynonyms _declarations_typeSignatures _localTypes
        (_localInfo) =
            LocalInfo { self = UHA_Qual _self
                      , assignedType = Nothing
                      }
        (_declInfo) =
            LocalInfo { self = UHA_Decls _declarations_self
                      , assignedType = Nothing
                      }
        (_thisTree) =
            node _lhs_parentTree _localInfo [_declTree]
        (_declTree) =
            node _thisTree _declInfo _declarations_infoTrees
        ((_collectTypeConstructors,_collectValueConstructors,_collectTypeSynonyms,_collectConstructorEnv,_derivedFunctions,_operatorFixities)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Qualifier"
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _declarations_declVarNames (_declarations_unboundNames ++ _lhs_unboundNames) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectChunkNumbers,_declarations_collectErrors,_declarations_collectWarnings,_declarations_declVarNames,_declarations_dictionaryEnvironment,_declarations_infoTrees,_declarations_matchIO,_declarations_patternMatchWarnings,_declarations_self,_declarations_typeSignatures,_declarations_unboundNames,_declarations_uniqueChunk) =
            (_declarations (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique)
                           ([])
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_inferredTypes)
                           (_inheritedBDG)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_namesInScope)
                           (_lhs_orderedTypeSynonyms)
                           (_declTree)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (emptyFM)
                           (_lhs_uniqueChunk))
    in  ( _aset,_declarations_betaUnique,_declarations_collectChunkNumbers,_errors ++ _declarations_collectErrors,_warnings ++ _declarations_collectWarnings,_locConstraints,_declarations_dictionaryEnvironment,_thisTree,_declarations_matchIO,_lhs_monos,_namesInScope,_declarations_patternMatchWarnings,_self,_unboundNames,_chunkNr,_lhs_uniqueSecondRound)
-- Qualifiers --------------------------------------------------
-- semantic domain
type T_Qualifiers = ([((Expression, [String]), Core_TypingStrategy)]) ->
                    (Assumptions) ->
                    (Predicates) ->
                    (Int) ->
                    (ChunkNumberMap) ->
                    (ChunkNumberMap) ->
                    (TypeErrors) ->
                    (Warnings) ->
                    (ConstraintSet) ->
                    (Int) ->
                    (DictionaryEnvironment) ->
                    (ImportEnvironment) ->
                    (FiniteMap NameWithRange TpScheme) ->
                    (IO ()) ->
                    (Tps) ->
                    (Names) ->
                    (OrderedTypeSynonyms) ->
                    (InfoTree) ->
                    ([Warning]) ->
                    (Predicates) ->
                    (FixpointSubstitution) ->
                    (Names) ->
                    (Int) ->
                    (Int) ->
                    ( (Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(InfoTrees),(IO ()),(Tps),(Names),([Warning]),(Qualifiers),(Names),(Int),(Int))
-- cata
sem_Qualifiers :: (Qualifiers) ->
                  (T_Qualifiers)
sem_Qualifiers (list) =
    (foldr (sem_Qualifiers_Cons) (sem_Qualifiers_Nil) ((map sem_Qualifier list)))
sem_Qualifiers_Cons :: (T_Qualifier) ->
                       (T_Qualifiers) ->
                       (T_Qualifiers)
sem_Qualifiers_Cons (_hd)
                    (_tl)
                    (_lhs_allPatterns)
                    (_lhs_assumptions)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_constraints)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_unboundNames)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_assumptions,_hd_betaUnique,_hd_collectChunkNumbers,_hd_collectErrors,_hd_collectWarnings,_hd_constraints,_hd_dictionaryEnvironment,_hd_infoTree,_hd_matchIO,_hd_monos,_hd_namesInScope,_hd_patternMatchWarnings,_hd_self,_hd_unboundNames,_hd_uniqueChunk,_hd_uniqueSecondRound) =
            (_hd (_lhs_allPatterns)
                 (_tl_assumptions)
                 (_lhs_availablePredicates)
                 (_lhs_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_lhs_collectChunkNumbers)
                 (_lhs_collectErrors)
                 (_lhs_collectWarnings)
                 (_tl_constraints)
                 (_lhs_currentChunk)
                 (_lhs_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_lhs_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_lhs_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_tl_unboundNames)
                 (_lhs_uniqueChunk)
                 (_lhs_uniqueSecondRound))
        ( _tl_assumptions,_tl_betaUnique,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_constraints,_tl_dictionaryEnvironment,_tl_infoTrees,_tl_matchIO,_tl_monos,_tl_namesInScope,_tl_patternMatchWarnings,_tl_self,_tl_unboundNames,_tl_uniqueChunk,_tl_uniqueSecondRound) =
            (_tl (_lhs_allPatterns)
                 (_lhs_assumptions)
                 (_lhs_availablePredicates)
                 (_hd_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_hd_collectChunkNumbers)
                 (_hd_collectErrors)
                 (_hd_collectWarnings)
                 (_lhs_constraints)
                 (_lhs_currentChunk)
                 (_hd_dictionaryEnvironment)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_hd_matchIO)
                 (_hd_monos)
                 (_hd_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_hd_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_lhs_unboundNames)
                 (_hd_uniqueChunk)
                 (_hd_uniqueSecondRound))
    in  ( _hd_assumptions,_tl_betaUnique,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_hd_constraints,_tl_dictionaryEnvironment,_hd_infoTree : _tl_infoTrees,_tl_matchIO,_tl_monos,_tl_namesInScope,_tl_patternMatchWarnings,_self,_hd_unboundNames,_tl_uniqueChunk,_tl_uniqueSecondRound)
sem_Qualifiers_Nil :: (T_Qualifiers)
sem_Qualifiers_Nil (_lhs_allPatterns)
                   (_lhs_assumptions)
                   (_lhs_availablePredicates)
                   (_lhs_betaUnique)
                   (_lhs_chunkNumberMap)
                   (_lhs_collectChunkNumbers)
                   (_lhs_collectErrors)
                   (_lhs_collectWarnings)
                   (_lhs_constraints)
                   (_lhs_currentChunk)
                   (_lhs_dictionaryEnvironment)
                   (_lhs_importEnvironment)
                   (_lhs_inferredTypes)
                   (_lhs_matchIO)
                   (_lhs_monos)
                   (_lhs_namesInScope)
                   (_lhs_orderedTypeSynonyms)
                   (_lhs_parentTree)
                   (_lhs_patternMatchWarnings)
                   (_lhs_predicates)
                   (_lhs_substitution)
                   (_lhs_unboundNames)
                   (_lhs_uniqueChunk)
                   (_lhs_uniqueSecondRound) =
    let (_self) =
            []
    in  ( _lhs_assumptions,_lhs_betaUnique,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_lhs_constraints,_lhs_dictionaryEnvironment,[],_lhs_matchIO,_lhs_monos,_lhs_namesInScope,_lhs_patternMatchWarnings,_self,_lhs_unboundNames,_lhs_uniqueChunk,_lhs_uniqueSecondRound)
-- Range -------------------------------------------------------
-- semantic domain
type T_Range = ( (Range))
-- cata
sem_Range :: (Range) ->
             (T_Range)
sem_Range ((Range_Range (_start) (_stop))) =
    (sem_Range_Range ((sem_Position (_start))) ((sem_Position (_stop))))
sem_Range_Range :: (T_Position) ->
                   (T_Position) ->
                   (T_Range)
sem_Range_Range (_start) (_stop) =
    let (_self) =
            Range_Range _start_self _stop_self
        ( _start_self) =
            (_start )
        ( _stop_self) =
            (_stop )
    in  ( _self)
-- RecordExpressionBinding -------------------------------------
-- semantic domain
type T_RecordExpressionBinding = (Predicates) ->
                                 (ChunkNumberMap) ->
                                 (ChunkNumberMap) ->
                                 (TypeErrors) ->
                                 (Warnings) ->
                                 (Int) ->
                                 (DictionaryEnvironment) ->
                                 (ImportEnvironment) ->
                                 (FiniteMap NameWithRange TpScheme) ->
                                 (Names) ->
                                 (OrderedTypeSynonyms) ->
                                 ([Warning]) ->
                                 (Predicates) ->
                                 (FixpointSubstitution) ->
                                 (Int) ->
                                 ( (ChunkNumberMap),(TypeErrors),(Warnings),(DictionaryEnvironment),([Warning]),(RecordExpressionBinding),(Names),(Int))
-- cata
sem_RecordExpressionBinding :: (RecordExpressionBinding) ->
                               (T_RecordExpressionBinding)
sem_RecordExpressionBinding ((RecordExpressionBinding_RecordExpressionBinding (_range) (_name) (_expression))) =
    (sem_RecordExpressionBinding_RecordExpressionBinding ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Expression (_expression))))
sem_RecordExpressionBinding_RecordExpressionBinding :: (T_Range) ->
                                                       (T_Name) ->
                                                       (T_Expression) ->
                                                       (T_RecordExpressionBinding)
sem_RecordExpressionBinding_RecordExpressionBinding (_range) (_name) (_expression) (_lhs_availablePredicates) (_lhs_chunkNumberMap) (_lhs_collectChunkNumbers) (_lhs_collectErrors) (_lhs_collectWarnings) (_lhs_currentChunk) (_lhs_dictionaryEnvironment) (_lhs_importEnvironment) (_lhs_inferredTypes) (_lhs_namesInScope) (_lhs_orderedTypeSynonyms) (_lhs_patternMatchWarnings) (_lhs_predicates) (_lhs_substitution) (_lhs_uniqueChunk) =
    let (_self) =
            RecordExpressionBinding_RecordExpressionBinding _range_self _name_self _expression_self
        (_parentTree) =
            globalInfoError
        ((_monos,_constructorenv,_betaUnique,_miscerrors,_warnings,_kindErrors,_valueConstructors,_allValueConstructors,_typeConstructors,_allTypeConstructors,_importEnvironment)) =
            internalError "PartialSyntax.ag" "n/a" "RecordExpressionBinding.RecordExpressionBinding"
        ((_allPatterns,_tryPatterns,_matchIO,_uniqueSecondRound)) =
            undefined
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_allPatterns)
                         (_lhs_availablePredicates)
                         (_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_importEnvironment)
                         (_lhs_inferredTypes)
                         (_matchIO)
                         (_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_tryPatterns)
                         (_lhs_uniqueChunk)
                         (_uniqueSecondRound))
    in  ( _expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_dictionaryEnvironment,_expression_patternMatchWarnings,_self,_expression_unboundNames,_expression_uniqueChunk)
-- RecordExpressionBindings ------------------------------------
-- semantic domain
type T_RecordExpressionBindings = (Predicates) ->
                                  (ChunkNumberMap) ->
                                  (ChunkNumberMap) ->
                                  (TypeErrors) ->
                                  (Warnings) ->
                                  (Int) ->
                                  (DictionaryEnvironment) ->
                                  (ImportEnvironment) ->
                                  (FiniteMap NameWithRange TpScheme) ->
                                  (Names) ->
                                  (OrderedTypeSynonyms) ->
                                  ([Warning]) ->
                                  (Predicates) ->
                                  (FixpointSubstitution) ->
                                  (Int) ->
                                  ( (ChunkNumberMap),(TypeErrors),(Warnings),(DictionaryEnvironment),([Warning]),(RecordExpressionBindings),(Names),(Int))
-- cata
sem_RecordExpressionBindings :: (RecordExpressionBindings) ->
                                (T_RecordExpressionBindings)
sem_RecordExpressionBindings (list) =
    (foldr (sem_RecordExpressionBindings_Cons) (sem_RecordExpressionBindings_Nil) ((map sem_RecordExpressionBinding list)))
sem_RecordExpressionBindings_Cons :: (T_RecordExpressionBinding) ->
                                     (T_RecordExpressionBindings) ->
                                     (T_RecordExpressionBindings)
sem_RecordExpressionBindings_Cons (_hd) (_tl) (_lhs_availablePredicates) (_lhs_chunkNumberMap) (_lhs_collectChunkNumbers) (_lhs_collectErrors) (_lhs_collectWarnings) (_lhs_currentChunk) (_lhs_dictionaryEnvironment) (_lhs_importEnvironment) (_lhs_inferredTypes) (_lhs_namesInScope) (_lhs_orderedTypeSynonyms) (_lhs_patternMatchWarnings) (_lhs_predicates) (_lhs_substitution) (_lhs_uniqueChunk) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectChunkNumbers,_hd_collectErrors,_hd_collectWarnings,_hd_dictionaryEnvironment,_hd_patternMatchWarnings,_hd_self,_hd_unboundNames,_hd_uniqueChunk) =
            (_hd (_lhs_availablePredicates) (_lhs_chunkNumberMap) (_lhs_collectChunkNumbers) (_lhs_collectErrors) (_lhs_collectWarnings) (_lhs_currentChunk) (_lhs_dictionaryEnvironment) (_lhs_importEnvironment) (_lhs_inferredTypes) (_lhs_namesInScope) (_lhs_orderedTypeSynonyms) (_lhs_patternMatchWarnings) (_lhs_predicates) (_lhs_substitution) (_lhs_uniqueChunk))
        ( _tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_dictionaryEnvironment,_tl_patternMatchWarnings,_tl_self,_tl_unboundNames,_tl_uniqueChunk) =
            (_tl (_lhs_availablePredicates) (_lhs_chunkNumberMap) (_hd_collectChunkNumbers) (_hd_collectErrors) (_hd_collectWarnings) (_lhs_currentChunk) (_hd_dictionaryEnvironment) (_lhs_importEnvironment) (_lhs_inferredTypes) (_lhs_namesInScope) (_lhs_orderedTypeSynonyms) (_hd_patternMatchWarnings) (_lhs_predicates) (_lhs_substitution) (_hd_uniqueChunk))
    in  ( _tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_dictionaryEnvironment,_tl_patternMatchWarnings,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_uniqueChunk)
sem_RecordExpressionBindings_Nil :: (T_RecordExpressionBindings)
sem_RecordExpressionBindings_Nil (_lhs_availablePredicates) (_lhs_chunkNumberMap) (_lhs_collectChunkNumbers) (_lhs_collectErrors) (_lhs_collectWarnings) (_lhs_currentChunk) (_lhs_dictionaryEnvironment) (_lhs_importEnvironment) (_lhs_inferredTypes) (_lhs_namesInScope) (_lhs_orderedTypeSynonyms) (_lhs_patternMatchWarnings) (_lhs_predicates) (_lhs_substitution) (_lhs_uniqueChunk) =
    let (_self) =
            []
    in  ( _lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_lhs_dictionaryEnvironment,_lhs_patternMatchWarnings,_self,[],_lhs_uniqueChunk)
-- RecordPatternBinding ----------------------------------------
-- semantic domain
type T_RecordPatternBinding = (Names) ->
                              ([Warning]) ->
                              ( ([Warning]),(RecordPatternBinding),(Names))
-- cata
sem_RecordPatternBinding :: (RecordPatternBinding) ->
                            (T_RecordPatternBinding)
sem_RecordPatternBinding ((RecordPatternBinding_RecordPatternBinding (_range) (_name) (_pattern))) =
    (sem_RecordPatternBinding_RecordPatternBinding ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Pattern (_pattern))))
sem_RecordPatternBinding_RecordPatternBinding :: (T_Range) ->
                                                 (T_Name) ->
                                                 (T_Pattern) ->
                                                 (T_RecordPatternBinding)
sem_RecordPatternBinding_RecordPatternBinding (_range) (_name) (_pattern) (_lhs_namesInScope) (_lhs_patternMatchWarnings) =
    let (_self) =
            RecordPatternBinding_RecordPatternBinding _range_self _name_self _pattern_self
        (_parentTree) =
            globalInfoError
        ((_constructorenv,_betaUnique,_miscerrors,_warnings,_valueConstructors,_allValueConstructors,_typeConstructors,_allTypeConstructors,_importEnvironment)) =
            internalError "PartialSyntax.ag" "n/a" "RecordPatternBinding.RecordPatternBinding"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_pattern_self,_pattern_unboundNames) =
            (_pattern (_betaUnique) (_importEnvironment) (_lhs_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
    in  ( _pattern_patternMatchWarnings,_self,_pattern_unboundNames)
-- RecordPatternBindings ---------------------------------------
-- semantic domain
type T_RecordPatternBindings = (Names) ->
                               ([Warning]) ->
                               ( ([Warning]),(RecordPatternBindings),(Names))
-- cata
sem_RecordPatternBindings :: (RecordPatternBindings) ->
                             (T_RecordPatternBindings)
sem_RecordPatternBindings (list) =
    (foldr (sem_RecordPatternBindings_Cons) (sem_RecordPatternBindings_Nil) ((map sem_RecordPatternBinding list)))
sem_RecordPatternBindings_Cons :: (T_RecordPatternBinding) ->
                                  (T_RecordPatternBindings) ->
                                  (T_RecordPatternBindings)
sem_RecordPatternBindings_Cons (_hd) (_tl) (_lhs_namesInScope) (_lhs_patternMatchWarnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_patternMatchWarnings,_hd_self,_hd_unboundNames) =
            (_hd (_lhs_namesInScope) (_lhs_patternMatchWarnings))
        ( _tl_patternMatchWarnings,_tl_self,_tl_unboundNames) =
            (_tl (_lhs_namesInScope) (_hd_patternMatchWarnings))
    in  ( _tl_patternMatchWarnings,_self,_hd_unboundNames ++ _tl_unboundNames)
sem_RecordPatternBindings_Nil :: (T_RecordPatternBindings)
sem_RecordPatternBindings_Nil (_lhs_namesInScope) (_lhs_patternMatchWarnings) =
    let (_self) =
            []
    in  ( _lhs_patternMatchWarnings,_self,[])
-- RightHandSide -----------------------------------------------
-- semantic domain
type T_RightHandSide = ([((Expression, [String]), Core_TypingStrategy)]) ->
                       (String) ->
                       (Predicates) ->
                       (Int) ->
                       (ChunkNumberMap) ->
                       (ChunkNumberMap) ->
                       (TypeErrors) ->
                       (Warnings) ->
                       (Int) ->
                       (DictionaryEnvironment) ->
                       (ImportEnvironment) ->
                       (FiniteMap NameWithRange TpScheme) ->
                       (IO ()) ->
                       (Tps) ->
                       (Names) ->
                       (OrderedTypeSynonyms) ->
                       (InfoTree) ->
                       ([Warning]) ->
                       (Predicates) ->
                       (FixpointSubstitution) ->
                       (Int) ->
                       ( (Assumptions),(Tp),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(Bool),(InfoTree),(IO ()),([Warning]),(RightHandSide),(Names),(Int))
-- cata
sem_RightHandSide :: (RightHandSide) ->
                     (T_RightHandSide)
sem_RightHandSide ((RightHandSide_Expression (_range) (_expression) (_where))) =
    (sem_RightHandSide_Expression ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_MaybeDeclarations (_where))))
sem_RightHandSide ((RightHandSide_Guarded (_range) (_guardedexpressions) (_where))) =
    (sem_RightHandSide_Guarded ((sem_Range (_range))) ((sem_GuardedExpressions (_guardedexpressions))) ((sem_MaybeDeclarations (_where))))
sem_RightHandSide_Expression :: (T_Range) ->
                                (T_Expression) ->
                                (T_MaybeDeclarations) ->
                                (T_RightHandSide)
sem_RightHandSide_Expression (_range)
                             (_expression)
                             (_where)
                             (_lhs_allPatterns)
                             (_lhs_assign)
                             (_lhs_availablePredicates)
                             (_lhs_betaUnique)
                             (_lhs_chunkNumberMap)
                             (_lhs_collectChunkNumbers)
                             (_lhs_collectErrors)
                             (_lhs_collectWarnings)
                             (_lhs_currentChunk)
                             (_lhs_dictionaryEnvironment)
                             (_lhs_importEnvironment)
                             (_lhs_inferredTypes)
                             (_lhs_matchIO)
                             (_lhs_monos)
                             (_lhs_namesInScope)
                             (_lhs_orderedTypeSynonyms)
                             (_lhs_parentTree)
                             (_lhs_patternMatchWarnings)
                             (_lhs_predicates)
                             (_lhs_substitution)
                             (_lhs_uniqueChunk) =
    let (_self) =
            RightHandSide_Expression _range_self _expression_self _where_self
        (_constraints) =
            _where_constraints
        (_inferredTypes) =
            addListToFM _lhs_inferredTypes _where_localTypes
        (_localInfo) =
            LocalInfo { self = UHA_RHS _self _lhs_assign
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_expression_infoTree : _where_infoTrees)
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_where_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_expression_betaUnique))
        ( _where_assumptions,_where_betaUnique,_where_collectChunkNumbers,_where_collectErrors,_where_collectWarnings,_where_constraints,_where_dictionaryEnvironment,_where_infoTrees,_where_localTypes,_where_matchIO,_where_namesInScope,_where_patternMatchWarnings,_where_self,_where_unboundNames,_where_uniqueChunk) =
            (_where (_lhs_allPatterns)
                    (_expression_assumptions)
                    (_lhs_availablePredicates)
                    (_expression_uniqueSecondRound)
                    (_lhs_chunkNumberMap)
                    (_expression_collectChunkNumbers)
                    (_expression_collectErrors)
                    (_expression_collectWarnings)
                    (_expression_constraints)
                    (_lhs_currentChunk)
                    (_expression_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_inferredTypes)
                    (_expression_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_parentTree)
                    (_expression_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_expression_unboundNames)
                    (_expression_uniqueChunk))
    in  ( _where_assumptions,_expression_beta,_where_betaUnique,_where_collectChunkNumbers,_where_collectErrors,_where_collectWarnings,_constraints,_where_dictionaryEnvironment,False,_parentTree,_where_matchIO,_where_patternMatchWarnings,_self,_where_unboundNames,_where_uniqueChunk)
sem_RightHandSide_Guarded :: (T_Range) ->
                             (T_GuardedExpressions) ->
                             (T_MaybeDeclarations) ->
                             (T_RightHandSide)
sem_RightHandSide_Guarded (_range)
                          (_guardedexpressions)
                          (_where)
                          (_lhs_allPatterns)
                          (_lhs_assign)
                          (_lhs_availablePredicates)
                          (_lhs_betaUnique)
                          (_lhs_chunkNumberMap)
                          (_lhs_collectChunkNumbers)
                          (_lhs_collectErrors)
                          (_lhs_collectWarnings)
                          (_lhs_currentChunk)
                          (_lhs_dictionaryEnvironment)
                          (_lhs_importEnvironment)
                          (_lhs_inferredTypes)
                          (_lhs_matchIO)
                          (_lhs_monos)
                          (_lhs_namesInScope)
                          (_lhs_orderedTypeSynonyms)
                          (_lhs_parentTree)
                          (_lhs_patternMatchWarnings)
                          (_lhs_predicates)
                          (_lhs_substitution)
                          (_lhs_uniqueChunk) =
    let (_self) =
            RightHandSide_Guarded _range_self _guardedexpressions_self _where_self
        (_constraints) =
            Node _guardedexpressions_constraintslist
        (_beta) =
            TVar _lhs_betaUnique
        (_inferredTypes) =
            addListToFM _lhs_inferredTypes _where_localTypes
        (_localInfo) =
            LocalInfo { self = UHA_RHS _self _lhs_assign
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo (_guardedexpressions_infoTrees ++ _where_infoTrees)
        ( _range_self) =
            (_range )
        ( _guardedexpressions_assumptions
         ,_guardedexpressions_betaUnique
         ,_guardedexpressions_betas
         ,_guardedexpressions_collectChunkNumbers
         ,_guardedexpressions_collectErrors
         ,_guardedexpressions_collectWarnings
         ,_guardedexpressions_constraintslist
         ,_guardedexpressions_dictionaryEnvironment
         ,_guardedexpressions_fallthrough
         ,_guardedexpressions_infoTrees
         ,_guardedexpressions_matchIO
         ,_guardedexpressions_patternMatchWarnings
         ,_guardedexpressions_self
         ,_guardedexpressions_unboundNames
         ,_guardedexpressions_uniqueChunk
         ,_guardedexpressions_uniqueSecondRound
         ) =
            (_guardedexpressions (_lhs_allPatterns)
                                 (_lhs_availablePredicates)
                                 (_lhs_betaUnique + 1)
                                 (_lhs_chunkNumberMap)
                                 (_lhs_collectChunkNumbers)
                                 (_lhs_collectErrors)
                                 (_lhs_collectWarnings)
                                 (_lhs_currentChunk)
                                 (_lhs_dictionaryEnvironment)
                                 (_lhs_importEnvironment)
                                 (_inferredTypes)
                                 (_lhs_matchIO)
                                 (_lhs_monos)
                                 (_where_namesInScope)
                                 (length _guardedexpressions_constraintslist)
                                 (True)
                                 (_lhs_orderedTypeSynonyms)
                                 (_parentTree)
                                 (_lhs_patternMatchWarnings)
                                 (_lhs_predicates)
                                 (_beta)
                                 (_lhs_substitution)
                                 (_lhs_uniqueChunk)
                                 (_guardedexpressions_betaUnique))
        ( _where_assumptions,_where_betaUnique,_where_collectChunkNumbers,_where_collectErrors,_where_collectWarnings,_where_constraints,_where_dictionaryEnvironment,_where_infoTrees,_where_localTypes,_where_matchIO,_where_namesInScope,_where_patternMatchWarnings,_where_self,_where_unboundNames,_where_uniqueChunk) =
            (_where (_lhs_allPatterns)
                    (_guardedexpressions_assumptions)
                    (_lhs_availablePredicates)
                    (_guardedexpressions_uniqueSecondRound)
                    (_lhs_chunkNumberMap)
                    (_guardedexpressions_collectChunkNumbers)
                    (_guardedexpressions_collectErrors)
                    (_guardedexpressions_collectWarnings)
                    (_constraints)
                    (_lhs_currentChunk)
                    (_guardedexpressions_dictionaryEnvironment)
                    (_lhs_importEnvironment)
                    (_inferredTypes)
                    (_guardedexpressions_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_parentTree)
                    (_guardedexpressions_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_guardedexpressions_unboundNames)
                    (_guardedexpressions_uniqueChunk))
    in  ( _where_assumptions
         ,_beta
         ,_where_betaUnique
         ,_where_collectChunkNumbers
         ,_where_collectErrors
         ,_where_collectWarnings
         ,_where_constraints
         ,_where_dictionaryEnvironment
         ,_guardedexpressions_fallthrough
         ,_parentTree
         ,_where_matchIO
         ,(if _guardedexpressions_fallthrough then [FallThrough _range] else [])
          ++ _where_patternMatchWarnings
         ,_self
         ,_where_unboundNames
         ,_where_uniqueChunk
         )
-- SimpleType --------------------------------------------------
-- semantic domain
type T_SimpleType = ( (SimpleType))
-- cata
sem_SimpleType :: (SimpleType) ->
                  (T_SimpleType)
sem_SimpleType ((SimpleType_SimpleType (_range) (_name) (_typevariables))) =
    (sem_SimpleType_SimpleType ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Names (_typevariables))))
sem_SimpleType_SimpleType :: (T_Range) ->
                             (T_Name) ->
                             (T_Names) ->
                             (T_SimpleType)
sem_SimpleType_SimpleType (_range) (_name) (_typevariables) =
    let (_self) =
            SimpleType_SimpleType _range_self _name_self _typevariables_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _typevariables_self) =
            (_typevariables )
    in  ( _self)
-- Statement ---------------------------------------------------
-- semantic domain
type T_Statement = ([((Expression, [String]), Core_TypingStrategy)]) ->
                   (Assumptions) ->
                   (Predicates) ->
                   (Int) ->
                   (ChunkNumberMap) ->
                   (ChunkNumberMap) ->
                   (TypeErrors) ->
                   (Warnings) ->
                   (ConstraintSet) ->
                   (Int) ->
                   (DictionaryEnvironment) ->
                   (Maybe Tp) ->
                   (ImportEnvironment) ->
                   (FiniteMap NameWithRange TpScheme) ->
                   (IO ()) ->
                   (Tps) ->
                   (Names) ->
                   (OrderedTypeSynonyms) ->
                   (InfoTree) ->
                   ([Warning]) ->
                   (Predicates) ->
                   (FixpointSubstitution) ->
                   (Names) ->
                   (Int) ->
                   (Int) ->
                   ( (Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(Maybe Tp),(InfoTree),(IO ()),(Tps),(Names),([Warning]),(Statement),(Names),(Int),(Int))
-- cata
sem_Statement :: (Statement) ->
                 (T_Statement)
sem_Statement ((Statement_Empty (_range))) =
    (sem_Statement_Empty ((sem_Range (_range))))
sem_Statement ((Statement_Expression (_range) (_expression))) =
    (sem_Statement_Expression ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Statement ((Statement_Generator (_range) (_pattern) (_expression))) =
    (sem_Statement_Generator ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_Expression (_expression))))
sem_Statement ((Statement_Let (_range) (_declarations))) =
    (sem_Statement_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))))
sem_Statement_Empty :: (T_Range) ->
                       (T_Statement)
sem_Statement_Empty (_range)
                    (_lhs_allPatterns)
                    (_lhs_assumptions)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_constraints)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_generatorBeta)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_unboundNames)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            Statement_Empty _range_self
        (_localInfo) =
            LocalInfo { self = UHA_Stat _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo []
        ( _range_self) =
            (_range )
    in  ( _lhs_assumptions,_lhs_betaUnique,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_lhs_constraints,_lhs_dictionaryEnvironment,_lhs_generatorBeta,_parentTree,_lhs_matchIO,_lhs_monos,_lhs_namesInScope,_lhs_patternMatchWarnings,_self,_lhs_unboundNames,_lhs_uniqueChunk,_lhs_uniqueSecondRound)
sem_Statement_Expression :: (T_Range) ->
                            (T_Expression) ->
                            (T_Statement)
sem_Statement_Expression (_range)
                         (_expression)
                         (_lhs_allPatterns)
                         (_lhs_assumptions)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_constraints)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_generatorBeta)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_lhs_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         (_lhs_unboundNames)
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound) =
    let (_self) =
            Statement_Expression _range_self _expression_self
        (_locConstraints) =
            Node [ _newcon .<. _expression_constraints
                 , _lhs_constraints
                 ]
        (_beta) =
            TVar _lhs_betaUnique
        (_newcon) =
            [ (_expression_beta .==. ioType _beta) _cinfo ]
        (_cinfo) =
            orphanConstraint 0 "generator" _parentTree
               []
        (_localInfo) =
            LocalInfo { self = UHA_Stat _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_expression_infoTree]
        ( _range_self) =
            (_range )
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_lhs_betaUnique + 1)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_lhs_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _lhs_assumptions `combine` _expression_assumptions,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_locConstraints,_expression_dictionaryEnvironment,Just _beta,_parentTree,_expression_matchIO,_lhs_monos,_lhs_namesInScope,_expression_patternMatchWarnings,_self,_expression_unboundNames ++ _lhs_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound)
sem_Statement_Generator :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Expression) ->
                           (T_Statement)
sem_Statement_Generator (_range)
                        (_pattern)
                        (_expression)
                        (_lhs_allPatterns)
                        (_lhs_assumptions)
                        (_lhs_availablePredicates)
                        (_lhs_betaUnique)
                        (_lhs_chunkNumberMap)
                        (_lhs_collectChunkNumbers)
                        (_lhs_collectErrors)
                        (_lhs_collectWarnings)
                        (_lhs_constraints)
                        (_lhs_currentChunk)
                        (_lhs_dictionaryEnvironment)
                        (_lhs_generatorBeta)
                        (_lhs_importEnvironment)
                        (_lhs_inferredTypes)
                        (_lhs_matchIO)
                        (_lhs_monos)
                        (_lhs_namesInScope)
                        (_lhs_orderedTypeSynonyms)
                        (_lhs_parentTree)
                        (_lhs_patternMatchWarnings)
                        (_lhs_predicates)
                        (_lhs_substitution)
                        (_lhs_unboundNames)
                        (_lhs_uniqueChunk)
                        (_lhs_uniqueSecondRound) =
    let (_self) =
            Statement_Generator _range_self _pattern_self _expression_self
        (_locConstraints) =
            _newcon .>. _csetBinds .>>.
               Node [ _pattern_constraints
                    , _expression_constraints
                    , _lhs_constraints
                    ]
        ((_csetBinds,_assumptions')) =
            (_pattern_environment .===. _lhs_assumptions) _cinfoBind
        (_newcon) =
            [ (_expression_beta .==. ioType _pattern_beta) _cinfoResult ]
        (_cinfoResult) =
            childConstraint 1 "generator" _parentTree
               []
        (_cinfoBind) =
            \name -> variableConstraint "variable" (nameToSelfExpr name)
               [FolkloreConstraint]
        (_localInfo) =
            LocalInfo { self = UHA_Stat _self
                      , assignedType = Nothing
                      }
        (_parentTree) =
            node _lhs_parentTree _localInfo [_pattern_infoTree, _expression_infoTree]
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _pattern_patVarNames (_expression_unboundNames ++ _lhs_unboundNames) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_beta,_pattern_betaUnique,_pattern_constraints,_pattern_elements,_pattern_environment,_pattern_infoTree,_pattern_patVarNames,_pattern_patternMatchWarnings,_pattern_self,_pattern_unboundNames) =
            (_pattern (_lhs_betaUnique) (_lhs_importEnvironment) (_namesInScope) (_parentTree) (_lhs_patternMatchWarnings))
        ( _expression_assumptions,_expression_beta,_expression_betaUnique,_expression_collectChunkNumbers,_expression_collectErrors,_expression_collectWarnings,_expression_constraints,_expression_dictionaryEnvironment,_expression_infoTree,_expression_matchIO,_expression_matches,_expression_patternMatchWarnings,_expression_self,_expression_unboundNames,_expression_uniqueChunk,_expression_uniqueSecondRound) =
            (_expression (_lhs_allPatterns)
                         (_lhs_availablePredicates)
                         (_pattern_betaUnique)
                         (_lhs_chunkNumberMap)
                         (_lhs_collectChunkNumbers)
                         (_lhs_collectErrors)
                         (_lhs_collectWarnings)
                         (_lhs_currentChunk)
                         (_lhs_dictionaryEnvironment)
                         (_lhs_importEnvironment)
                         (_lhs_inferredTypes)
                         (_lhs_matchIO)
                         (_lhs_monos)
                         (_lhs_namesInScope)
                         (_lhs_orderedTypeSynonyms)
                         (_parentTree)
                         (_pattern_patternMatchWarnings)
                         (_lhs_predicates)
                         (_lhs_substitution)
                         ([])
                         (_lhs_uniqueChunk)
                         (_lhs_uniqueSecondRound))
    in  ( _assumptions' `combine` _expression_assumptions
         ,_expression_betaUnique
         ,_expression_collectChunkNumbers
         ,_expression_collectErrors
         ,_expression_collectWarnings
         ,_locConstraints
         ,_expression_dictionaryEnvironment
         ,Nothing
         ,_parentTree
         ,_expression_matchIO
         ,eltsFM _pattern_environment ++ getMonos _csetBinds ++ _lhs_monos
         ,_namesInScope
         ,patternMatchWarnings _lhs_importEnvironment
                               _lhs_substitution
                               _pattern_beta
                               (:[])
                               [(_pattern_elements, False)]
                               _range
                               Nothing
                               False
                               []
                               "generator"
                               "<-"
          ++ _expression_patternMatchWarnings
         ,_self
         ,_unboundNames
         ,_expression_uniqueChunk
         ,_expression_uniqueSecondRound
         )
sem_Statement_Let :: (T_Range) ->
                     (T_Declarations) ->
                     (T_Statement)
sem_Statement_Let (_range)
                  (_declarations)
                  (_lhs_allPatterns)
                  (_lhs_assumptions)
                  (_lhs_availablePredicates)
                  (_lhs_betaUnique)
                  (_lhs_chunkNumberMap)
                  (_lhs_collectChunkNumbers)
                  (_lhs_collectErrors)
                  (_lhs_collectWarnings)
                  (_lhs_constraints)
                  (_lhs_currentChunk)
                  (_lhs_dictionaryEnvironment)
                  (_lhs_generatorBeta)
                  (_lhs_importEnvironment)
                  (_lhs_inferredTypes)
                  (_lhs_matchIO)
                  (_lhs_monos)
                  (_lhs_namesInScope)
                  (_lhs_orderedTypeSynonyms)
                  (_lhs_parentTree)
                  (_lhs_patternMatchWarnings)
                  (_lhs_predicates)
                  (_lhs_substitution)
                  (_lhs_unboundNames)
                  (_lhs_uniqueChunk)
                  (_lhs_uniqueSecondRound) =
    let (_self) =
            Statement_Let _range_self _declarations_self
        ((_aset,_locConstraints,_inheritedBDG,_chunkNr)) =
            performBindingGroup _lhs_currentChunk _declarations_uniqueChunk _lhs_chunkNumberMap _lhs_monos _declarations_typeSignatures _mybdggroup _declarations_bindingGroups
        (_mybdggroup) =
            Just (_lhs_assumptions, [_lhs_constraints])
        (_inferredTypes) =
            addListToFM _lhs_inferredTypes _localTypes
        (_localTypes) =
            getInferredTypes _lhs_monos _lhs_substitution _lhs_predicates _declarations_bindingGroups
        ((_errors,_warnings)) =
            checkAnnotations False _lhs_orderedTypeSynonyms _declarations_typeSignatures _localTypes
        (_localInfo) =
            LocalInfo { self = UHA_Stat _self
                      , assignedType = Nothing
                      }
        (_declInfo) =
            LocalInfo { self = UHA_Decls _declarations_self
                      , assignedType = Nothing
                      }
        (_thisTree) =
            node _lhs_parentTree _localInfo [_declTree]
        (_declTree) =
            node _thisTree _declInfo _declarations_infoTrees
        ((_collectTypeConstructors,_collectValueConstructors,_collectTypeSynonyms,_collectConstructorEnv,_derivedFunctions,_operatorFixities)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Statement"
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _declarations_declVarNames (_declarations_unboundNames ++ _lhs_unboundNames) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _declarations_betaUnique,_declarations_bindingGroups,_declarations_collectChunkNumbers,_declarations_collectErrors,_declarations_collectWarnings,_declarations_declVarNames,_declarations_dictionaryEnvironment,_declarations_infoTrees,_declarations_matchIO,_declarations_patternMatchWarnings,_declarations_self,_declarations_typeSignatures,_declarations_unboundNames,_declarations_uniqueChunk) =
            (_declarations (_lhs_allPatterns)
                           (_lhs_availablePredicates)
                           (_lhs_betaUnique)
                           ([])
                           (_lhs_chunkNumberMap)
                           (_lhs_collectChunkNumbers)
                           (_lhs_collectErrors)
                           (_lhs_collectWarnings)
                           (_lhs_currentChunk)
                           (_lhs_dictionaryEnvironment)
                           (_lhs_importEnvironment)
                           (_inferredTypes)
                           (_inheritedBDG)
                           (_lhs_matchIO)
                           (_lhs_monos)
                           (_namesInScope)
                           (_lhs_orderedTypeSynonyms)
                           (_declTree)
                           (_lhs_patternMatchWarnings)
                           (_lhs_predicates)
                           (_lhs_substitution)
                           (emptyFM)
                           (_lhs_uniqueChunk))
    in  ( _aset,_declarations_betaUnique,_declarations_collectChunkNumbers,_errors ++ _declarations_collectErrors,_warnings ++ _declarations_collectWarnings,_locConstraints,_declarations_dictionaryEnvironment,Nothing,_thisTree,_declarations_matchIO,_lhs_monos,_namesInScope,_declarations_patternMatchWarnings,_self,_unboundNames,_chunkNr,_lhs_uniqueSecondRound)
-- Statements --------------------------------------------------
-- semantic domain
type T_Statements = ([((Expression, [String]), Core_TypingStrategy)]) ->
                    (Assumptions) ->
                    (Predicates) ->
                    (Int) ->
                    (ChunkNumberMap) ->
                    (ChunkNumberMap) ->
                    (TypeErrors) ->
                    (Warnings) ->
                    (ConstraintSet) ->
                    (Int) ->
                    (DictionaryEnvironment) ->
                    (Maybe Tp) ->
                    (ImportEnvironment) ->
                    (FiniteMap NameWithRange TpScheme) ->
                    (IO ()) ->
                    (Tps) ->
                    (Names) ->
                    (OrderedTypeSynonyms) ->
                    (InfoTree) ->
                    ([Warning]) ->
                    (Predicates) ->
                    (FixpointSubstitution) ->
                    (Names) ->
                    (Int) ->
                    (Int) ->
                    ( (Assumptions),(Int),(ChunkNumberMap),(TypeErrors),(Warnings),(ConstraintSet),(DictionaryEnvironment),(Maybe Tp),(InfoTrees),(IO ()),(Names),([Warning]),(Statements),(Names),(Int),(Int))
-- cata
sem_Statements :: (Statements) ->
                  (T_Statements)
sem_Statements (list) =
    (foldr (sem_Statements_Cons) (sem_Statements_Nil) ((map sem_Statement list)))
sem_Statements_Cons :: (T_Statement) ->
                       (T_Statements) ->
                       (T_Statements)
sem_Statements_Cons (_hd)
                    (_tl)
                    (_lhs_allPatterns)
                    (_lhs_assumptions)
                    (_lhs_availablePredicates)
                    (_lhs_betaUnique)
                    (_lhs_chunkNumberMap)
                    (_lhs_collectChunkNumbers)
                    (_lhs_collectErrors)
                    (_lhs_collectWarnings)
                    (_lhs_constraints)
                    (_lhs_currentChunk)
                    (_lhs_dictionaryEnvironment)
                    (_lhs_generatorBeta)
                    (_lhs_importEnvironment)
                    (_lhs_inferredTypes)
                    (_lhs_matchIO)
                    (_lhs_monos)
                    (_lhs_namesInScope)
                    (_lhs_orderedTypeSynonyms)
                    (_lhs_parentTree)
                    (_lhs_patternMatchWarnings)
                    (_lhs_predicates)
                    (_lhs_substitution)
                    (_lhs_unboundNames)
                    (_lhs_uniqueChunk)
                    (_lhs_uniqueSecondRound) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_assumptions,_hd_betaUnique,_hd_collectChunkNumbers,_hd_collectErrors,_hd_collectWarnings,_hd_constraints,_hd_dictionaryEnvironment,_hd_generatorBeta,_hd_infoTree,_hd_matchIO,_hd_monos,_hd_namesInScope,_hd_patternMatchWarnings,_hd_self,_hd_unboundNames,_hd_uniqueChunk,_hd_uniqueSecondRound) =
            (_hd (_lhs_allPatterns)
                 (_tl_assumptions)
                 (_lhs_availablePredicates)
                 (_lhs_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_lhs_collectChunkNumbers)
                 (_lhs_collectErrors)
                 (_lhs_collectWarnings)
                 (_tl_constraints)
                 (_lhs_currentChunk)
                 (_lhs_dictionaryEnvironment)
                 (_lhs_generatorBeta)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_lhs_matchIO)
                 (_lhs_monos)
                 (_lhs_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_lhs_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_tl_unboundNames)
                 (_lhs_uniqueChunk)
                 (_lhs_uniqueSecondRound))
        ( _tl_assumptions,_tl_betaUnique,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_tl_constraints,_tl_dictionaryEnvironment,_tl_generatorBeta,_tl_infoTrees,_tl_matchIO,_tl_namesInScope,_tl_patternMatchWarnings,_tl_self,_tl_unboundNames,_tl_uniqueChunk,_tl_uniqueSecondRound) =
            (_tl (_lhs_allPatterns)
                 (_lhs_assumptions)
                 (_lhs_availablePredicates)
                 (_hd_betaUnique)
                 (_lhs_chunkNumberMap)
                 (_hd_collectChunkNumbers)
                 (_hd_collectErrors)
                 (_hd_collectWarnings)
                 (_lhs_constraints)
                 (_lhs_currentChunk)
                 (_hd_dictionaryEnvironment)
                 (_hd_generatorBeta)
                 (_lhs_importEnvironment)
                 (_lhs_inferredTypes)
                 (_hd_matchIO)
                 (_hd_monos)
                 (_hd_namesInScope)
                 (_lhs_orderedTypeSynonyms)
                 (_lhs_parentTree)
                 (_hd_patternMatchWarnings)
                 (_lhs_predicates)
                 (_lhs_substitution)
                 (_lhs_unboundNames)
                 (_hd_uniqueChunk)
                 (_hd_uniqueSecondRound))
    in  ( _hd_assumptions,_tl_betaUnique,_tl_collectChunkNumbers,_tl_collectErrors,_tl_collectWarnings,_hd_constraints,_tl_dictionaryEnvironment,_tl_generatorBeta,_hd_infoTree : _tl_infoTrees,_tl_matchIO,_tl_namesInScope,_tl_patternMatchWarnings,_self,_hd_unboundNames,_tl_uniqueChunk,_tl_uniqueSecondRound)
sem_Statements_Nil :: (T_Statements)
sem_Statements_Nil (_lhs_allPatterns)
                   (_lhs_assumptions)
                   (_lhs_availablePredicates)
                   (_lhs_betaUnique)
                   (_lhs_chunkNumberMap)
                   (_lhs_collectChunkNumbers)
                   (_lhs_collectErrors)
                   (_lhs_collectWarnings)
                   (_lhs_constraints)
                   (_lhs_currentChunk)
                   (_lhs_dictionaryEnvironment)
                   (_lhs_generatorBeta)
                   (_lhs_importEnvironment)
                   (_lhs_inferredTypes)
                   (_lhs_matchIO)
                   (_lhs_monos)
                   (_lhs_namesInScope)
                   (_lhs_orderedTypeSynonyms)
                   (_lhs_parentTree)
                   (_lhs_patternMatchWarnings)
                   (_lhs_predicates)
                   (_lhs_substitution)
                   (_lhs_unboundNames)
                   (_lhs_uniqueChunk)
                   (_lhs_uniqueSecondRound) =
    let (_self) =
            []
    in  ( _lhs_assumptions,_lhs_betaUnique,_lhs_collectChunkNumbers,_lhs_collectErrors,_lhs_collectWarnings,_lhs_constraints,_lhs_dictionaryEnvironment,_lhs_generatorBeta,[],_lhs_matchIO,_lhs_namesInScope,_lhs_patternMatchWarnings,_self,_lhs_unboundNames,_lhs_uniqueChunk,_lhs_uniqueSecondRound)
-- Strings -----------------------------------------------------
-- semantic domain
type T_Strings = ( (Strings))
-- cata
sem_Strings :: (Strings) ->
               (T_Strings)
sem_Strings (list) =
    (foldr (sem_Strings_Cons) (sem_Strings_Nil) (list))
sem_Strings_Cons :: (String) ->
                    (T_Strings) ->
                    (T_Strings)
sem_Strings_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd _tl_self
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Strings_Nil :: (T_Strings)
sem_Strings_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Type --------------------------------------------------------
-- semantic domain
type T_Type = ( (Type))
-- cata
sem_Type :: (Type) ->
            (T_Type)
sem_Type ((Type_Application (_range) (_prefix) (_function) (_arguments))) =
    (sem_Type_Application ((sem_Range (_range))) (_prefix) ((sem_Type (_function))) ((sem_Types (_arguments))))
sem_Type ((Type_Constructor (_range) (_name))) =
    (sem_Type_Constructor ((sem_Range (_range))) ((sem_Name (_name))))
sem_Type ((Type_Exists (_range) (_typevariables) (_type))) =
    (sem_Type_Exists ((sem_Range (_range))) ((sem_Names (_typevariables))) ((sem_Type (_type))))
sem_Type ((Type_Forall (_range) (_typevariables) (_type))) =
    (sem_Type_Forall ((sem_Range (_range))) ((sem_Names (_typevariables))) ((sem_Type (_type))))
sem_Type ((Type_Parenthesized (_range) (_type))) =
    (sem_Type_Parenthesized ((sem_Range (_range))) ((sem_Type (_type))))
sem_Type ((Type_Qualified (_range) (_context) (_type))) =
    (sem_Type_Qualified ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_Type (_type))))
sem_Type ((Type_Variable (_range) (_name))) =
    (sem_Type_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Type_Application :: (T_Range) ->
                        (Bool) ->
                        (T_Type) ->
                        (T_Types) ->
                        (T_Type)
sem_Type_Application (_range) (_prefix) (_function) (_arguments) =
    let (_self) =
            Type_Application _range_self _prefix _function_self _arguments_self
        ( _range_self) =
            (_range )
        ( _function_self) =
            (_function )
        ( _arguments_self) =
            (_arguments )
    in  ( _self)
sem_Type_Constructor :: (T_Range) ->
                        (T_Name) ->
                        (T_Type)
sem_Type_Constructor (_range) (_name) =
    let (_self) =
            Type_Constructor _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Type_Exists :: (T_Range) ->
                   (T_Names) ->
                   (T_Type) ->
                   (T_Type)
sem_Type_Exists (_range) (_typevariables) (_type) =
    let (_self) =
            Type_Exists _range_self _typevariables_self _type_self
        ( _range_self) =
            (_range )
        ( _typevariables_self) =
            (_typevariables )
        ( _type_self) =
            (_type )
    in  ( _self)
sem_Type_Forall :: (T_Range) ->
                   (T_Names) ->
                   (T_Type) ->
                   (T_Type)
sem_Type_Forall (_range) (_typevariables) (_type) =
    let (_self) =
            Type_Forall _range_self _typevariables_self _type_self
        ( _range_self) =
            (_range )
        ( _typevariables_self) =
            (_typevariables )
        ( _type_self) =
            (_type )
    in  ( _self)
sem_Type_Parenthesized :: (T_Range) ->
                          (T_Type) ->
                          (T_Type)
sem_Type_Parenthesized (_range) (_type) =
    let (_self) =
            Type_Parenthesized _range_self _type_self
        ( _range_self) =
            (_range )
        ( _type_self) =
            (_type )
    in  ( _self)
sem_Type_Qualified :: (T_Range) ->
                      (T_ContextItems) ->
                      (T_Type) ->
                      (T_Type)
sem_Type_Qualified (_range) (_context) (_type) =
    let (_self) =
            Type_Qualified _range_self _context_self _type_self
        ( _range_self) =
            (_range )
        ( _context_self) =
            (_context )
        ( _type_self) =
            (_type )
    in  ( _self)
sem_Type_Variable :: (T_Range) ->
                     (T_Name) ->
                     (T_Type)
sem_Type_Variable (_range) (_name) =
    let (_self) =
            Type_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
-- Types -------------------------------------------------------
-- semantic domain
type T_Types = ( (Types))
-- cata
sem_Types :: (Types) ->
             (T_Types)
sem_Types (list) =
    (foldr (sem_Types_Cons) (sem_Types_Nil) ((map sem_Type list)))
sem_Types_Cons :: (T_Type) ->
                  (T_Types) ->
                  (T_Types)
sem_Types_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Types_Nil :: (T_Types)
sem_Types_Nil  =
    let (_self) =
            []
    in  ( _self)

