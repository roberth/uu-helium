-------------------------------------------------------------------------------
-- Attributes for type inferencing

ATTR Module
   [ importEnvironment     : ImportEnvironment
     options               : {[Option]}
   |
   | debugIO               : {IO ()}
     localTypes            : {FiniteMap NameWithRange TpScheme}
     toplevelTypes         : TypeEnvironment
     typeErrors            : TypeErrors
     warnings              : Warnings
   ]

-------------------------------------------------------------------------------
-- Includes

INCLUDE "TypeInferenceRules.ag"
INCLUDE "TypeInferenceOverloading.ag"
INCLUDE "TypeInferenceCollect.ag"
INCLUDE "TypeInferenceInfo.ag"
INCLUDE "../staticchecks/HeliumPartialSyntax.ag"
INCLUDE "../staticchecks/Scope.ag"  
INCLUDE "../../syntax/UHA_OneLine.ag"
INCLUDE "../../syntax/UHA_Syntax.ag"

--- Type Inference Directives (may be turned off)
INCLUDE "typingstrategies/TS_PatternMatching.ag"
SEM Module | Module   lhs . debugIO = @debugIO >> putStrLn "Inference Strategies:" >> @body.matchIO

-- Pattern Match Warnings (may be turned off)
INCLUDE "PatternMatchWarnings.ag"
SEM Module | Module lhs . warnings = @loc.warnings ++ @body.patternMatchWarnings
  
-------------------------------------------------------------------------------
-- Imports

imports {

-- types
import Types
import TypeConversion

-- constraints and constraint trees
import TypeConstraints
import LiftedConstraints
import TreeWalk
import Tree

-- error messages and warnings
import Messages
import TypeErrors
import Warnings
import ConstraintInfo
import TypeGraphConstraintInfo
import HeliumConstraintInfo

-- constraint solvers
import SolveTypeGraph            (solveTypeGraph)
import SolveGreedy               (solveGreedy)
import SolveSimple               (solveSimple)
import SolveCombination          (solveCombination)
import SolveChunks               (solveChunkConstraints)
import TypeConstraintSemantics
import TypeGraphInstance

-- UHA syntax
import UHA_Syntax
import UHA_Range                 (noRange, getNameRange, getExprRange, getPatRange, getLitRange, setNameRange)
import UHA_Utils                 (showNameAsOperator, intUnaryMinusName, NameWithRange(..), nameFromString)
         
-- other
import SimilarFunctionTable      (similarFunctionTable)
import Utils                     (internalError)
import DerivingShow              (typeOfShowFunction, nameOfShowFunction) 
import TopSort                   (topSort)
import ImportEnvironment
import DictionaryEnvironment
import Args

-- standard
import Data.FiniteMap
import Maybe 
import List                   

}