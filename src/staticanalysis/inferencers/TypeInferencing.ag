-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- Type inferencing.
--
-----------------------------------------------------------------------------

{
typeInferencing :: [Option] -> ImportEnvironment -> Module
                      -> (IO (), DictionaryEnvironment, String -> String -> IO (), TypeEnvironment, TypeErrors, Warnings)
typeInferencing options importEnv module_ =
   let (_, debugIO, dictionaryEnv, _, inspectorIO, _, toplevelTypes, typeErrors, warnings) =
            TypeInferencing.sem_Module module_ importEnv options
   in (debugIO, dictionaryEnv, inspectorIO, toplevelTypes, typeErrors, warnings)

proximaTypeInferencing :: [Option] -> ImportEnvironment -> Module
                      -> (TypeErrors, Warnings, TypeEnvironment, [(Range, TpScheme)])  
proximaTypeInferencing options importEnv module_ =
   let (_, _, _, infoTree, _, _, toplevelTypes, typeErrors, warnings) =
            TypeInferencing.sem_Module module_ importEnv options
   in (typeErrors, warnings, toplevelTypes, typeSchemesInInfoTree [] infoTree)
}

-------------------------------------------------------------------------------
-- Attributes for type inferencing

ATTR Module
   [ importEnvironment     : ImportEnvironment
     options               : {[Option]}
   |
   | assumptions           : Assumptions
     debugIO               : {IO ()}
     dictionaryEnvironment : DictionaryEnvironment
     infoTree              : InfoTree
     inspectorIO           : {String -> String -> IO ()}
     toplevelTypes         : TypeEnvironment
     typeErrors            : TypeErrors
     warnings              : Warnings
   ]

-------------------------------------------------------------------------------
-- Includes

INCLUDE "TypeInferenceRules.ag"
INCLUDE "TypeInferenceOverloading.ag"
INCLUDE "TypeInferenceCollect.ag"
INCLUDE "TypeInferenceInfo.ag"
INCLUDE "LocalInfo.ag"
INCLUDE "GlobalInfo.ag"
INCLUDE "../staticchecks/HeliumPartialSyntax.ag"
INCLUDE "../staticchecks/Scope.ag"  
INCLUDE "../../syntax/UHA_Syntax.ag"

--- Type Inference Directives (may be turned off)
INCLUDE "../directives/TS_PatternMatching.ag"
SEM Module | Module   lhs . inspectorIO = writeDebugInfoTree @substitution @typeschemeMap @typeErrors @body.constraints @body.infoTree
                          . debugIO     = @debugIO >> putStrLn "Inference Strategies:" >> @body.matchIO

-- Pattern Match Warnings (may be turned off)
INCLUDE "PatternMatchWarnings.ag"
SEM Module | Module lhs . warnings = @loc.warnings ++ @body.patternMatchWarnings
  
-------------------------------------------------------------------------------
-- Imports

imports {

-- types
import Top.Types
import TypeConversion

-- error messages and warnings
import Messages
import TypeErrors
import Warnings
import ConstraintInfo
import DoublyLinkedTree
import UHA_Source

-- constraints and constraint trees
import TypeConstraints
import Top.ComposedSolvers.Tree

-- constraint solving
import SelectConstraintSolver (selectConstraintSolver)
import Top.Solvers.SolveConstraints (SolveResult(..))
import HeuristicsInfo (makeUnifier, skip_UHA_FB_RHS)
import BindingGroupAnalysis

-- UHA syntax
import UHA_Syntax
import UHA_Range                 
import UHA_Utils                 (showNameAsOperator, intUnaryMinusName, NameWithRange(..), nameFromString)
         
-- other
import Utils                     (internalError)
import DerivingShow              (typeOfShowFunction, nameOfShowFunction)
import TypeDebugInfoWriter       (writeDebugInfoTree)
import ImportEnvironment  hiding (setTypeSynonyms)
import DictionaryEnvironment
import Args

-- standard
import Data.FiniteMap
import Data.Maybe 
import Data.List
}