-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- Type inferencing.
--
-----------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Attributes for type inferencing

ATTR Module
   [ importEnvironment     : ImportEnvironment
     options               : {[Option]}
   |
   | debugIO               : {IO ()}
     dictionaryEnvironment : DictionaryEnvironment
     toplevelTypes         : TypeEnvironment
     typeErrors            : TypeErrors
     warnings              : Warnings
   ]

-------------------------------------------------------------------------------
-- Includes

INCLUDE "TypeInferenceRules.ag"
INCLUDE "TypeInferenceOverloading.ag"
INCLUDE "TypeInferenceCollect.ag"
INCLUDE "TypeInferenceInfo.ag"
INCLUDE "LocalInfo.ag"
INCLUDE "GlobalInfo.ag"
INCLUDE "../staticchecks/HeliumPartialSyntax.ag"
INCLUDE "../staticchecks/Scope.ag"  
INCLUDE "../../syntax/UHA_Syntax.ag"

--- Type Inference Directives (may be turned off)
INCLUDE "../directives/TS_PatternMatching.ag"
SEM Module | Module   lhs . debugIO = @debugIO
                                      >> putStrLn "Inference Strategies:" 
                                      >> @body.matchIO
                                      -- browseInfoTree @substitution @body.root

-- Pattern Match Warnings (may be turned off)
INCLUDE "PatternMatchWarnings.ag"
SEM Module | Module lhs . warnings = @loc.warnings ++ @body.patternMatchWarnings
  
-------------------------------------------------------------------------------
-- Imports

imports {

-- types
import Top.Types
import TypeConversion

-- constraints and constraint trees
import TypeConstraints
import Top.ComposedSolvers.TreeWalk
import Top.ComposedSolvers.Tree

-- error messages and warnings
import Messages
import TypeErrors
import Warnings
import ConstraintInfo
import DoublyLinkedTree
import UHA_Source

-- constraint solvers
import Top.Constraints.Constraints
import Top.Solvers.SimpleSolver (solveSimple)
import Top.Solvers.GreedySolver (solveGreedy)
import Top.TypeGraph.TypeGraphSolver (solveTypeGraphPlusDoAtEnd)
import Top.Solvers.SolveConstraints
import Top.ComposedSolvers.CombinationSolver ((|>>|))
import Top.ComposedSolvers.ChunkySolver
import Top.States.TIState
import Top.TypeGraph.TypeGraphMonad (setHeuristics)
import Top.TypeGraph.Heuristics (HComponent(..), Heuristic(..) )
import Top.TypeGraph.DefaultHeuristics

-- specialized type graph heuristics
import HeuristicsInfo
import RepairHeuristics
import TieBreakerHeuristics
import OnlyResultHeuristics
import UnifierHeuristics     (unifierVertex)
import ContributingSites     (contributingSites)
import Top.States.BasicState (updateErrors)

-- UHA syntax
import UHA_Syntax
import UHA_Range                 
import UHA_Utils                 (showNameAsOperator, intUnaryMinusName, NameWithRange(..), nameFromString)
         
-- other
import Utils                     (internalError)
import DerivingShow              (typeOfShowFunction, nameOfShowFunction) 
import TopSort                   (topSort)
import ImportEnvironment  hiding (setTypeSynonyms)
import DictionaryEnvironment
import Args

-- standard
import Data.FiniteMap
import Maybe 
import List
}