-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- Distributition of 
--   * import environment
--   * substitution   (result of solving the type constraints)
--   * inferred types
--   * ordered type synonyms
--
-----------------------------------------------------------------------------

ATTR Expression Expressions MaybeExpression Alternative Alternatives
     Statement Statements Declaration Declarations MaybeDeclarations 
     RightHandSide Body Qualifier Qualifiers   
     GuardedExpression GuardedExpressions  FunctionBinding FunctionBindings          
     RecordExpressionBinding RecordExpressionBindings      
        [ importEnvironment   : ImportEnvironment 
          substitution        : FixpointSubstitution
          typeschemeMap       : {FiniteMap Int (Scheme Predicates)}
          allTypeSchemes      : {FiniteMap NameWithRange TpScheme}
          orderedTypeSynonyms : OrderedTypeSynonyms
        | collectWarnings     : Warnings
        | 
        ]

ATTR LeftHandSide Pattern Patterns [ importEnvironment : ImportEnvironment | | ]

----------------------------------------------------------------------------------------
-- Collecting missing type signature warnings

SEM Module
  | Module  body . collectWarnings = []

SEM Body
  | Body   loc . inferredTypes      = findInferredTypes @lhs.typeschemeMap @implicitsFM
               . warnings           = missingTypeSignature True @inferredTypes
           lhs . collectWarnings    = @warnings ++ @declarations.collectWarnings

SEM MaybeDeclarations
  | Just   loc . inferredTypes      = findInferredTypes @lhs.typeschemeMap @implicitsFM
               . warnings           = missingTypeSignature False @inferredTypes
           lhs . collectWarnings    = @warnings ++ @declarations.collectWarnings 

SEM Expression
  | Let    loc . inferredTypes      = findInferredTypes @lhs.typeschemeMap @implicitsFM
               . warnings           = missingTypeSignature False @inferredTypes
           lhs . collectWarnings    = @warnings ++ @expression.collectWarnings
                                     
SEM Statement                  
  | Let    loc . inferredTypes      = findInferredTypes @lhs.typeschemeMap @implicitsFM
               . warnings           = missingTypeSignature False @inferredTypes
           lhs . collectWarnings    = @warnings ++ @declarations.collectWarnings

SEM Qualifier                    
  | Let    loc . inferredTypes      = findInferredTypes @lhs.typeschemeMap @implicitsFM
               . warnings           = missingTypeSignature False @inferredTypes
           lhs . collectWarnings    = @warnings ++ @declarations.collectWarnings

{
findInferredTypes :: FiniteMap Int (Scheme Predicates) -> FiniteMap Name (Sigma Predicates) -> TypeEnvironment
findInferredTypes typeschemeMap =
   let err = internalError "TypeInferenceCollect.ag" "findInferredTypes" "could not find type scheme variable"
       f :: a -> Sigma Predicates -> TpScheme
       f _ (SigmaVar i)     = lookupWithDefaultFM typeschemeMap err i
       f _ (SigmaScheme ts) = ts
   in mapFM f
   
missingTypeSignature :: Bool -> TypeEnvironment -> Warnings
missingTypeSignature topLevel = 
   let -- for the moment, only missing type signature for top-level functions are reported (unless monomorphic).
      makeWarning (name, scheme)
         | null (ftv scheme) && topLevel = [ NoTypeDef name scheme topLevel ]
         | otherwise                     = []
   in concatMap makeWarning . fmToList
}

----------------------------------------------------------------------------------------
-- Collecting inferred top level types

ATTR Body [ |  | toplevelTypes : TypeEnvironment ]   
  
SEM Body
  | Body   lhs . toplevelTypes = @declarations.typeSignatures `plusFM` @inferredTypes
 
---------------------------------------------------------
-- Collecting all the type schemes that are in scope

{- bug fix 10 september 2003: the inferred types for where-declarations are also "visible" in the expression of the 
   right-hand side. Therefore, MaybeDeclarations should return a (synthesized) list of localTypes, and then 
   RightHandSide should distribute it down -}

ATTR MaybeDeclarations [ | | localTypes : {FiniteMap NameWithRange TpScheme} ]

SEM Module 
  | Module  body . allTypeSchemes = listToFM [ (NameWithRange name, scheme) | (name, scheme) <- fmToList (typeEnvironment @lhs.importEnvironment) ]

SEM Body
  | Body   loc . allTypeSchemes = @localTypes `plusFM` @lhs.allTypeSchemes
               . localTypes     = makeLocalTypeEnv (@declarations.typeSignatures `plusFM` @inferredTypes) @declarations.bindingGroups

SEM MaybeDeclarations
  | Just     lhs . localTypes  = makeLocalTypeEnv (@declarations.typeSignatures `plusFM` @inferredTypes) @declarations.bindingGroups
  | Nothing  lhs . localTypes  = emptyFM

SEM RightHandSide
  | Expression  loc . allTypeSchemes = @where.localTypes `plusFM` @lhs.allTypeSchemes 
  | Guarded     loc . allTypeSchemes = @where.localTypes `plusFM` @lhs.allTypeSchemes 

SEM Expression                    
  | Let    loc . allTypeSchemes = @localTypes `plusFM` @lhs.allTypeSchemes
               . localTypes     = makeLocalTypeEnv (@declarations.typeSignatures `plusFM` @inferredTypes) @declarations.bindingGroups
                                     
SEM Statement                  
  | Let    loc . allTypeSchemes = @localTypes `plusFM` @lhs.allTypeSchemes
               . localTypes     = makeLocalTypeEnv (@declarations.typeSignatures `plusFM` @inferredTypes) @declarations.bindingGroups

SEM Qualifier                    
  | Let    loc . allTypeSchemes = @localTypes `plusFM` @lhs.allTypeSchemes
               . localTypes     = makeLocalTypeEnv (@declarations.typeSignatures `plusFM` @inferredTypes) @declarations.bindingGroups

{
makeLocalTypeEnv :: TypeEnvironment -> BindingGroups -> FiniteMap NameWithRange TpScheme
makeLocalTypeEnv local groups =
   let (environment, _, _) = concatBindingGroups groups
       names = keysFM environment
       f x   = maybe err id (find (==x) names) 
       err   = internalError "TypeInferenceCollect.ag" "makeLocalTypeEnv" "could not find name"
   in listToFM [ (NameWithRange (f name), scheme) | (name, scheme) <- fmToList local ]
}

-------------------------------------------
-- Collecting Type Signatures

ATTR Declaration Declarations [ | typeSignatures:TypeEnvironment | ]

SEM Body              | Body    declarations . typeSignatures = emptyFM
SEM Expression        | Let     declarations . typeSignatures = emptyFM
SEM Statement         | Let     declarations . typeSignatures = emptyFM
SEM Qualifier         | Let     declarations . typeSignatures = emptyFM
SEM MaybeDeclarations | Just    declarations . typeSignatures = emptyFM

SEM Declaration
  | TypeSignature
      lhs . typeSignatures = addListToFM @lhs.typeSignatures [ (name, @typeScheme) | name <- @names.self ]
      loc . typeScheme     = makeTpSchemeFromType @type.self
           
--------------------------------
-- Chunks

ATTR Expression Expressions MaybeExpression
     Statement Statements Qualifier Qualifiers  Alternative Alternatives
     Declaration Declarations MaybeDeclarations Body
     RightHandSide GuardedExpression GuardedExpressions
     FunctionBinding FunctionBindings  
     RecordExpressionBinding RecordExpressionBindings        
        [ currentChunk:Int | uniqueChunk:Int | ]        

SEM Module
  | Module   body . currentChunk        = 0
                  . uniqueChunk         = 1

SEM Body              | Body   lhs . uniqueChunk = @chunkNr -- from binding groups                                   
SEM MaybeDeclarations | Just   lhs . uniqueChunk = @chunkNr  
SEM Expression        | Let    lhs . uniqueChunk = @chunkNr  
SEM Statement         | Let    lhs . uniqueChunk = @chunkNr  
SEM Qualifier         | Let    lhs . uniqueChunk = @chunkNr

SEM Declaration 
  | FunctionBindings   bindings      . currentChunk = findCurrentChunk @bindings.name @lhs.inheritedBDG -- from binding groups
  | PatternBinding     righthandside . currentChunk = findCurrentChunk (head (keysFM @pattern.environment)) @lhs.inheritedBDG
