-- do not edit; automatically generated by UU.AG
module StaticChecks where

import Similarity ( similar )
import Args
import UHA_Syntax
import UHA_Utils
import UHA_Range
import Types
import StaticErrors
import Warnings
import Messages
import TopSort
import List
import Utils ( internalError, fst3, minInt, maxInt )
import TypeConversion
import DerivingShow
import LiftedConstraints
import Data.FiniteMap
import ImportEnvironment
import OperatorTable
import Char ( isUpper )

-- filter undefined errors that are caused by the removal of a duplicate definition
filterRemovedNames :: [(Name,Entity)] -> Error -> Bool
filterRemovedNames list err = 
   case err of  
      Undefined entity name _ _ -> (name,entity) `notElem` list
      _                         -> True
      
filterDerivedNames :: [Range] -> Error -> Bool
filterDerivedNames ranges err = 
   case err of
      Duplicated Definition names -> any (`notElem` ranges) (map getNameRange names) 
      _                           -> True

uniqueKeys :: Ord key => [(key,a)] -> ([(key,a)],[[key]])
uniqueKeys = let comp (x,_) (y,_) = compare x y
                 eq   (x,_) (y,_) = x == y
                 predicate xs = length xs == 1 
             in (\(xs, ys) -> (map head xs, map (map fst) ys)) 
              . partition predicate 
              . groupBy eq 
              . sortBy comp
                  
type ScopeInfo = ( [Names]          -- duplicated variables
                 , [Name]           -- unused variables
                 , [(Name, Name)]   -- shadowed variables
                 )

changeOfScope :: Names -> Names -> Names -> (Names, Names, ScopeInfo)
changeOfScope names unboundNames namesInScope = 
   let (uniqueNames, duplicatedNames) = uniqueAppearance names
       unusedNames   = uniqueNames \\ unboundNames
       shadowedNames = let f n = [ (n, n') | n' <- namesInScope, n == n' ]
                       in concatMap f uniqueNames
   in ( uniqueNames ++ map head duplicatedNames ++ (namesInScope \\ names)
      , unboundNames \\ names
      , (duplicatedNames, unusedNames, shadowedNames)
      )
      
uniqueAppearance :: Ord a => [a] -> ([a],[[a]])
uniqueAppearance = foldr insert ([],[]) . group . sort
   where insert [x] (as,bs) = (x:as,bs)
         insert xs  (as,bs) = (as,xs:bs)

checkType :: FiniteMap Name Int -> Names -> Type -> [Error]
checkType typeConstructors namesInScope t =
    let (f, xs) = walkSpine t
        xsErrors = concatMap (checkType typeConstructors namesInScope) xs
    in
        xsErrors
        ++
        case f of
            Type_Constructor _ c ->
                checkKind c typeConstructors (length xs) namesInScope
            Type_Variable _ v ->
                if length xs /= 0 then
                    [ TypeVarApplication v ]
                else
                    []
            _ ->
                internalError "StaticAnalysis" "checkType" "unexpected type"

walkSpine :: Type -> (Type, [Type])
walkSpine t =
    case t of
        Type_Variable _ _ -> (t, [])
        Type_Constructor _ _ -> (t, [])
        Type_Application _ _ f xs ->
            let (t, ys) = walkSpine f
            in (t, ys ++ xs)
        Type_Parenthesized _ t -> walkSpine t
        Type_Qualified _ _ t -> walkSpine t
        _ -> internalError "StaticAnalysis" "walkSpine" "unexpected type"

checkKind :: Name -> FiniteMap Name Int -> Int -> Names -> [Error]
checkKind tycon@(Name_Special _ _ ('(':commas)) _ useArity namesInScope =
    if expected == useArity then
        []
    else
        [ ArityMismatch TypeConstructor tycon expected useArity]
    where
        expected =
            case length (takeWhile (== ',') commas) of
                 0 -> 0  -- ()
                 n -> n + 1 -- (,) (,,) ...

checkKind tycon typeConstructors useArity namesInScope =
    case lookupFM typeConstructors tycon of
        Nothing ->
            let hint = [ "Constructor "++show (show tycon)++" cannot be used in a type"
                       | tycon `elem` namesInScope
                       ]
            in [ Undefined TypeConstructor tycon (keysFM typeConstructors) hint ]
        Just defArity ->
            if useArity /= defArity then
                [ ArityMismatch TypeConstructor tycon defArity useArity ]
            else
                [ ]

findSimilarFunctionBindings :: [(Name, TpScheme)] -> [(Name,Name)] -> [Warning]
findSimilarFunctionBindings environment candidates = 
   let namesWithTypeDef = map fst environment
   in [ uncurry SimilarFunctionBindings pair
      | (n1,n2) <- candidates
      , let bool1 = n1 `elem` namesWithTypeDef
            bool2 = n2 `elem` namesWithTypeDef
            pair  = if bool1 then (n2,n1) else (n1,n2)
      , bool1 `xor` bool2
      ]

xor :: Bool -> Bool -> Bool
xor b1 b2 = not (b1 == b2)

mode :: Ord a => [a] -> Maybe a -- Just ... IF any of the elements is more common
mode xs = 
    case filter ((== maxFreq) . snd) fs of
        [(x, _)] -> Just x
        _ -> Nothing        
  where
    maxFreq = maximum (map snd fs)
    fs = frequencies xs

frequencies :: Ord a => [a] -> [(a, Int)]
frequencies = map (\ys -> (head ys, length ys)) . group . sort

patternConstructorErrors :: Maybe TpScheme -> Name -> Names -> Int -> Bool -> Names -> [Error]
patternConstructorErrors maybetparity name env useArity lhsPattern namesTyconEnv =
    case maybetparity of
        Nothing ->
            [ undefinedConstructorInPat lhsPattern name env namesTyconEnv ]
        Just tpScheme ->
            let arity = arityOfTpScheme tpScheme
            in if arity /= useArity
               then [ ArityMismatch Constructor name arity useArity ]
               else []

simplePattern :: Pattern -> Bool
simplePattern pattern =
   case pattern of
      Pattern_Constructor _ name _ -> case show name of 
                                         x:_ -> isUpper x
                                         _   -> False
      _                            -> False

-- Type signature but no function definition
-- Duplicated type signatures
checkTypeSignatures :: Names -> [(Name,TpScheme)] -> Errors
checkTypeSignatures declVarNames xs = 
   let (unique, doubles) = uniqueAppearance (map fst xs)
   in [ Duplicated TypeSignature names 
      | names <- doubles 
      ] 
   ++ [ NoFunDef TypeSignature name declVarNames
      | name <- unique
      , name `notElem` declVarNames
      ]

checkExport entity name inScope =
    makeUndefined entity
        (if name `elem` inScope then
            []
         else
            [name]
        )
        (nubBy equalName inScope)

equalName x y =
    getNameName x == getNameName y        

topLevelScopeInfo :: ScopeInfo -> ScopeInfo
topLevelScopeInfo (xs, _, _) = (xs, [], [])

makeErrors :: [(ScopeInfo, Entity)] -> Errors
makeErrors xs = [ Duplicated entity ys | ((yss, _, _), entity) <- xs, ys <- yss ]

makeWarnings :: [(ScopeInfo, Entity)] -> Warnings
makeWarnings xs =  [ Unused entity name | ((_, names, _), entity) <- xs, name <- names ]
                ++ [ Shadow n2 n1 | ((_, _, pairs), entity) <- xs, (n1, n2) <- pairs ]
-- Alternative -------------------------------------------------
-- semantic domain
type T_Alternative = (Names) ->
                     (Names) ->
                     ([(ScopeInfo, Entity)]) ->
                     ([Error]) ->
                     ([Error]) ->
                     (Names) ->
                     (FiniteMap Name Int) ->
                     (FiniteMap Name TpScheme) ->
                     ([Warning]) ->
                     ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(Alternative),(Names),([Warning]))
-- cata
sem_Alternative :: (Alternative) ->
                   (T_Alternative)
sem_Alternative ((Alternative_Alternative (_range) (_pattern) (_righthandside))) =
    (sem_Alternative_Alternative ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_RightHandSide (_righthandside))))
sem_Alternative ((Alternative_Empty (_range))) =
    (sem_Alternative_Empty ((sem_Range (_range))))
sem_Alternative_Alternative :: (T_Range) ->
                               (T_Pattern) ->
                               (T_RightHandSide) ->
                               (T_Alternative)
sem_Alternative_Alternative (_range) (_pattern) (_righthandside) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Alternative_Alternative _range_self _pattern_self _righthandside_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _pattern_patVarNames _righthandside_unboundNames _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_pattern_self,_pattern_unboundNames,_pattern_warnings) =
            (_pattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (False) (_lhs_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _righthandside_collectScopeInfos,_righthandside_kindErrors,_righthandside_miscerrors,_righthandside_self,_righthandside_unboundNames,_righthandside_warnings) =
            (_righthandside (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_pattern_collectScopeInfos) (_lhs_kindErrors) (_pattern_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_pattern_warnings))
    in  ( (_scopeInfo, Variable)   : _righthandside_collectScopeInfos,_righthandside_kindErrors,_righthandside_miscerrors,_self,_unboundNames,_righthandside_warnings)
sem_Alternative_Empty :: (T_Range) ->
                         (T_Alternative)
sem_Alternative_Empty (_range) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Alternative_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_self,[],_lhs_warnings)
-- Alternatives ------------------------------------------------
-- semantic domain
type T_Alternatives = (Names) ->
                      (Names) ->
                      ([(ScopeInfo, Entity)]) ->
                      ([Error]) ->
                      ([Error]) ->
                      (Names) ->
                      (FiniteMap Name Int) ->
                      (FiniteMap Name TpScheme) ->
                      ([Warning]) ->
                      ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(Alternatives),(Names),([Warning]))
-- cata
sem_Alternatives :: (Alternatives) ->
                    (T_Alternatives)
sem_Alternatives (list) =
    (foldr (sem_Alternatives_Cons) (sem_Alternatives_Nil) ((map sem_Alternative list)))
sem_Alternatives_Cons :: (T_Alternative) ->
                         (T_Alternatives) ->
                         (T_Alternatives)
sem_Alternatives_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_kindErrors,_hd_miscerrors,_hd_self,_hd_unboundNames,_hd_warnings) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_tl_self,_tl_unboundNames,_tl_warnings) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectScopeInfos) (_hd_kindErrors) (_hd_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_hd_warnings))
    in  ( _tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_warnings)
sem_Alternatives_Nil :: (T_Alternatives)
sem_Alternatives_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_self,[],_lhs_warnings)
-- AnnotatedType -----------------------------------------------
-- semantic domain
type T_AnnotatedType = (Names) ->
                       (Names) ->
                       ([Error]) ->
                       ([Error]) ->
                       (Names) ->
                       (FiniteMap Name Int) ->
                       (FiniteMap Name TpScheme) ->
                       ( ([Error]),([Error]),(AnnotatedType),(Type),(Names),(Names))
-- cata
sem_AnnotatedType :: (AnnotatedType) ->
                     (T_AnnotatedType)
sem_AnnotatedType ((AnnotatedType_AnnotatedType (_range) (_strict) (_type))) =
    (sem_AnnotatedType_AnnotatedType ((sem_Range (_range))) (_strict) ((sem_Type (_type))))
sem_AnnotatedType_AnnotatedType :: (T_Range) ->
                                   (Bool) ->
                                   (T_Type) ->
                                   (T_AnnotatedType)
sem_AnnotatedType_AnnotatedType (_range) (_strict) (_type) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) =
    let (_self) =
            AnnotatedType_AnnotatedType _range_self _strict _type_self
        (_newErrors) =
            checkType _lhs_typeConstructors (_lhs_namesInScope ++ _lhs_allValueConstructors) _type_self
        ( _range_self) =
            (_range )
        ( _type_miscerrors,_type_self,_type_typevariables) =
            (_type (_lhs_miscerrors))
    in  ( _newErrors ++ _lhs_kindErrors,_type_miscerrors,_self,_type_self,_type_typevariables,[])
-- AnnotatedTypes ----------------------------------------------
-- semantic domain
type T_AnnotatedTypes = (Names) ->
                        (Names) ->
                        ([Error]) ->
                        ([Error]) ->
                        (Names) ->
                        (FiniteMap Name Int) ->
                        (FiniteMap Name TpScheme) ->
                        ( ([Error]),([Error]),(AnnotatedTypes),(Types),(Names),(Names))
-- cata
sem_AnnotatedTypes :: (AnnotatedTypes) ->
                      (T_AnnotatedTypes)
sem_AnnotatedTypes (list) =
    (foldr (sem_AnnotatedTypes_Cons) (sem_AnnotatedTypes_Nil) ((map sem_AnnotatedType list)))
sem_AnnotatedTypes_Cons :: (T_AnnotatedType) ->
                           (T_AnnotatedTypes) ->
                           (T_AnnotatedTypes)
sem_AnnotatedTypes_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_kindErrors,_hd_miscerrors,_hd_self,_hd_type,_hd_typevariables,_hd_unboundNames) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors))
        ( _tl_kindErrors,_tl_miscerrors,_tl_self,_tl_types,_tl_typevariables,_tl_unboundNames) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_kindErrors) (_hd_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors))
    in  ( _tl_kindErrors,_tl_miscerrors,_self,_hd_type : _tl_types,_hd_typevariables  ++  _tl_typevariables,_hd_unboundNames ++ _tl_unboundNames)
sem_AnnotatedTypes_Nil :: (T_AnnotatedTypes)
sem_AnnotatedTypes_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) =
    let (_self) =
            []
    in  ( _lhs_kindErrors,_lhs_miscerrors,_self,[],[],[])
-- Body --------------------------------------------------------
-- semantic domain
type T_Body = (Names) ->
              (Names) ->
              ([(ScopeInfo, Entity)]) ->
              ([(Name,Int)]) ->
              ([(Name,(Int,Tps -> Tp))]) ->
              ([(Name,TpScheme)]) ->
              ([Error]) ->
              ([Error]) ->
              (Names) ->
              ([(Name,(Int,Assoc))]) ->
              (FiniteMap Name Int) ->
              (FiniteMap Name TpScheme) ->
              ([Warning]) ->
              ( ([(ScopeInfo, Entity)]),([(Name,Int)]),([(Name,(Int,Tps -> Tp))]),([(Name,TpScheme)]),(Names),(Names),([Error]),([Error]),([(Name,(Int,Assoc))]),(Body),([(Name,TpScheme)]),(Names),([Warning]))
-- cata
sem_Body :: (Body) ->
            (T_Body)
sem_Body ((Body_Body (_range) (_importdeclarations) (_declarations))) =
    (sem_Body_Body ((sem_Range (_range))) ((sem_ImportDeclarations (_importdeclarations))) ((sem_Declarations (_declarations))))
sem_Body_Body :: (T_Range) ->
                 (T_ImportDeclarations) ->
                 (T_Declarations) ->
                 (T_Body)
sem_Body_Body (_range) (_importdeclarations) (_declarations) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Body_Body _range_self _importdeclarations_self _declarations_self
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        (_typeSignatureErrors) =
            checkTypeSignatures _declarations_declVarNames _declarations_typeSignatures
        ( _range_self) =
            (_range )
        ( _importdeclarations_importedModules,_importdeclarations_self) =
            (_importdeclarations ([]))
        ( _declarations_collectScopeInfos,_declarations_collectTypeConstructors,_declarations_collectTypeSynonyms,_declarations_collectValueConstructors,_declarations_declVarNames,_declarations_kindErrors,_declarations_miscerrors,_declarations_operatorFixities,_declarations_previousWasAlsoFB,_declarations_self,_declarations_suspiciousFBs,_declarations_typeSignatures,_declarations_unboundNames,_declarations_warnings) =
            (_declarations (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (Nothing) ([]) (_lhs_typeConstructors) ([]) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _declarations_collectScopeInfos
         ,_declarations_collectTypeConstructors
         ,_declarations_collectTypeSynonyms
         ,_declarations_collectValueConstructors
         ,_declarations_declVarNames
         ,_importdeclarations_importedModules
         ,_declarations_kindErrors
         ,_typeSignatureErrors ++ _declarations_miscerrors
         ,_declarations_operatorFixities
         ,_self
         ,_declarations_typeSignatures
         ,_declarations_unboundNames
         ,_declarations_warnings ++
          _suspiciousErrors
         )
-- Constructor -------------------------------------------------
-- semantic domain
type T_Constructor = (Names) ->
                     (Names) ->
                     ([(Name,TpScheme)]) ->
                     ([Error]) ->
                     ([Error]) ->
                     (Names) ->
                     (SimpleType) ->
                     (FiniteMap Name Int) ->
                     (FiniteMap Name TpScheme) ->
                     ( ([(Name,TpScheme)]),([Error]),([Error]),(Constructor),(Names),(Names))
-- cata
sem_Constructor :: (Constructor) ->
                   (T_Constructor)
sem_Constructor ((Constructor_Constructor (_range) (_constructor) (_types))) =
    (sem_Constructor_Constructor ((sem_Range (_range))) ((sem_Name (_constructor))) ((sem_AnnotatedTypes (_types))))
sem_Constructor ((Constructor_Infix (_range) (_leftType) (_constructorOperator) (_rightType))) =
    (sem_Constructor_Infix ((sem_Range (_range))) ((sem_AnnotatedType (_leftType))) ((sem_Name (_constructorOperator))) ((sem_AnnotatedType (_rightType))))
sem_Constructor ((Constructor_Record (_range) (_constructor) (_fieldDeclarations))) =
    (sem_Constructor_Record ((sem_Range (_range))) ((sem_Name (_constructor))) ((sem_FieldDeclarations (_fieldDeclarations))))
sem_Constructor_Constructor :: (T_Range) ->
                               (T_Name) ->
                               (T_AnnotatedTypes) ->
                               (T_Constructor)
sem_Constructor_Constructor (_range) (_constructor) (_types) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_typeConstructors) (_lhs_valueConstructors) =
    let (_self) =
            Constructor_Constructor _range_self _constructor_self _types_self
        (_typeScheme) =
            generalizeAll (foldr (.->.) _tp _tps)
        ((_tp,_tps)) =
            convertFromSimpleTypeAndTypes _lhs_simpletype _types_types
        ( _range_self) =
            (_range )
        ( _constructor_self) =
            (_constructor )
        ( _types_kindErrors,_types_miscerrors,_types_self,_types_types,_types_typevariables,_types_unboundNames) =
            (_types (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors))
    in  ( (_constructor_self, _typeScheme) : _lhs_collectValueConstructors,_types_kindErrors,_types_miscerrors,_self,_types_typevariables,_types_unboundNames)
sem_Constructor_Infix :: (T_Range) ->
                         (T_AnnotatedType) ->
                         (T_Name) ->
                         (T_AnnotatedType) ->
                         (T_Constructor)
sem_Constructor_Infix (_range) (_leftType) (_constructorOperator) (_rightType) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_typeConstructors) (_lhs_valueConstructors) =
    let (_self) =
            Constructor_Infix _range_self _leftType_self _constructorOperator_self _rightType_self
        (_typeScheme) =
            generalizeAll (foldr (.->.) _tp _tps)
        ((_tp,_tps)) =
            convertFromSimpleTypeAndTypes _lhs_simpletype [_leftType_type,_rightType_type]
        ( _range_self) =
            (_range )
        ( _leftType_kindErrors,_leftType_miscerrors,_leftType_self,_leftType_type,_leftType_typevariables,_leftType_unboundNames) =
            (_leftType (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors))
        ( _constructorOperator_self) =
            (_constructorOperator )
        ( _rightType_kindErrors,_rightType_miscerrors,_rightType_self,_rightType_type,_rightType_typevariables,_rightType_unboundNames) =
            (_rightType (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_leftType_kindErrors) (_leftType_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors))
    in  ( (_constructorOperator_self, _typeScheme) : _lhs_collectValueConstructors,_rightType_kindErrors,_rightType_miscerrors,_self,_leftType_typevariables  ++  _rightType_typevariables,_leftType_unboundNames ++ _rightType_unboundNames)
sem_Constructor_Record :: (T_Range) ->
                          (T_Name) ->
                          (T_FieldDeclarations) ->
                          (T_Constructor)
sem_Constructor_Record (_range) (_constructor) (_fieldDeclarations) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_typeConstructors) (_lhs_valueConstructors) =
    let (_self) =
            Constructor_Record _range_self _constructor_self _fieldDeclarations_self
        ( _range_self) =
            (_range )
        ( _constructor_self) =
            (_constructor )
        ( _fieldDeclarations_miscerrors,_fieldDeclarations_self,_fieldDeclarations_unboundNames) =
            (_fieldDeclarations (_lhs_miscerrors) (_lhs_namesInScope))
    in  ( _lhs_collectValueConstructors,_lhs_kindErrors,_fieldDeclarations_miscerrors,_self,[],_fieldDeclarations_unboundNames)
-- Constructors ------------------------------------------------
-- semantic domain
type T_Constructors = (Names) ->
                      (Names) ->
                      ([(Name,TpScheme)]) ->
                      ([Error]) ->
                      ([Error]) ->
                      (Names) ->
                      (SimpleType) ->
                      (FiniteMap Name Int) ->
                      (FiniteMap Name TpScheme) ->
                      ( ([(Name,TpScheme)]),([Error]),([Error]),(Constructors),(Names),(Names))
-- cata
sem_Constructors :: (Constructors) ->
                    (T_Constructors)
sem_Constructors (list) =
    (foldr (sem_Constructors_Cons) (sem_Constructors_Nil) ((map sem_Constructor list)))
sem_Constructors_Cons :: (T_Constructor) ->
                         (T_Constructors) ->
                         (T_Constructors)
sem_Constructors_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_typeConstructors) (_lhs_valueConstructors) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectValueConstructors,_hd_kindErrors,_hd_miscerrors,_hd_self,_hd_typevariables,_hd_unboundNames) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_typeConstructors) (_lhs_valueConstructors))
        ( _tl_collectValueConstructors,_tl_kindErrors,_tl_miscerrors,_tl_self,_tl_typevariables,_tl_unboundNames) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectValueConstructors) (_hd_kindErrors) (_hd_miscerrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_typeConstructors) (_lhs_valueConstructors))
    in  ( _tl_collectValueConstructors,_tl_kindErrors,_tl_miscerrors,_self,_hd_typevariables  ++  _tl_typevariables,_hd_unboundNames ++ _tl_unboundNames)
sem_Constructors_Nil :: (T_Constructors)
sem_Constructors_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_simpletype) (_lhs_typeConstructors) (_lhs_valueConstructors) =
    let (_self) =
            []
    in  ( _lhs_collectValueConstructors,_lhs_kindErrors,_lhs_miscerrors,_self,[],[])
-- ContextItem -------------------------------------------------
-- semantic domain
type T_ContextItem = ([Error]) ->
                     ( ([Name]),([Error]),(ContextItem))
-- cata
sem_ContextItem :: (ContextItem) ->
                   (T_ContextItem)
sem_ContextItem ((ContextItem_ContextItem (_range) (_name) (_types))) =
    (sem_ContextItem_ContextItem ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Types (_types))))
sem_ContextItem_ContextItem :: (T_Range) ->
                               (T_Name) ->
                               (T_Types) ->
                               (T_ContextItem)
sem_ContextItem_ContextItem (_range) (_name) (_types) (_lhs_miscerrors) =
    let (_self) =
            ContextItem_ContextItem _range_self _name_self _types_self
        (_tyconEnv) =
            internalError "PartialSyntax.ag" "n/a" "ContextItem.ContextItem"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _types_miscerrors,_types_self,_types_typevariables) =
            (_types (_lhs_miscerrors))
    in  ( _types_typevariables
         ,if elem (getNameName _name) (keysFM standardClasses)
             then _types_miscerrors
             else UnknownClass _name : _types_miscerrors
         ,_self
         )
-- ContextItems ------------------------------------------------
-- semantic domain
type T_ContextItems = ([Error]) ->
                      ( ([Name]),([Error]),(ContextItems))
-- cata
sem_ContextItems :: (ContextItems) ->
                    (T_ContextItems)
sem_ContextItems (list) =
    (foldr (sem_ContextItems_Cons) (sem_ContextItems_Nil) ((map sem_ContextItem list)))
sem_ContextItems_Cons :: (T_ContextItem) ->
                         (T_ContextItems) ->
                         (T_ContextItems)
sem_ContextItems_Cons (_hd) (_tl) (_lhs_miscerrors) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_contextVars,_hd_miscerrors,_hd_self) =
            (_hd (_lhs_miscerrors))
        ( _tl_contextVars,_tl_miscerrors,_tl_self) =
            (_tl (_hd_miscerrors))
    in  ( _hd_contextVars  ++  _tl_contextVars,_tl_miscerrors,_self)
sem_ContextItems_Nil :: (T_ContextItems)
sem_ContextItems_Nil (_lhs_miscerrors) =
    let (_self) =
            []
    in  ( [],_lhs_miscerrors,_self)
-- Declaration -------------------------------------------------
-- semantic domain
type T_Declaration = (Names) ->
                     (Names) ->
                     ([(ScopeInfo, Entity)]) ->
                     ([(Name,Int)]) ->
                     ([(Name,(Int,Tps -> Tp))]) ->
                     ([(Name,TpScheme)]) ->
                     ([Error]) ->
                     ([Error]) ->
                     (Names) ->
                     ([(Name,(Int,Assoc))]) ->
                     (Maybe Name) ->
                     ([(Name,Name)]) ->
                     (FiniteMap Name Int) ->
                     ([(Name,TpScheme)]) ->
                     (FiniteMap Name TpScheme) ->
                     ([Warning]) ->
                     ( ([(ScopeInfo, Entity)]),([(Name,Int)]),([(Name,(Int,Tps -> Tp))]),([(Name,TpScheme)]),(Names),([Error]),([Error]),([(Name,(Int,Assoc))]),(Maybe Name),(Declaration),([(Name,Name)]),([(Name,TpScheme)]),(Names),([Warning]))
-- cata
sem_Declaration :: (Declaration) ->
                   (T_Declaration)
sem_Declaration ((Declaration_Class (_range) (_context) (_simpletype) (_where))) =
    (sem_Declaration_Class ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_MaybeDeclarations (_where))))
sem_Declaration ((Declaration_Data (_range) (_context) (_simpletype) (_constructors) (_derivings))) =
    (sem_Declaration_Data ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_Constructors (_constructors))) ((sem_Names (_derivings))))
sem_Declaration ((Declaration_Default (_range) (_types))) =
    (sem_Declaration_Default ((sem_Range (_range))) ((sem_Types (_types))))
sem_Declaration ((Declaration_Empty (_range))) =
    (sem_Declaration_Empty ((sem_Range (_range))))
sem_Declaration ((Declaration_Fixity (_range) (_fixity) (_priority) (_operators))) =
    (sem_Declaration_Fixity ((sem_Range (_range))) ((sem_Fixity (_fixity))) ((sem_MaybeInt (_priority))) ((sem_Names (_operators))))
sem_Declaration ((Declaration_FunctionBindings (_range) (_bindings))) =
    (sem_Declaration_FunctionBindings ((sem_Range (_range))) ((sem_FunctionBindings (_bindings))))
sem_Declaration ((Declaration_Instance (_range) (_context) (_name) (_types) (_where))) =
    (sem_Declaration_Instance ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_Name (_name))) ((sem_Types (_types))) ((sem_MaybeDeclarations (_where))))
sem_Declaration ((Declaration_Newtype (_range) (_context) (_simpletype) (_constructor) (_derivings))) =
    (sem_Declaration_Newtype ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_SimpleType (_simpletype))) ((sem_Constructor (_constructor))) ((sem_Names (_derivings))))
sem_Declaration ((Declaration_PatternBinding (_range) (_pattern) (_righthandside))) =
    (sem_Declaration_PatternBinding ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_RightHandSide (_righthandside))))
sem_Declaration ((Declaration_Type (_range) (_simpletype) (_type))) =
    (sem_Declaration_Type ((sem_Range (_range))) ((sem_SimpleType (_simpletype))) ((sem_Type (_type))))
sem_Declaration ((Declaration_TypeSignature (_range) (_names) (_type))) =
    (sem_Declaration_TypeSignature ((sem_Range (_range))) ((sem_Names (_names))) ((sem_Type (_type))))
sem_Declaration_Class :: (T_Range) ->
                         (T_ContextItems) ->
                         (T_SimpleType) ->
                         (T_MaybeDeclarations) ->
                         (T_Declaration)
sem_Declaration_Class (_range) (_context) (_simpletype) (_where) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Declaration_Class _range_self _context_self _simpletype_self _where_self
        ((_assumptions,_constraints,_unboundNames)) =
            internalError "PartialSyntax.ag" "n/a" "Declaration.Class"
        ( _range_self) =
            (_range )
        ( _context_contextVars,_context_miscerrors,_context_self) =
            (_context (_lhs_miscerrors))
        ( _simpletype_name,_simpletype_self,_simpletype_typevariables) =
            (_simpletype )
        ( _where_collectScopeInfos,_where_kindErrors,_where_miscerrors,_where_namesInScope,_where_self,_where_unboundNames,_where_warnings) =
            (_where (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_context_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_unboundNames) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _where_collectScopeInfos,_lhs_collectTypeConstructors,_lhs_collectTypeSynonyms,_lhs_collectValueConstructors,[],_where_kindErrors,_where_miscerrors,_lhs_operatorFixities,Nothing,_self,_lhs_suspiciousFBs,_lhs_typeSignatures,_unboundNames,_where_warnings)
sem_Declaration_Data :: (T_Range) ->
                        (T_ContextItems) ->
                        (T_SimpleType) ->
                        (T_Constructors) ->
                        (T_Names) ->
                        (T_Declaration)
sem_Declaration_Data (_range)
                     (_context)
                     (_simpletype)
                     (_constructors)
                     (_derivings)
                     (_lhs_allTypeConstructors)
                     (_lhs_allValueConstructors)
                     (_lhs_collectScopeInfos)
                     (_lhs_collectTypeConstructors)
                     (_lhs_collectTypeSynonyms)
                     (_lhs_collectValueConstructors)
                     (_lhs_kindErrors)
                     (_lhs_miscerrors)
                     (_lhs_namesInScope)
                     (_lhs_operatorFixities)
                     (_lhs_previousWasAlsoFB)
                     (_lhs_suspiciousFBs)
                     (_lhs_typeConstructors)
                     (_lhs_typeSignatures)
                     (_lhs_valueConstructors)
                     (_lhs_warnings) =
    let (_self) =
            Declaration_Data _range_self _context_self _simpletype_self _constructors_self _derivings_self
        (_unused) =
            filter (`notElem` _constructors_typevariables) _simpletype_typevariables
        (_doubles) =
            filter ((>1) . length) . group . sort $        _simpletype_typevariables
        (_undef) =
            filter (`notElem` _simpletype_typevariables)   _constructors_typevariables
        ( _range_self) =
            (_range )
        ( _context_contextVars,_context_miscerrors,_context_self) =
            (_context (_lhs_miscerrors))
        ( _simpletype_name,_simpletype_self,_simpletype_typevariables) =
            (_simpletype )
        ( _constructors_collectValueConstructors,_constructors_kindErrors,_constructors_miscerrors,_constructors_self,_constructors_typevariables,_constructors_unboundNames) =
            (_constructors (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_context_miscerrors) (_lhs_namesInScope) (_simpletype_self) (_lhs_typeConstructors) (_lhs_valueConstructors))
        ( _derivings_self) =
            (_derivings )
    in  ( _lhs_collectScopeInfos
         ,(_simpletype_name,length _simpletype_typevariables) : _lhs_collectTypeConstructors
         ,_lhs_collectTypeSynonyms
         ,_constructors_collectValueConstructors
         ,[]
         ,_constructors_kindErrors
         ,concat [ makeDuplicated TypeVariable _doubles
                 , makeUndefined TypeVariable _undef _simpletype_typevariables
                 , _lhs_miscerrors
                 ]
         ,_lhs_operatorFixities
         ,Nothing
         ,_self
         ,_lhs_suspiciousFBs
         ,_lhs_typeSignatures
         ,_constructors_unboundNames
         ,map (Unused TypeVariable) _unused ++ _lhs_warnings
         )
sem_Declaration_Default :: (T_Range) ->
                           (T_Types) ->
                           (T_Declaration)
sem_Declaration_Default (_range) (_types) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Declaration_Default _range_self _types_self
        ( _range_self) =
            (_range )
        ( _types_miscerrors,_types_self,_types_typevariables) =
            (_types (_lhs_miscerrors))
    in  ( _lhs_collectScopeInfos,_lhs_collectTypeConstructors,_lhs_collectTypeSynonyms,_lhs_collectValueConstructors,[],_lhs_kindErrors,_types_miscerrors,_lhs_operatorFixities,Nothing,_self,_lhs_suspiciousFBs,_lhs_typeSignatures,[],_lhs_warnings)
sem_Declaration_Empty :: (T_Range) ->
                         (T_Declaration)
sem_Declaration_Empty (_range) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Declaration_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_lhs_collectTypeConstructors,_lhs_collectTypeSynonyms,_lhs_collectValueConstructors,[],_lhs_kindErrors,_lhs_miscerrors,_lhs_operatorFixities,_lhs_previousWasAlsoFB,_self,_lhs_suspiciousFBs,_lhs_typeSignatures,[],_lhs_warnings)
sem_Declaration_Fixity :: (T_Range) ->
                          (T_Fixity) ->
                          (T_MaybeInt) ->
                          (T_Names) ->
                          (T_Declaration)
sem_Declaration_Fixity (_range)
                       (_fixity)
                       (_priority)
                       (_operators)
                       (_lhs_allTypeConstructors)
                       (_lhs_allValueConstructors)
                       (_lhs_collectScopeInfos)
                       (_lhs_collectTypeConstructors)
                       (_lhs_collectTypeSynonyms)
                       (_lhs_collectValueConstructors)
                       (_lhs_kindErrors)
                       (_lhs_miscerrors)
                       (_lhs_namesInScope)
                       (_lhs_operatorFixities)
                       (_lhs_previousWasAlsoFB)
                       (_lhs_suspiciousFBs)
                       (_lhs_typeConstructors)
                       (_lhs_typeSignatures)
                       (_lhs_valueConstructors)
                       (_lhs_warnings) =
    let (_self) =
            Declaration_Fixity _range_self _fixity_self _priority_self _operators_self
        ( _range_self) =
            (_range )
        ( _fixity_self) =
            (_fixity )
        ( _priority_self) =
            (_priority )
        ( _operators_self) =
            (_operators )
    in  ( _lhs_collectScopeInfos
         ,_lhs_collectTypeConstructors
         ,_lhs_collectTypeSynonyms
         ,_lhs_collectValueConstructors
         ,[]
         ,_lhs_kindErrors
         ,_lhs_miscerrors
         ,let associativity = case _fixity_self of
                                 Fixity_Infix _  -> AssocNone
                                 Fixity_Infixl _ -> AssocLeft
                                 Fixity_Infixr _ -> AssocRight
              priority      = case _priority_self of
                                 MaybeInt_Just i  -> i
                                 MaybeInt_Nothing -> 9
          in [ (name, (priority, associativity)) | name <- _operators_self ] ++ _lhs_operatorFixities
         ,Nothing
         ,_self
         ,_lhs_suspiciousFBs
         ,_lhs_typeSignatures
         ,[]
         ,_lhs_warnings
         )
sem_Declaration_FunctionBindings :: (T_Range) ->
                                    (T_FunctionBindings) ->
                                    (T_Declaration)
sem_Declaration_FunctionBindings (_range) (_bindings) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Declaration_FunctionBindings _range_self _bindings_self
        (_arityErrors) =
            if all (== head _bindings_arities) _bindings_arities
              then []
              else [ DefArityMismatch _bindings_name (mode _bindings_arities) _range_self ]
        ( _range_self) =
            (_range )
        ( _bindings_arities,_bindings_collectScopeInfos,_bindings_kindErrors,_bindings_miscerrors,_bindings_name,_bindings_self,_bindings_unboundNames,_bindings_warnings) =
            (_bindings (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _bindings_collectScopeInfos
         ,_lhs_collectTypeConstructors
         ,_lhs_collectTypeSynonyms
         ,_lhs_collectValueConstructors
         ,[_bindings_name]
         ,_bindings_kindErrors
         ,_arityErrors ++ _bindings_miscerrors
         ,_lhs_operatorFixities
         ,Just _bindings_name
         ,_self
         ,case _lhs_previousWasAlsoFB of
             Just name | show name `similar` show _bindings_name
                -> (name,_bindings_name) : _lhs_suspiciousFBs
             _  -> _lhs_suspiciousFBs
         ,_lhs_typeSignatures
         ,_bindings_unboundNames
         ,_bindings_warnings
         )
sem_Declaration_Instance :: (T_Range) ->
                            (T_ContextItems) ->
                            (T_Name) ->
                            (T_Types) ->
                            (T_MaybeDeclarations) ->
                            (T_Declaration)
sem_Declaration_Instance (_range)
                         (_context)
                         (_name)
                         (_types)
                         (_where)
                         (_lhs_allTypeConstructors)
                         (_lhs_allValueConstructors)
                         (_lhs_collectScopeInfos)
                         (_lhs_collectTypeConstructors)
                         (_lhs_collectTypeSynonyms)
                         (_lhs_collectValueConstructors)
                         (_lhs_kindErrors)
                         (_lhs_miscerrors)
                         (_lhs_namesInScope)
                         (_lhs_operatorFixities)
                         (_lhs_previousWasAlsoFB)
                         (_lhs_suspiciousFBs)
                         (_lhs_typeConstructors)
                         (_lhs_typeSignatures)
                         (_lhs_valueConstructors)
                         (_lhs_warnings) =
    let (_self) =
            Declaration_Instance _range_self _context_self _name_self _types_self _where_self
        ((_assumptions,_constraints,_unboundNames)) =
            internalError "PartialSyntax.ag" "n/a" "Declaration.Instance"
        ( _range_self) =
            (_range )
        ( _context_contextVars,_context_miscerrors,_context_self) =
            (_context (_lhs_miscerrors))
        ( _name_self) =
            (_name )
        ( _types_miscerrors,_types_self,_types_typevariables) =
            (_types (_context_miscerrors))
        ( _where_collectScopeInfos,_where_kindErrors,_where_miscerrors,_where_namesInScope,_where_self,_where_unboundNames,_where_warnings) =
            (_where (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_types_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_unboundNames) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _where_collectScopeInfos,_lhs_collectTypeConstructors,_lhs_collectTypeSynonyms,_lhs_collectValueConstructors,[],_where_kindErrors,_where_miscerrors,_lhs_operatorFixities,Nothing,_self,_lhs_suspiciousFBs,_lhs_typeSignatures,_unboundNames,_where_warnings)
sem_Declaration_Newtype :: (T_Range) ->
                           (T_ContextItems) ->
                           (T_SimpleType) ->
                           (T_Constructor) ->
                           (T_Names) ->
                           (T_Declaration)
sem_Declaration_Newtype (_range)
                        (_context)
                        (_simpletype)
                        (_constructor)
                        (_derivings)
                        (_lhs_allTypeConstructors)
                        (_lhs_allValueConstructors)
                        (_lhs_collectScopeInfos)
                        (_lhs_collectTypeConstructors)
                        (_lhs_collectTypeSynonyms)
                        (_lhs_collectValueConstructors)
                        (_lhs_kindErrors)
                        (_lhs_miscerrors)
                        (_lhs_namesInScope)
                        (_lhs_operatorFixities)
                        (_lhs_previousWasAlsoFB)
                        (_lhs_suspiciousFBs)
                        (_lhs_typeConstructors)
                        (_lhs_typeSignatures)
                        (_lhs_valueConstructors)
                        (_lhs_warnings) =
    let (_self) =
            Declaration_Newtype _range_self _context_self _simpletype_self _constructor_self _derivings_self
        ( _range_self) =
            (_range )
        ( _context_contextVars,_context_miscerrors,_context_self) =
            (_context (_lhs_miscerrors))
        ( _simpletype_name,_simpletype_self,_simpletype_typevariables) =
            (_simpletype )
        ( _constructor_collectValueConstructors,_constructor_kindErrors,_constructor_miscerrors,_constructor_self,_constructor_typevariables,_constructor_unboundNames) =
            (_constructor (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_context_miscerrors) (_lhs_namesInScope) (_simpletype_self) (_lhs_typeConstructors) (_lhs_valueConstructors))
        ( _derivings_self) =
            (_derivings )
    in  ( _lhs_collectScopeInfos,_lhs_collectTypeConstructors,_lhs_collectTypeSynonyms,_constructor_collectValueConstructors,[],_constructor_kindErrors,_constructor_miscerrors,_lhs_operatorFixities,Nothing,_self,_lhs_suspiciousFBs,_lhs_typeSignatures,_constructor_unboundNames,_lhs_warnings)
sem_Declaration_PatternBinding :: (T_Range) ->
                                  (T_Pattern) ->
                                  (T_RightHandSide) ->
                                  (T_Declaration)
sem_Declaration_PatternBinding (_range)
                               (_pattern)
                               (_righthandside)
                               (_lhs_allTypeConstructors)
                               (_lhs_allValueConstructors)
                               (_lhs_collectScopeInfos)
                               (_lhs_collectTypeConstructors)
                               (_lhs_collectTypeSynonyms)
                               (_lhs_collectValueConstructors)
                               (_lhs_kindErrors)
                               (_lhs_miscerrors)
                               (_lhs_namesInScope)
                               (_lhs_operatorFixities)
                               (_lhs_previousWasAlsoFB)
                               (_lhs_suspiciousFBs)
                               (_lhs_typeConstructors)
                               (_lhs_typeSignatures)
                               (_lhs_valueConstructors)
                               (_lhs_warnings) =
    let (_self) =
            Declaration_PatternBinding _range_self _pattern_self _righthandside_self
        (_patternDefinesNoVarsErrors) =
            if null _pattern_patVarNames
              then [ PatternDefinesNoVars (getPatRange _pattern_self) ]
              else []
        ( _range_self) =
            (_range )
        ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_pattern_self,_pattern_unboundNames,_pattern_warnings) =
            (_pattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (simplePattern _pattern_self) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _righthandside_collectScopeInfos,_righthandside_kindErrors,_righthandside_miscerrors,_righthandside_self,_righthandside_unboundNames,_righthandside_warnings) =
            (_righthandside (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_pattern_collectScopeInfos) (_lhs_kindErrors) (_pattern_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_pattern_warnings))
    in  ( _righthandside_collectScopeInfos,_lhs_collectTypeConstructors,_lhs_collectTypeSynonyms,_lhs_collectValueConstructors,_pattern_patVarNames,_righthandside_kindErrors,_patternDefinesNoVarsErrors ++ _righthandside_miscerrors,_lhs_operatorFixities,Nothing,_self,_lhs_suspiciousFBs,_lhs_typeSignatures,_pattern_unboundNames ++ _righthandside_unboundNames,_righthandside_warnings)
sem_Declaration_Type :: (T_Range) ->
                        (T_SimpleType) ->
                        (T_Type) ->
                        (T_Declaration)
sem_Declaration_Type (_range) (_simpletype) (_type) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Declaration_Type _range_self _simpletype_self _type_self
        (_typeSynonymInfo) =
            (length _simpletype_typevariables,\tps -> makeTpFromType (zip _simpletype_typevariables tps) _type_self)
        (_newErrors) =
            checkType _lhs_typeConstructors (_lhs_namesInScope ++ _lhs_allValueConstructors) _type_self
        (_unused) =
            filter (`notElem` _type_typevariables)       _simpletype_typevariables
        (_doubles) =
            filter ((>1) . length) . group . sort $      _simpletype_typevariables
        (_undef) =
            filter (`notElem` _simpletype_typevariables) _type_typevariables
        ( _range_self) =
            (_range )
        ( _simpletype_name,_simpletype_self,_simpletype_typevariables) =
            (_simpletype )
        ( _type_miscerrors,_type_self,_type_typevariables) =
            (_type (_lhs_miscerrors))
    in  ( _lhs_collectScopeInfos
         ,_lhs_collectTypeConstructors
         ,(_simpletype_name, _typeSynonymInfo) : _lhs_collectTypeSynonyms
         ,_lhs_collectValueConstructors
         ,[]
         ,_newErrors ++ _lhs_kindErrors
         ,concat [ makeDuplicated TypeVariable _doubles
                 , makeUndefined TypeVariable _undef _simpletype_typevariables
                 , _lhs_miscerrors
                 ]
         ,_lhs_operatorFixities
         ,Nothing
         ,_self
         ,_lhs_suspiciousFBs
         ,_lhs_typeSignatures
         ,[]
         ,map (Unused TypeVariable) _unused ++ _lhs_warnings
         )
sem_Declaration_TypeSignature :: (T_Range) ->
                                 (T_Names) ->
                                 (T_Type) ->
                                 (T_Declaration)
sem_Declaration_TypeSignature (_range) (_names) (_type) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Declaration_TypeSignature _range_self _names_self _type_self
        (_typeScheme) =
            makeTpSchemeFromType _type_self
        (_newErrors) =
            checkType _lhs_typeConstructors (_lhs_namesInScope ++ _lhs_allValueConstructors) _type_self
        ( _range_self) =
            (_range )
        ( _names_self) =
            (_names )
        ( _type_miscerrors,_type_self,_type_typevariables) =
            (_type (_lhs_miscerrors))
    in  ( _lhs_collectScopeInfos,_lhs_collectTypeConstructors,_lhs_collectTypeSynonyms,_lhs_collectValueConstructors,[],_newErrors ++ _lhs_kindErrors,_type_miscerrors,_lhs_operatorFixities,Nothing,_self,_lhs_suspiciousFBs,[ (name, _typeScheme) | name <- _names_self ] ++ _lhs_typeSignatures,[],_lhs_warnings)
-- Declarations ------------------------------------------------
-- semantic domain
type T_Declarations = (Names) ->
                      (Names) ->
                      ([(ScopeInfo, Entity)]) ->
                      ([(Name,Int)]) ->
                      ([(Name,(Int,Tps -> Tp))]) ->
                      ([(Name,TpScheme)]) ->
                      ([Error]) ->
                      ([Error]) ->
                      (Names) ->
                      ([(Name,(Int,Assoc))]) ->
                      (Maybe Name) ->
                      ([(Name,Name)]) ->
                      (FiniteMap Name Int) ->
                      ([(Name,TpScheme)]) ->
                      (FiniteMap Name TpScheme) ->
                      ([Warning]) ->
                      ( ([(ScopeInfo, Entity)]),([(Name,Int)]),([(Name,(Int,Tps -> Tp))]),([(Name,TpScheme)]),(Names),([Error]),([Error]),([(Name,(Int,Assoc))]),(Maybe Name),(Declarations),([(Name,Name)]),([(Name,TpScheme)]),(Names),([Warning]))
-- cata
sem_Declarations :: (Declarations) ->
                    (T_Declarations)
sem_Declarations (list) =
    (foldr (sem_Declarations_Cons) (sem_Declarations_Nil) ((map sem_Declaration list)))
sem_Declarations_Cons :: (T_Declaration) ->
                         (T_Declarations) ->
                         (T_Declarations)
sem_Declarations_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_collectTypeConstructors,_hd_collectTypeSynonyms,_hd_collectValueConstructors,_hd_declVarNames,_hd_kindErrors,_hd_miscerrors,_hd_operatorFixities,_hd_previousWasAlsoFB,_hd_self,_hd_suspiciousFBs,_hd_typeSignatures,_hd_unboundNames,_hd_warnings) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings))
        ( _tl_collectScopeInfos,_tl_collectTypeConstructors,_tl_collectTypeSynonyms,_tl_collectValueConstructors,_tl_declVarNames,_tl_kindErrors,_tl_miscerrors,_tl_operatorFixities,_tl_previousWasAlsoFB,_tl_self,_tl_suspiciousFBs,_tl_typeSignatures,_tl_unboundNames,_tl_warnings) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectScopeInfos) (_hd_collectTypeConstructors) (_hd_collectTypeSynonyms) (_hd_collectValueConstructors) (_hd_kindErrors) (_hd_miscerrors) (_lhs_namesInScope) (_hd_operatorFixities) (_hd_previousWasAlsoFB) (_hd_suspiciousFBs) (_lhs_typeConstructors) (_hd_typeSignatures) (_lhs_valueConstructors) (_hd_warnings))
    in  ( _tl_collectScopeInfos,_tl_collectTypeConstructors,_tl_collectTypeSynonyms,_tl_collectValueConstructors,_hd_declVarNames ++ _tl_declVarNames,_tl_kindErrors,_tl_miscerrors,_tl_operatorFixities,_tl_previousWasAlsoFB,_self,_tl_suspiciousFBs,_tl_typeSignatures,_hd_unboundNames ++ _tl_unboundNames,_tl_warnings)
sem_Declarations_Nil :: (T_Declarations)
sem_Declarations_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_collectTypeConstructors) (_lhs_collectTypeSynonyms) (_lhs_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_operatorFixities) (_lhs_previousWasAlsoFB) (_lhs_suspiciousFBs) (_lhs_typeConstructors) (_lhs_typeSignatures) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_lhs_collectTypeConstructors,_lhs_collectTypeSynonyms,_lhs_collectValueConstructors,[],_lhs_kindErrors,_lhs_miscerrors,_lhs_operatorFixities,_lhs_previousWasAlsoFB,_self,_lhs_suspiciousFBs,_lhs_typeSignatures,[],_lhs_warnings)
-- Export ------------------------------------------------------
-- semantic domain
type T_Export = (Names) ->
                (Names) ->
                (Names) ->
                (Names) ->
                ( ([Error]),(Export))
-- cata
sem_Export :: (Export) ->
              (T_Export)
sem_Export ((Export_Module (_range) (_name))) =
    (sem_Export_Module ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export ((Export_TypeOrClass (_range) (_name) (_names))) =
    (sem_Export_TypeOrClass ((sem_Range (_range))) ((sem_Name (_name))) ((sem_MaybeNames (_names))))
sem_Export ((Export_TypeOrClassComplete (_range) (_name))) =
    (sem_Export_TypeOrClassComplete ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export ((Export_Variable (_range) (_name))) =
    (sem_Export_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Export_Module :: (T_Range) ->
                     (T_Name) ->
                     (T_Export)
sem_Export_Module (_range) (_name) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope) =
    let (_self) =
            Export_Module _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( checkExport ExportModule _name_self
             _lhs_modulesInScope
         ,_self
         )
sem_Export_TypeOrClass :: (T_Range) ->
                          (T_Name) ->
                          (T_MaybeNames) ->
                          (T_Export)
sem_Export_TypeOrClass (_range) (_name) (_names) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope) =
    let (_self) =
            Export_TypeOrClass _range_self _name_self _names_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _names_self) =
            (_names )
    in  ( [],_self)
sem_Export_TypeOrClassComplete :: (T_Range) ->
                                  (T_Name) ->
                                  (T_Export)
sem_Export_TypeOrClassComplete (_range) (_name) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope) =
    let (_self) =
            Export_TypeOrClassComplete _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( [],_self)
sem_Export_Variable :: (T_Range) ->
                       (T_Name) ->
                       (T_Export)
sem_Export_Variable (_range) (_name) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope) =
    let (_self) =
            Export_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( checkExport ExportVariable _name_self
             _lhs_namesInScop
         ,_self
         )
-- Exports -----------------------------------------------------
-- semantic domain
type T_Exports = (Names) ->
                 (Names) ->
                 (Names) ->
                 (Names) ->
                 ( ([Error]),(Exports))
-- cata
sem_Exports :: (Exports) ->
               (T_Exports)
sem_Exports (list) =
    (foldr (sem_Exports_Cons) (sem_Exports_Nil) ((map sem_Export list)))
sem_Exports_Cons :: (T_Export) ->
                    (T_Exports) ->
                    (T_Exports)
sem_Exports_Cons (_hd) (_tl) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_exportErrors,_hd_self) =
            (_hd (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope))
        ( _tl_exportErrors,_tl_self) =
            (_tl (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope))
    in  ( _hd_exportErrors  ++  _tl_exportErrors,_self)
sem_Exports_Nil :: (T_Exports)
sem_Exports_Nil (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope) =
    let (_self) =
            []
    in  ( [],_self)
-- Expression --------------------------------------------------
-- semantic domain
type T_Expression = (Names) ->
                    (Names) ->
                    ([(ScopeInfo, Entity)]) ->
                    ([Error]) ->
                    ([Error]) ->
                    (Names) ->
                    (FiniteMap Name Int) ->
                    (FiniteMap Name TpScheme) ->
                    ([Warning]) ->
                    ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(Expression),(Names),([Warning]))
-- cata
sem_Expression :: (Expression) ->
                  (T_Expression)
sem_Expression ((Expression_Case (_range) (_expression) (_alternatives))) =
    (sem_Expression_Case ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Alternatives (_alternatives))))
sem_Expression ((Expression_Comprehension (_range) (_expression) (_qualifiers))) =
    (sem_Expression_Comprehension ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Qualifiers (_qualifiers))))
sem_Expression ((Expression_Constructor (_range) (_name))) =
    (sem_Expression_Constructor ((sem_Range (_range))) ((sem_Name (_name))))
sem_Expression ((Expression_Do (_range) (_statements))) =
    (sem_Expression_Do ((sem_Range (_range))) ((sem_Statements (_statements))))
sem_Expression ((Expression_Enum (_range) (_from) (_then) (_to))) =
    (sem_Expression_Enum ((sem_Range (_range))) ((sem_Expression (_from))) ((sem_MaybeExpression (_then))) ((sem_MaybeExpression (_to))))
sem_Expression ((Expression_If (_range) (_guardExpression) (_thenExpression) (_elseExpression))) =
    (sem_Expression_If ((sem_Range (_range))) ((sem_Expression (_guardExpression))) ((sem_Expression (_thenExpression))) ((sem_Expression (_elseExpression))))
sem_Expression ((Expression_InfixApplication (_range) (_leftExpression) (_operator) (_rightExpression))) =
    (sem_Expression_InfixApplication ((sem_Range (_range))) ((sem_MaybeExpression (_leftExpression))) ((sem_Expression (_operator))) ((sem_MaybeExpression (_rightExpression))))
sem_Expression ((Expression_Lambda (_range) (_patterns) (_expression))) =
    (sem_Expression_Lambda ((sem_Range (_range))) ((sem_Patterns (_patterns))) ((sem_Expression (_expression))))
sem_Expression ((Expression_Let (_range) (_declarations) (_expression))) =
    (sem_Expression_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))) ((sem_Expression (_expression))))
sem_Expression ((Expression_List (_range) (_expressions))) =
    (sem_Expression_List ((sem_Range (_range))) ((sem_Expressions (_expressions))))
sem_Expression ((Expression_Literal (_range) (_literal))) =
    (sem_Expression_Literal ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Expression ((Expression_Negate (_range) (_expression))) =
    (sem_Expression_Negate ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_NegateFloat (_range) (_expression))) =
    (sem_Expression_NegateFloat ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_NormalApplication (_range) (_function) (_arguments))) =
    (sem_Expression_NormalApplication ((sem_Range (_range))) ((sem_Expression (_function))) ((sem_Expressions (_arguments))))
sem_Expression ((Expression_Parenthesized (_range) (_expression))) =
    (sem_Expression_Parenthesized ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Expression ((Expression_RecordConstruction (_range) (_name) (_recordExpressionBindings))) =
    (sem_Expression_RecordConstruction ((sem_Range (_range))) ((sem_Name (_name))) ((sem_RecordExpressionBindings (_recordExpressionBindings))))
sem_Expression ((Expression_RecordUpdate (_range) (_expression) (_recordExpressionBindings))) =
    (sem_Expression_RecordUpdate ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_RecordExpressionBindings (_recordExpressionBindings))))
sem_Expression ((Expression_Tuple (_range) (_expressions))) =
    (sem_Expression_Tuple ((sem_Range (_range))) ((sem_Expressions (_expressions))))
sem_Expression ((Expression_Typed (_range) (_expression) (_type))) =
    (sem_Expression_Typed ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_Type (_type))))
sem_Expression ((Expression_Variable (_range) (_name))) =
    (sem_Expression_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Expression_Case :: (T_Range) ->
                       (T_Expression) ->
                       (T_Alternatives) ->
                       (T_Expression)
sem_Expression_Case (_range) (_expression) (_alternatives) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Case _range_self _expression_self _alternatives_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _alternatives_collectScopeInfos,_alternatives_kindErrors,_alternatives_miscerrors,_alternatives_self,_alternatives_unboundNames,_alternatives_warnings) =
            (_alternatives (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_expression_collectScopeInfos) (_expression_kindErrors) (_expression_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_expression_warnings))
    in  ( _alternatives_collectScopeInfos,_alternatives_kindErrors,_alternatives_miscerrors,_self,_expression_unboundNames ++ _alternatives_unboundNames,_alternatives_warnings)
sem_Expression_Comprehension :: (T_Range) ->
                                (T_Expression) ->
                                (T_Qualifiers) ->
                                (T_Expression)
sem_Expression_Comprehension (_range) (_expression) (_qualifiers) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Comprehension _range_self _expression_self _qualifiers_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_qualifiers_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _qualifiers_collectScopeInfos,_qualifiers_kindErrors,_qualifiers_miscerrors,_qualifiers_namesInScope,_qualifiers_self,_qualifiers_unboundNames,_qualifiers_warnings) =
            (_qualifiers (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_expression_collectScopeInfos) (_expression_kindErrors) (_expression_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_expression_unboundNames) (_lhs_valueConstructors) (_expression_warnings))
    in  ( _qualifiers_collectScopeInfos,_qualifiers_kindErrors,_qualifiers_miscerrors,_self,_qualifiers_unboundNames,_qualifiers_warnings)
sem_Expression_Constructor :: (T_Range) ->
                              (T_Name) ->
                              (T_Expression)
sem_Expression_Constructor (_range) (_name) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Constructor _range_self _name_self
        (_undefinedConstructorErrors) =
            case lookupFM _lhs_valueConstructors _name_self of
               Nothing -> [ undefinedConstructorInExpr _name_self (_lhs_namesInScope ++ _lhs_allValueConstructors) _lhs_allTypeConstructors ]
               Just _  -> []
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_undefinedConstructorErrors ++ _lhs_miscerrors,_self,[],_lhs_warnings)
sem_Expression_Do :: (T_Range) ->
                     (T_Statements) ->
                     (T_Expression)
sem_Expression_Do (_range) (_statements) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Do _range_self _statements_self
        (_lastStatementErrors) =
            if _statements_lastStatementIsExpr
              then []
              else let range = getStatementRange (last _statements_self)
                   in [ LastStatementNotExpr range ]
        ( _range_self) =
            (_range )
        ( _statements_collectScopeInfos,_statements_kindErrors,_statements_lastStatementIsExpr,_statements_miscerrors,_statements_namesInScope,_statements_self,_statements_unboundNames,_statements_warnings) =
            (_statements (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (False) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) ([]) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _statements_collectScopeInfos,_statements_kindErrors,_lastStatementErrors ++ _statements_miscerrors,_self,_statements_unboundNames,_statements_warnings)
sem_Expression_Enum :: (T_Range) ->
                       (T_Expression) ->
                       (T_MaybeExpression) ->
                       (T_MaybeExpression) ->
                       (T_Expression)
sem_Expression_Enum (_range) (_from) (_then) (_to) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Enum _range_self _from_self _then_self _to_self
        ( _range_self) =
            (_range )
        ( _from_collectScopeInfos,_from_kindErrors,_from_miscerrors,_from_self,_from_unboundNames,_from_warnings) =
            (_from (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _then_collectScopeInfos,_then_kindErrors,_then_miscerrors,_then_self,_then_unboundNames,_then_warnings) =
            (_then (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_from_collectScopeInfos) (_from_kindErrors) (_from_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_from_warnings))
        ( _to_collectScopeInfos,_to_kindErrors,_to_miscerrors,_to_self,_to_unboundNames,_to_warnings) =
            (_to (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_then_collectScopeInfos) (_then_kindErrors) (_then_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_then_warnings))
    in  ( _to_collectScopeInfos,_to_kindErrors,_to_miscerrors,_self,_from_unboundNames ++ _then_unboundNames ++ _to_unboundNames,_to_warnings)
sem_Expression_If :: (T_Range) ->
                     (T_Expression) ->
                     (T_Expression) ->
                     (T_Expression) ->
                     (T_Expression)
sem_Expression_If (_range) (_guardExpression) (_thenExpression) (_elseExpression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_If _range_self _guardExpression_self _thenExpression_self _elseExpression_self
        ( _range_self) =
            (_range )
        ( _guardExpression_collectScopeInfos,_guardExpression_kindErrors,_guardExpression_miscerrors,_guardExpression_self,_guardExpression_unboundNames,_guardExpression_warnings) =
            (_guardExpression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _thenExpression_collectScopeInfos,_thenExpression_kindErrors,_thenExpression_miscerrors,_thenExpression_self,_thenExpression_unboundNames,_thenExpression_warnings) =
            (_thenExpression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_guardExpression_collectScopeInfos) (_guardExpression_kindErrors) (_guardExpression_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_guardExpression_warnings))
        ( _elseExpression_collectScopeInfos,_elseExpression_kindErrors,_elseExpression_miscerrors,_elseExpression_self,_elseExpression_unboundNames,_elseExpression_warnings) =
            (_elseExpression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_thenExpression_collectScopeInfos) (_thenExpression_kindErrors) (_thenExpression_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_thenExpression_warnings))
    in  ( _elseExpression_collectScopeInfos,_elseExpression_kindErrors,_elseExpression_miscerrors,_self,_guardExpression_unboundNames ++ _thenExpression_unboundNames ++ _elseExpression_unboundNames,_elseExpression_warnings)
sem_Expression_InfixApplication :: (T_Range) ->
                                   (T_MaybeExpression) ->
                                   (T_Expression) ->
                                   (T_MaybeExpression) ->
                                   (T_Expression)
sem_Expression_InfixApplication (_range) (_leftExpression) (_operator) (_rightExpression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_InfixApplication _range_self _leftExpression_self _operator_self _rightExpression_self
        ( _range_self) =
            (_range )
        ( _leftExpression_collectScopeInfos,_leftExpression_kindErrors,_leftExpression_miscerrors,_leftExpression_self,_leftExpression_unboundNames,_leftExpression_warnings) =
            (_leftExpression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _operator_collectScopeInfos,_operator_kindErrors,_operator_miscerrors,_operator_self,_operator_unboundNames,_operator_warnings) =
            (_operator (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_leftExpression_collectScopeInfos) (_leftExpression_kindErrors) (_leftExpression_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_leftExpression_warnings))
        ( _rightExpression_collectScopeInfos,_rightExpression_kindErrors,_rightExpression_miscerrors,_rightExpression_self,_rightExpression_unboundNames,_rightExpression_warnings) =
            (_rightExpression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_operator_collectScopeInfos) (_operator_kindErrors) (_operator_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_operator_warnings))
    in  ( _rightExpression_collectScopeInfos,_rightExpression_kindErrors,_rightExpression_miscerrors,_self,_leftExpression_unboundNames ++ _operator_unboundNames ++ _rightExpression_unboundNames,_rightExpression_warnings)
sem_Expression_Lambda :: (T_Range) ->
                         (T_Patterns) ->
                         (T_Expression) ->
                         (T_Expression)
sem_Expression_Lambda (_range) (_patterns) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Lambda _range_self _patterns_self _expression_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _patterns_patVarNames _expression_unboundNames _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _patterns_collectScopeInfos,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_self,_patterns_unboundNames,_patterns_warnings) =
            (_patterns (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (False) (_lhs_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_patterns_collectScopeInfos) (_lhs_kindErrors) (_patterns_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_patterns_warnings))
    in  ( (_scopeInfo, Variable)   : _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_self,_unboundNames,_expression_warnings)
sem_Expression_Let :: (T_Range) ->
                      (T_Declarations) ->
                      (T_Expression) ->
                      (T_Expression)
sem_Expression_Let (_range) (_declarations) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Let _range_self _declarations_self _expression_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _declarations_declVarNames (_declarations_unboundNames ++ _expression_unboundNames) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ((_,_doubles)) =
            uniqueAppearance (map fst _declarations_typeSignatures)
        (_typeSignatureErrors) =
            checkTypeSignatures _declarations_declVarNames _declarations_typeSignatures
        ((_collectTypeConstructors,_collectValueConstructors,_collectTypeSynonyms,_collectConstructorEnv,_derivedFunctions,_operatorFixities)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Expression"
        ( _range_self) =
            (_range )
        ( _declarations_collectScopeInfos,_declarations_collectTypeConstructors,_declarations_collectTypeSynonyms,_declarations_collectValueConstructors,_declarations_declVarNames,_declarations_kindErrors,_declarations_miscerrors,_declarations_operatorFixities,_declarations_previousWasAlsoFB,_declarations_self,_declarations_suspiciousFBs,_declarations_typeSignatures,_declarations_unboundNames,_declarations_warnings) =
            (_declarations (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_collectTypeConstructors) (_collectTypeSynonyms) (_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_namesInScope) (_operatorFixities) (Nothing) ([]) (_lhs_typeConstructors) ([]) (_lhs_valueConstructors) (_lhs_warnings))
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_declarations_collectScopeInfos) (_declarations_kindErrors) (_declarations_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_declarations_warnings))
    in  ( (_scopeInfo, Definition) : _expression_collectScopeInfos
         ,_expression_kindErrors
         ,_typeSignatureErrors ++ _expression_miscerrors
         ,_self
         ,_unboundNames
         ,_expression_warnings ++
          _suspiciousErrors
         )
sem_Expression_List :: (T_Range) ->
                       (T_Expressions) ->
                       (T_Expression)
sem_Expression_List (_range) (_expressions) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_List _range_self _expressions_self
        ( _range_self) =
            (_range )
        ( _expressions_collectScopeInfos,_expressions_kindErrors,_expressions_miscerrors,_expressions_self,_expressions_unboundNames,_expressions_warnings) =
            (_expressions (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _expressions_collectScopeInfos,_expressions_kindErrors,_expressions_miscerrors,_self,_expressions_unboundNames,_expressions_warnings)
sem_Expression_Literal :: (T_Range) ->
                          (T_Literal) ->
                          (T_Expression)
sem_Expression_Literal (_range) (_literal) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Literal _range_self _literal_self
        ( _range_self) =
            (_range )
        ( _literal_collectScopeInfos,_literal_miscerrors,_literal_self) =
            (_literal (_lhs_collectScopeInfos) (_lhs_miscerrors))
    in  ( _literal_collectScopeInfos,_lhs_kindErrors,_literal_miscerrors,_self,[],_lhs_warnings)
sem_Expression_Negate :: (T_Range) ->
                         (T_Expression) ->
                         (T_Expression)
sem_Expression_Negate (_range) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Negate _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _expression_collectScopeInfos
         ,_expression_kindErrors
         ,( if nameFromString "negate" `elem` _lhs_namesInScope
            then []
            else [ NegateNeeded _range_self ]
          )
          ++ _expression_miscerrors
         ,_self
         ,_expression_unboundNames
         ,_expression_warnings
         )
sem_Expression_NegateFloat :: (T_Range) ->
                              (T_Expression) ->
                              (T_Expression)
sem_Expression_NegateFloat (_range) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_NegateFloat _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_self,_expression_unboundNames,_expression_warnings)
sem_Expression_NormalApplication :: (T_Range) ->
                                    (T_Expression) ->
                                    (T_Expressions) ->
                                    (T_Expression)
sem_Expression_NormalApplication (_range) (_function) (_arguments) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_NormalApplication _range_self _function_self _arguments_self
        ( _range_self) =
            (_range )
        ( _function_collectScopeInfos,_function_kindErrors,_function_miscerrors,_function_self,_function_unboundNames,_function_warnings) =
            (_function (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _arguments_collectScopeInfos,_arguments_kindErrors,_arguments_miscerrors,_arguments_self,_arguments_unboundNames,_arguments_warnings) =
            (_arguments (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_function_collectScopeInfos) (_function_kindErrors) (_function_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_function_warnings))
    in  ( _arguments_collectScopeInfos,_arguments_kindErrors,_arguments_miscerrors,_self,_function_unboundNames ++ _arguments_unboundNames,_arguments_warnings)
sem_Expression_Parenthesized :: (T_Range) ->
                                (T_Expression) ->
                                (T_Expression)
sem_Expression_Parenthesized (_range) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Parenthesized _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_self,_expression_unboundNames,_expression_warnings)
sem_Expression_RecordConstruction :: (T_Range) ->
                                     (T_Name) ->
                                     (T_RecordExpressionBindings) ->
                                     (T_Expression)
sem_Expression_RecordConstruction (_range) (_name) (_recordExpressionBindings) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_RecordConstruction _range_self _name_self _recordExpressionBindings_self
        ((_assumptions,_constraints,_beta)) =
            internalError "PartialSyntax.ag" "n/a" "Expression.RecordConstruction"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _recordExpressionBindings_collectScopeInfos,_recordExpressionBindings_self,_recordExpressionBindings_unboundNames) =
            (_recordExpressionBindings (_lhs_collectScopeInfos) (_lhs_namesInScope))
    in  ( _recordExpressionBindings_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_self,_recordExpressionBindings_unboundNames,_lhs_warnings)
sem_Expression_RecordUpdate :: (T_Range) ->
                               (T_Expression) ->
                               (T_RecordExpressionBindings) ->
                               (T_Expression)
sem_Expression_RecordUpdate (_range) (_expression) (_recordExpressionBindings) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_RecordUpdate _range_self _expression_self _recordExpressionBindings_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _recordExpressionBindings_collectScopeInfos,_recordExpressionBindings_self,_recordExpressionBindings_unboundNames) =
            (_recordExpressionBindings (_expression_collectScopeInfos) (_lhs_namesInScope))
    in  ( _recordExpressionBindings_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_self,_expression_unboundNames ++ _recordExpressionBindings_unboundNames,_expression_warnings)
sem_Expression_Tuple :: (T_Range) ->
                        (T_Expressions) ->
                        (T_Expression)
sem_Expression_Tuple (_range) (_expressions) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Tuple _range_self _expressions_self
        ( _range_self) =
            (_range )
        ( _expressions_collectScopeInfos,_expressions_kindErrors,_expressions_miscerrors,_expressions_self,_expressions_unboundNames,_expressions_warnings) =
            (_expressions (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _expressions_collectScopeInfos,_expressions_kindErrors,_expressions_miscerrors,_self,_expressions_unboundNames,_expressions_warnings)
sem_Expression_Typed :: (T_Range) ->
                        (T_Expression) ->
                        (T_Type) ->
                        (T_Expression)
sem_Expression_Typed (_range) (_expression) (_type) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Typed _range_self _expression_self _type_self
        (_newErrors) =
            checkType _lhs_typeConstructors (_lhs_namesInScope ++ _lhs_allValueConstructors) _type_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _type_miscerrors,_type_self,_type_typevariables) =
            (_type (_expression_miscerrors))
    in  ( _expression_collectScopeInfos,_newErrors ++ _expression_kindErrors,_type_miscerrors,_self,_expression_unboundNames,_expression_warnings)
sem_Expression_Variable :: (T_Range) ->
                           (T_Name) ->
                           (T_Expression)
sem_Expression_Variable (_range) (_name) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Expression_Variable _range_self _name_self
        (_undefinedErrors) =
            if _name_self `elem` _lhs_namesInScope
              then []
              else [ Undefined Variable _name_self _lhs_namesInScope [] ]
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_undefinedErrors ++ _lhs_miscerrors,_self,[ _name_self ],_lhs_warnings)
-- Expressions -------------------------------------------------
-- semantic domain
type T_Expressions = (Names) ->
                     (Names) ->
                     ([(ScopeInfo, Entity)]) ->
                     ([Error]) ->
                     ([Error]) ->
                     (Names) ->
                     (FiniteMap Name Int) ->
                     (FiniteMap Name TpScheme) ->
                     ([Warning]) ->
                     ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(Expressions),(Names),([Warning]))
-- cata
sem_Expressions :: (Expressions) ->
                   (T_Expressions)
sem_Expressions (list) =
    (foldr (sem_Expressions_Cons) (sem_Expressions_Nil) ((map sem_Expression list)))
sem_Expressions_Cons :: (T_Expression) ->
                        (T_Expressions) ->
                        (T_Expressions)
sem_Expressions_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_kindErrors,_hd_miscerrors,_hd_self,_hd_unboundNames,_hd_warnings) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_tl_self,_tl_unboundNames,_tl_warnings) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectScopeInfos) (_hd_kindErrors) (_hd_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_hd_warnings))
    in  ( _tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_warnings)
sem_Expressions_Nil :: (T_Expressions)
sem_Expressions_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_self,[],_lhs_warnings)
-- FieldDeclaration --------------------------------------------
-- semantic domain
type T_FieldDeclaration = ([Error]) ->
                          (Names) ->
                          ( ([Error]),(FieldDeclaration),(Names))
-- cata
sem_FieldDeclaration :: (FieldDeclaration) ->
                        (T_FieldDeclaration)
sem_FieldDeclaration ((FieldDeclaration_FieldDeclaration (_range) (_names) (_type))) =
    (sem_FieldDeclaration_FieldDeclaration ((sem_Range (_range))) ((sem_Names (_names))) ((sem_AnnotatedType (_type))))
sem_FieldDeclaration_FieldDeclaration :: (T_Range) ->
                                         (T_Names) ->
                                         (T_AnnotatedType) ->
                                         (T_FieldDeclaration)
sem_FieldDeclaration_FieldDeclaration (_range) (_names) (_type) (_lhs_miscerrors) (_lhs_namesInScope) =
    let (_self) =
            FieldDeclaration_FieldDeclaration _range_self _names_self _type_self
        ((_kindErrors,_tyconEnv,_constructorenv,_importEnvironment,_valueConstructors,_allValueConstructors,_typeConstructors,_allTypeConstructors)) =
            internalError "PartialSyntax.ag" "n/a" "FieldDeclaration.FieldDeclaration"
        ( _range_self) =
            (_range )
        ( _names_self) =
            (_names )
        ( _type_kindErrors,_type_miscerrors,_type_self,_type_type,_type_typevariables,_type_unboundNames) =
            (_type (_allTypeConstructors) (_allValueConstructors) (_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_typeConstructors) (_valueConstructors))
    in  ( _type_miscerrors,_self,_type_unboundNames)
-- FieldDeclarations -------------------------------------------
-- semantic domain
type T_FieldDeclarations = ([Error]) ->
                           (Names) ->
                           ( ([Error]),(FieldDeclarations),(Names))
-- cata
sem_FieldDeclarations :: (FieldDeclarations) ->
                         (T_FieldDeclarations)
sem_FieldDeclarations (list) =
    (foldr (sem_FieldDeclarations_Cons) (sem_FieldDeclarations_Nil) ((map sem_FieldDeclaration list)))
sem_FieldDeclarations_Cons :: (T_FieldDeclaration) ->
                              (T_FieldDeclarations) ->
                              (T_FieldDeclarations)
sem_FieldDeclarations_Cons (_hd) (_tl) (_lhs_miscerrors) (_lhs_namesInScope) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_miscerrors,_hd_self,_hd_unboundNames) =
            (_hd (_lhs_miscerrors) (_lhs_namesInScope))
        ( _tl_miscerrors,_tl_self,_tl_unboundNames) =
            (_tl (_hd_miscerrors) (_lhs_namesInScope))
    in  ( _tl_miscerrors,_self,_hd_unboundNames ++ _tl_unboundNames)
sem_FieldDeclarations_Nil :: (T_FieldDeclarations)
sem_FieldDeclarations_Nil (_lhs_miscerrors) (_lhs_namesInScope) =
    let (_self) =
            []
    in  ( _lhs_miscerrors,_self,[])
-- Fixity ------------------------------------------------------
-- semantic domain
type T_Fixity = ( (Fixity))
-- cata
sem_Fixity :: (Fixity) ->
              (T_Fixity)
sem_Fixity ((Fixity_Infix (_range))) =
    (sem_Fixity_Infix ((sem_Range (_range))))
sem_Fixity ((Fixity_Infixl (_range))) =
    (sem_Fixity_Infixl ((sem_Range (_range))))
sem_Fixity ((Fixity_Infixr (_range))) =
    (sem_Fixity_Infixr ((sem_Range (_range))))
sem_Fixity_Infix :: (T_Range) ->
                    (T_Fixity)
sem_Fixity_Infix (_range) =
    let (_self) =
            Fixity_Infix _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Fixity_Infixl :: (T_Range) ->
                     (T_Fixity)
sem_Fixity_Infixl (_range) =
    let (_self) =
            Fixity_Infixl _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
sem_Fixity_Infixr :: (T_Range) ->
                     (T_Fixity)
sem_Fixity_Infixr (_range) =
    let (_self) =
            Fixity_Infixr _range_self
        ( _range_self) =
            (_range )
    in  ( _self)
-- FunctionBinding ---------------------------------------------
-- semantic domain
type T_FunctionBinding = (Names) ->
                         (Names) ->
                         ([(ScopeInfo, Entity)]) ->
                         ([Error]) ->
                         ([Error]) ->
                         (Names) ->
                         (FiniteMap Name Int) ->
                         (FiniteMap Name TpScheme) ->
                         ([Warning]) ->
                         ( (Int),([(ScopeInfo, Entity)]),([Error]),([Error]),(Name),(FunctionBinding),(Names),([Warning]))
-- cata
sem_FunctionBinding :: (FunctionBinding) ->
                       (T_FunctionBinding)
sem_FunctionBinding ((FunctionBinding_FunctionBinding (_range) (_lefthandside) (_righthandside))) =
    (sem_FunctionBinding_FunctionBinding ((sem_Range (_range))) ((sem_LeftHandSide (_lefthandside))) ((sem_RightHandSide (_righthandside))))
sem_FunctionBinding_FunctionBinding :: (T_Range) ->
                                       (T_LeftHandSide) ->
                                       (T_RightHandSide) ->
                                       (T_FunctionBinding)
sem_FunctionBinding_FunctionBinding (_range) (_lefthandside) (_righthandside) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            FunctionBinding_FunctionBinding _range_self _lefthandside_self _righthandside_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _lefthandside_patVarNames _righthandside_unboundNames _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _lefthandside_collectScopeInfos,_lefthandside_miscerrors,_lefthandside_name,_lefthandside_numberOfPatterns,_lefthandside_patVarNames,_lefthandside_self,_lefthandside_unboundNames,_lefthandside_warnings) =
            (_lefthandside (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _righthandside_collectScopeInfos,_righthandside_kindErrors,_righthandside_miscerrors,_righthandside_self,_righthandside_unboundNames,_righthandside_warnings) =
            (_righthandside (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lefthandside_collectScopeInfos) (_lhs_kindErrors) (_lefthandside_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lefthandside_warnings))
    in  ( _lefthandside_numberOfPatterns,(_scopeInfo, Variable)   : _righthandside_collectScopeInfos,_righthandside_kindErrors,_righthandside_miscerrors,_lefthandside_name,_self,_unboundNames,_righthandside_warnings)
-- FunctionBindings --------------------------------------------
-- semantic domain
type T_FunctionBindings = (Names) ->
                          (Names) ->
                          ([(ScopeInfo, Entity)]) ->
                          ([Error]) ->
                          ([Error]) ->
                          (Names) ->
                          (FiniteMap Name Int) ->
                          (FiniteMap Name TpScheme) ->
                          ([Warning]) ->
                          ( ( [Int] ),([(ScopeInfo, Entity)]),([Error]),([Error]),(Name),(FunctionBindings),(Names),([Warning]))
-- cata
sem_FunctionBindings :: (FunctionBindings) ->
                        (T_FunctionBindings)
sem_FunctionBindings (list) =
    (foldr (sem_FunctionBindings_Cons) (sem_FunctionBindings_Nil) ((map sem_FunctionBinding list)))
sem_FunctionBindings_Cons :: (T_FunctionBinding) ->
                             (T_FunctionBindings) ->
                             (T_FunctionBindings)
sem_FunctionBindings_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_arity,_hd_collectScopeInfos,_hd_kindErrors,_hd_miscerrors,_hd_name,_hd_self,_hd_unboundNames,_hd_warnings) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _tl_arities,_tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_tl_name,_tl_self,_tl_unboundNames,_tl_warnings) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectScopeInfos) (_hd_kindErrors) (_hd_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_hd_warnings))
    in  ( _hd_arity : _tl_arities,_tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_hd_name,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_warnings)
sem_FunctionBindings_Nil :: (T_FunctionBindings)
sem_FunctionBindings_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            []
    in  ( [],_lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,internalError "StaticChecks.ag" "n/a" "empty FunctionBindings",_self,[],_lhs_warnings)
-- GuardedExpression -------------------------------------------
-- semantic domain
type T_GuardedExpression = (Names) ->
                           (Names) ->
                           ([(ScopeInfo, Entity)]) ->
                           ([Error]) ->
                           ([Error]) ->
                           (Names) ->
                           (FiniteMap Name Int) ->
                           (FiniteMap Name TpScheme) ->
                           ([Warning]) ->
                           ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(GuardedExpression),(Names),([Warning]))
-- cata
sem_GuardedExpression :: (GuardedExpression) ->
                         (T_GuardedExpression)
sem_GuardedExpression ((GuardedExpression_GuardedExpression (_range) (_guard) (_expression))) =
    (sem_GuardedExpression_GuardedExpression ((sem_Range (_range))) ((sem_Expression (_guard))) ((sem_Expression (_expression))))
sem_GuardedExpression_GuardedExpression :: (T_Range) ->
                                           (T_Expression) ->
                                           (T_Expression) ->
                                           (T_GuardedExpression)
sem_GuardedExpression_GuardedExpression (_range) (_guard) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            GuardedExpression_GuardedExpression _range_self _guard_self _expression_self
        ( _range_self) =
            (_range )
        ( _guard_collectScopeInfos,_guard_kindErrors,_guard_miscerrors,_guard_self,_guard_unboundNames,_guard_warnings) =
            (_guard (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_guard_collectScopeInfos) (_guard_kindErrors) (_guard_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_guard_warnings))
    in  ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_self,_guard_unboundNames ++ _expression_unboundNames,_expression_warnings)
-- GuardedExpressions ------------------------------------------
-- semantic domain
type T_GuardedExpressions = (Names) ->
                            (Names) ->
                            ([(ScopeInfo, Entity)]) ->
                            ([Error]) ->
                            ([Error]) ->
                            (Names) ->
                            (FiniteMap Name Int) ->
                            (FiniteMap Name TpScheme) ->
                            ([Warning]) ->
                            ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(GuardedExpressions),(Names),([Warning]))
-- cata
sem_GuardedExpressions :: (GuardedExpressions) ->
                          (T_GuardedExpressions)
sem_GuardedExpressions (list) =
    (foldr (sem_GuardedExpressions_Cons) (sem_GuardedExpressions_Nil) ((map sem_GuardedExpression list)))
sem_GuardedExpressions_Cons :: (T_GuardedExpression) ->
                               (T_GuardedExpressions) ->
                               (T_GuardedExpressions)
sem_GuardedExpressions_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_kindErrors,_hd_miscerrors,_hd_self,_hd_unboundNames,_hd_warnings) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_tl_self,_tl_unboundNames,_tl_warnings) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectScopeInfos) (_hd_kindErrors) (_hd_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_hd_warnings))
    in  ( _tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_warnings)
sem_GuardedExpressions_Nil :: (T_GuardedExpressions)
sem_GuardedExpressions_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_self,[],_lhs_warnings)
-- Import ------------------------------------------------------
-- semantic domain
type T_Import = ( (Import))
-- cata
sem_Import :: (Import) ->
              (T_Import)
sem_Import ((Import_TypeOrClass (_range) (_name) (_names))) =
    (sem_Import_TypeOrClass ((sem_Range (_range))) ((sem_Name (_name))) ((sem_MaybeNames (_names))))
sem_Import ((Import_TypeOrClassComplete (_range) (_name))) =
    (sem_Import_TypeOrClassComplete ((sem_Range (_range))) ((sem_Name (_name))))
sem_Import ((Import_Variable (_range) (_name))) =
    (sem_Import_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Import_TypeOrClass :: (T_Range) ->
                          (T_Name) ->
                          (T_MaybeNames) ->
                          (T_Import)
sem_Import_TypeOrClass (_range) (_name) (_names) =
    let (_self) =
            Import_TypeOrClass _range_self _name_self _names_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _names_self) =
            (_names )
    in  ( _self)
sem_Import_TypeOrClassComplete :: (T_Range) ->
                                  (T_Name) ->
                                  (T_Import)
sem_Import_TypeOrClassComplete (_range) (_name) =
    let (_self) =
            Import_TypeOrClassComplete _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
sem_Import_Variable :: (T_Range) ->
                       (T_Name) ->
                       (T_Import)
sem_Import_Variable (_range) (_name) =
    let (_self) =
            Import_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _self)
-- ImportDeclaration -------------------------------------------
-- semantic domain
type T_ImportDeclaration = (Names) ->
                           ( (Names),(ImportDeclaration))
-- cata
sem_ImportDeclaration :: (ImportDeclaration) ->
                         (T_ImportDeclaration)
sem_ImportDeclaration ((ImportDeclaration_Empty (_range))) =
    (sem_ImportDeclaration_Empty ((sem_Range (_range))))
sem_ImportDeclaration ((ImportDeclaration_Import (_range) (_qualified) (_name) (_asname) (_importspecification))) =
    (sem_ImportDeclaration_Import ((sem_Range (_range))) (_qualified) ((sem_Name (_name))) ((sem_MaybeName (_asname))) ((sem_MaybeImportSpecification (_importspecification))))
sem_ImportDeclaration_Empty :: (T_Range) ->
                               (T_ImportDeclaration)
sem_ImportDeclaration_Empty (_range) (_lhs_importedModules) =
    let (_self) =
            ImportDeclaration_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_importedModules,_self)
sem_ImportDeclaration_Import :: (T_Range) ->
                                (Bool) ->
                                (T_Name) ->
                                (T_MaybeName) ->
                                (T_MaybeImportSpecification) ->
                                (T_ImportDeclaration)
sem_ImportDeclaration_Import (_range) (_qualified) (_name) (_asname) (_importspecification) (_lhs_importedModules) =
    let (_self) =
            ImportDeclaration_Import _range_self _qualified _name_self _asname_self _importspecification_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _asname_self) =
            (_asname )
        ( _importspecification_self) =
            (_importspecification )
    in  ( _name_self : _lhs_importedModules,_self)
-- ImportDeclarations ------------------------------------------
-- semantic domain
type T_ImportDeclarations = (Names) ->
                            ( (Names),(ImportDeclarations))
-- cata
sem_ImportDeclarations :: (ImportDeclarations) ->
                          (T_ImportDeclarations)
sem_ImportDeclarations (list) =
    (foldr (sem_ImportDeclarations_Cons) (sem_ImportDeclarations_Nil) ((map sem_ImportDeclaration list)))
sem_ImportDeclarations_Cons :: (T_ImportDeclaration) ->
                               (T_ImportDeclarations) ->
                               (T_ImportDeclarations)
sem_ImportDeclarations_Cons (_hd) (_tl) (_lhs_importedModules) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_importedModules,_hd_self) =
            (_hd (_lhs_importedModules))
        ( _tl_importedModules,_tl_self) =
            (_tl (_hd_importedModules))
    in  ( _tl_importedModules,_self)
sem_ImportDeclarations_Nil :: (T_ImportDeclarations)
sem_ImportDeclarations_Nil (_lhs_importedModules) =
    let (_self) =
            []
    in  ( _lhs_importedModules,_self)
-- ImportSpecification -----------------------------------------
-- semantic domain
type T_ImportSpecification = ( (ImportSpecification))
-- cata
sem_ImportSpecification :: (ImportSpecification) ->
                           (T_ImportSpecification)
sem_ImportSpecification ((ImportSpecification_Import (_range) (_hiding) (_imports))) =
    (sem_ImportSpecification_Import ((sem_Range (_range))) (_hiding) ((sem_Imports (_imports))))
sem_ImportSpecification_Import :: (T_Range) ->
                                  (Bool) ->
                                  (T_Imports) ->
                                  (T_ImportSpecification)
sem_ImportSpecification_Import (_range) (_hiding) (_imports) =
    let (_self) =
            ImportSpecification_Import _range_self _hiding _imports_self
        ( _range_self) =
            (_range )
        ( _imports_self) =
            (_imports )
    in  ( _self)
-- Imports -----------------------------------------------------
-- semantic domain
type T_Imports = ( (Imports))
-- cata
sem_Imports :: (Imports) ->
               (T_Imports)
sem_Imports (list) =
    (foldr (sem_Imports_Cons) (sem_Imports_Nil) ((map sem_Import list)))
sem_Imports_Cons :: (T_Import) ->
                    (T_Imports) ->
                    (T_Imports)
sem_Imports_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Imports_Nil :: (T_Imports)
sem_Imports_Nil  =
    let (_self) =
            []
    in  ( _self)
-- LeftHandSide ------------------------------------------------
-- semantic domain
type T_LeftHandSide = (Names) ->
                      (Names) ->
                      ([(ScopeInfo, Entity)]) ->
                      ([Error]) ->
                      (Names) ->
                      (FiniteMap Name Int) ->
                      (FiniteMap Name TpScheme) ->
                      ([Warning]) ->
                      ( ([(ScopeInfo, Entity)]),([Error]),(Name),(Int),(Names),(LeftHandSide),(Names),([Warning]))
-- cata
sem_LeftHandSide :: (LeftHandSide) ->
                    (T_LeftHandSide)
sem_LeftHandSide ((LeftHandSide_Function (_range) (_name) (_patterns))) =
    (sem_LeftHandSide_Function ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Patterns (_patterns))))
sem_LeftHandSide ((LeftHandSide_Infix (_range) (_leftPattern) (_operator) (_rightPattern))) =
    (sem_LeftHandSide_Infix ((sem_Range (_range))) ((sem_Pattern (_leftPattern))) ((sem_Name (_operator))) ((sem_Pattern (_rightPattern))))
sem_LeftHandSide ((LeftHandSide_Parenthesized (_range) (_lefthandside) (_patterns))) =
    (sem_LeftHandSide_Parenthesized ((sem_Range (_range))) ((sem_LeftHandSide (_lefthandside))) ((sem_Patterns (_patterns))))
sem_LeftHandSide_Function :: (T_Range) ->
                             (T_Name) ->
                             (T_Patterns) ->
                             (T_LeftHandSide)
sem_LeftHandSide_Function (_range) (_name) (_patterns) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            LeftHandSide_Function _range_self _name_self _patterns_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _patterns_collectScopeInfos,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_self,_patterns_unboundNames,_patterns_warnings) =
            (_patterns (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (False) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _patterns_collectScopeInfos,_patterns_miscerrors,_name_self,_patterns_numberOfPatterns,_patterns_patVarNames,_self,_patterns_unboundNames,_patterns_warnings)
sem_LeftHandSide_Infix :: (T_Range) ->
                          (T_Pattern) ->
                          (T_Name) ->
                          (T_Pattern) ->
                          (T_LeftHandSide)
sem_LeftHandSide_Infix (_range) (_leftPattern) (_operator) (_rightPattern) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            LeftHandSide_Infix _range_self _leftPattern_self _operator_self _rightPattern_self
        ( _range_self) =
            (_range )
        ( _leftPattern_collectScopeInfos,_leftPattern_miscerrors,_leftPattern_patVarNames,_leftPattern_self,_leftPattern_unboundNames,_leftPattern_warnings) =
            (_leftPattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (False) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _operator_self) =
            (_operator )
        ( _rightPattern_collectScopeInfos,_rightPattern_miscerrors,_rightPattern_patVarNames,_rightPattern_self,_rightPattern_unboundNames,_rightPattern_warnings) =
            (_rightPattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_leftPattern_collectScopeInfos) (False) (_leftPattern_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_leftPattern_warnings))
    in  ( _rightPattern_collectScopeInfos,_rightPattern_miscerrors,_operator_self,2,_leftPattern_patVarNames ++ _rightPattern_patVarNames,_self,_leftPattern_unboundNames ++ _rightPattern_unboundNames,_rightPattern_warnings)
sem_LeftHandSide_Parenthesized :: (T_Range) ->
                                  (T_LeftHandSide) ->
                                  (T_Patterns) ->
                                  (T_LeftHandSide)
sem_LeftHandSide_Parenthesized (_range) (_lefthandside) (_patterns) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            LeftHandSide_Parenthesized _range_self _lefthandside_self _patterns_self
        ( _range_self) =
            (_range )
        ( _lefthandside_collectScopeInfos,_lefthandside_miscerrors,_lefthandside_name,_lefthandside_numberOfPatterns,_lefthandside_patVarNames,_lefthandside_self,_lefthandside_unboundNames,_lefthandside_warnings) =
            (_lefthandside (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _patterns_collectScopeInfos,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_self,_patterns_unboundNames,_patterns_warnings) =
            (_patterns (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lefthandside_collectScopeInfos) (False) (_lefthandside_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lefthandside_warnings))
    in  ( _patterns_collectScopeInfos,_patterns_miscerrors,_lefthandside_name,_lefthandside_numberOfPatterns + _patterns_numberOfPatterns,_lefthandside_patVarNames ++ _patterns_patVarNames,_self,_lefthandside_unboundNames ++ _patterns_unboundNames,_patterns_warnings)
-- Literal -----------------------------------------------------
-- semantic domain
type T_Literal = ([(ScopeInfo, Entity)]) ->
                 ([Error]) ->
                 ( ([(ScopeInfo, Entity)]),([Error]),(Literal))
-- cata
sem_Literal :: (Literal) ->
               (T_Literal)
sem_Literal ((Literal_Char (_range) (_value))) =
    (sem_Literal_Char ((sem_Range (_range))) (_value))
sem_Literal ((Literal_Float (_range) (_value))) =
    (sem_Literal_Float ((sem_Range (_range))) (_value))
sem_Literal ((Literal_Int (_range) (_value))) =
    (sem_Literal_Int ((sem_Range (_range))) (_value))
sem_Literal ((Literal_String (_range) (_value))) =
    (sem_Literal_String ((sem_Range (_range))) (_value))
sem_Literal_Char :: (T_Range) ->
                    (String) ->
                    (T_Literal)
sem_Literal_Char (_range) (_value) (_lhs_collectScopeInfos) (_lhs_miscerrors) =
    let (_self) =
            Literal_Char _range_self _value
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_lhs_miscerrors,_self)
sem_Literal_Float :: (T_Range) ->
                     (String) ->
                     (T_Literal)
sem_Literal_Float (_range) (_value) (_lhs_collectScopeInfos) (_lhs_miscerrors) =
    let (_self) =
            Literal_Float _range_self _value
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_lhs_miscerrors,_self)
sem_Literal_Int :: (T_Range) ->
                   (String) ->
                   (T_Literal)
sem_Literal_Int (_range) (_value) (_lhs_collectScopeInfos) (_lhs_miscerrors) =
    let (_self) =
            Literal_Int _range_self _value
        (_intLiteralTooBigErrors) =
            let val = read _value :: Integer in
            if length _value > 9 && (val > maxInt || val < minInt)  then
               [ IntLiteralTooBig _range _value ]
            else
               []
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_intLiteralTooBigErrors ++ _lhs_miscerrors,_self)
sem_Literal_String :: (T_Range) ->
                      (String) ->
                      (T_Literal)
sem_Literal_String (_range) (_value) (_lhs_collectScopeInfos) (_lhs_miscerrors) =
    let (_self) =
            Literal_String _range_self _value
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_lhs_miscerrors,_self)
-- MaybeDeclarations -------------------------------------------
-- semantic domain
type T_MaybeDeclarations = (Names) ->
                           (Names) ->
                           ([(ScopeInfo, Entity)]) ->
                           ([Error]) ->
                           ([Error]) ->
                           (Names) ->
                           (FiniteMap Name Int) ->
                           (Names) ->
                           (FiniteMap Name TpScheme) ->
                           ([Warning]) ->
                           ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(Names),(MaybeDeclarations),(Names),([Warning]))
-- cata
sem_MaybeDeclarations :: (MaybeDeclarations) ->
                         (T_MaybeDeclarations)
sem_MaybeDeclarations ((MaybeDeclarations_Just (_declarations))) =
    (sem_MaybeDeclarations_Just ((sem_Declarations (_declarations))))
sem_MaybeDeclarations ((MaybeDeclarations_Nothing )) =
    (sem_MaybeDeclarations_Nothing )
sem_MaybeDeclarations_Just :: (T_Declarations) ->
                              (T_MaybeDeclarations)
sem_MaybeDeclarations_Just (_declarations) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            MaybeDeclarations_Just _declarations_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _declarations_declVarNames (_declarations_unboundNames ++ _lhs_unboundNames) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ((_,_doubles)) =
            uniqueAppearance (map fst _declarations_typeSignatures)
        (_typeSignatureErrors) =
            checkTypeSignatures _declarations_declVarNames _declarations_typeSignatures
        ((_collectTypeConstructors,_collectValueConstructors,_collectTypeSynonyms,_collectConstructorEnv,_derivedFunctions,_operatorFixities)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel MaybeDeclaration"
        ( _declarations_collectScopeInfos,_declarations_collectTypeConstructors,_declarations_collectTypeSynonyms,_declarations_collectValueConstructors,_declarations_declVarNames,_declarations_kindErrors,_declarations_miscerrors,_declarations_operatorFixities,_declarations_previousWasAlsoFB,_declarations_self,_declarations_suspiciousFBs,_declarations_typeSignatures,_declarations_unboundNames,_declarations_warnings) =
            (_declarations (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_collectTypeConstructors) (_collectTypeSynonyms) (_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_namesInScope) (_operatorFixities) (Nothing) ([]) (_lhs_typeConstructors) ([]) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( (_scopeInfo, Definition) : _declarations_collectScopeInfos
         ,_declarations_kindErrors
         ,_typeSignatureErrors ++ _declarations_miscerrors
         ,_namesInScope
         ,_self
         ,_unboundNames
         ,_declarations_warnings ++
          _suspiciousErrors
         )
sem_MaybeDeclarations_Nothing :: (T_MaybeDeclarations)
sem_MaybeDeclarations_Nothing (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            MaybeDeclarations_Nothing
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_lhs_namesInScope,_self,_lhs_unboundNames,_lhs_warnings)
-- MaybeExports ------------------------------------------------
-- semantic domain
type T_MaybeExports = (Names) ->
                      (Names) ->
                      (Names) ->
                      (Names) ->
                      ( ([Error]),(MaybeExports))
-- cata
sem_MaybeExports :: (MaybeExports) ->
                    (T_MaybeExports)
sem_MaybeExports ((MaybeExports_Just (_exports))) =
    (sem_MaybeExports_Just ((sem_Exports (_exports))))
sem_MaybeExports ((MaybeExports_Nothing )) =
    (sem_MaybeExports_Nothing )
sem_MaybeExports_Just :: (T_Exports) ->
                         (T_MaybeExports)
sem_MaybeExports_Just (_exports) (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope) =
    let (_self) =
            MaybeExports_Just _exports_self
        ( _exports_exportErrors,_exports_self) =
            (_exports (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope))
    in  ( _exports_exportErrors,_self)
sem_MaybeExports_Nothing :: (T_MaybeExports)
sem_MaybeExports_Nothing (_lhs_consInScope) (_lhs_modulesInScope) (_lhs_namesInScop) (_lhs_tyconsInScope) =
    let (_self) =
            MaybeExports_Nothing
    in  ( [],_self)
-- MaybeExpression ---------------------------------------------
-- semantic domain
type T_MaybeExpression = (Names) ->
                         (Names) ->
                         ([(ScopeInfo, Entity)]) ->
                         ([Error]) ->
                         ([Error]) ->
                         (Names) ->
                         (FiniteMap Name Int) ->
                         (FiniteMap Name TpScheme) ->
                         ([Warning]) ->
                         ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(MaybeExpression),(Names),([Warning]))
-- cata
sem_MaybeExpression :: (MaybeExpression) ->
                       (T_MaybeExpression)
sem_MaybeExpression ((MaybeExpression_Just (_expression))) =
    (sem_MaybeExpression_Just ((sem_Expression (_expression))))
sem_MaybeExpression ((MaybeExpression_Nothing )) =
    (sem_MaybeExpression_Nothing )
sem_MaybeExpression_Just :: (T_Expression) ->
                            (T_MaybeExpression)
sem_MaybeExpression_Just (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            MaybeExpression_Just _expression_self
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_self,_expression_unboundNames,_expression_warnings)
sem_MaybeExpression_Nothing :: (T_MaybeExpression)
sem_MaybeExpression_Nothing (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            MaybeExpression_Nothing
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_self,[],_lhs_warnings)
-- MaybeImportSpecification ------------------------------------
-- semantic domain
type T_MaybeImportSpecification = ( (MaybeImportSpecification))
-- cata
sem_MaybeImportSpecification :: (MaybeImportSpecification) ->
                                (T_MaybeImportSpecification)
sem_MaybeImportSpecification ((MaybeImportSpecification_Just (_importspecification))) =
    (sem_MaybeImportSpecification_Just ((sem_ImportSpecification (_importspecification))))
sem_MaybeImportSpecification ((MaybeImportSpecification_Nothing )) =
    (sem_MaybeImportSpecification_Nothing )
sem_MaybeImportSpecification_Just :: (T_ImportSpecification) ->
                                     (T_MaybeImportSpecification)
sem_MaybeImportSpecification_Just (_importspecification) =
    let (_self) =
            MaybeImportSpecification_Just _importspecification_self
        ( _importspecification_self) =
            (_importspecification )
    in  ( _self)
sem_MaybeImportSpecification_Nothing :: (T_MaybeImportSpecification)
sem_MaybeImportSpecification_Nothing  =
    let (_self) =
            MaybeImportSpecification_Nothing
    in  ( _self)
-- MaybeInt ----------------------------------------------------
-- semantic domain
type T_MaybeInt = ( (MaybeInt))
-- cata
sem_MaybeInt :: (MaybeInt) ->
                (T_MaybeInt)
sem_MaybeInt ((MaybeInt_Just (_int))) =
    (sem_MaybeInt_Just (_int))
sem_MaybeInt ((MaybeInt_Nothing )) =
    (sem_MaybeInt_Nothing )
sem_MaybeInt_Just :: (Int) ->
                     (T_MaybeInt)
sem_MaybeInt_Just (_int) =
    let (_self) =
            MaybeInt_Just _int
    in  ( _self)
sem_MaybeInt_Nothing :: (T_MaybeInt)
sem_MaybeInt_Nothing  =
    let (_self) =
            MaybeInt_Nothing
    in  ( _self)
-- MaybeName ---------------------------------------------------
-- semantic domain
type T_MaybeName = ( (MaybeName))
-- cata
sem_MaybeName :: (MaybeName) ->
                 (T_MaybeName)
sem_MaybeName ((MaybeName_Just (_name))) =
    (sem_MaybeName_Just ((sem_Name (_name))))
sem_MaybeName ((MaybeName_Nothing )) =
    (sem_MaybeName_Nothing )
sem_MaybeName_Just :: (T_Name) ->
                      (T_MaybeName)
sem_MaybeName_Just (_name) =
    let (_self) =
            MaybeName_Just _name_self
        ( _name_self) =
            (_name )
    in  ( _self)
sem_MaybeName_Nothing :: (T_MaybeName)
sem_MaybeName_Nothing  =
    let (_self) =
            MaybeName_Nothing
    in  ( _self)
-- MaybeNames --------------------------------------------------
-- semantic domain
type T_MaybeNames = ( (MaybeNames))
-- cata
sem_MaybeNames :: (MaybeNames) ->
                  (T_MaybeNames)
sem_MaybeNames ((MaybeNames_Just (_names))) =
    (sem_MaybeNames_Just ((sem_Names (_names))))
sem_MaybeNames ((MaybeNames_Nothing )) =
    (sem_MaybeNames_Nothing )
sem_MaybeNames_Just :: (T_Names) ->
                       (T_MaybeNames)
sem_MaybeNames_Just (_names) =
    let (_self) =
            MaybeNames_Just _names_self
        ( _names_self) =
            (_names )
    in  ( _self)
sem_MaybeNames_Nothing :: (T_MaybeNames)
sem_MaybeNames_Nothing  =
    let (_self) =
            MaybeNames_Nothing
    in  ( _self)
-- Module ------------------------------------------------------
-- semantic domain
type T_Module = (String) ->
                (ImportEnvironments) ->
                ([Option]) ->
                ( (ImportEnvironment),(Errors),(Module),([(Name,TpScheme)]),(Warnings))
-- cata
sem_Module :: (Module) ->
              (T_Module)
sem_Module ((Module_Module (_range) (_name) (_exports) (_body))) =
    (sem_Module_Module ((sem_Range (_range))) ((sem_MaybeName (_name))) ((sem_MaybeExports (_exports))) ((sem_Body (_body))))
sem_Module_Module :: (T_Range) ->
                     (T_MaybeName) ->
                     (T_MaybeExports) ->
                     (T_Body) ->
                     (T_Module)
sem_Module_Module (_range) (_name) (_exports) (_body) (_lhs_baseName) (_lhs_importEnvironments) (_lhs_options) =
    let (_self) =
            Module_Module _range_self _name_self _exports_self _body_self
        (_allErrors) =
            concat [ _exportErrors
                   , _scopeErrors
                   , _miscerrors
                   , if KindInferencing `elem` _lhs_options then [] else _kindErrors
                   , _topLevelErrors
                   ]
        (_removedEntities) =
            [ (name,TypeConstructor) | name:_ <- _duplicatedTypeConstructors  ] ++
            [ (name,Constructor    ) | name:_ <- _duplicatedValueConstructors ]
        (_derivedRanges) =
            map getNameRange (map fst _derivedFunctions)
        (_initialScope) =
            map fst _derivedFunctions ++
            concatMap (keysFM . typeEnvironment) _lhs_importEnvironments
        (_collectEnvironment) =
            setValueConstructors  (listToFM _body_collectValueConstructors)
            . setTypeConstructors (listToFM _body_collectTypeConstructors)
            . setTypeSynonyms     (listToFM _body_collectTypeSynonyms)
            . setOperatorTable    (listToFM _body_operatorFixities)
            $ emptyEnvironment
        (_derivedFunctions) =
            let f (n,i) = ( nameOfShowFunction n
                          , typeOfShowFunction n (take i [ nameFromString s | s <- variableList])
                          )
                g (n,(i,_)) = f (n,i)
            in map f _body_collectTypeConstructors ++
               map g _body_collectTypeSynonyms
        ((_uniqueValueConstructors,_duplicatedValueConstructors)) =
            uniqueKeys (  _body_collectValueConstructors
                       ++ concatMap (fmToList . valueConstructors) _lhs_importEnvironments
                       )
        (_allValueConstructors) =
            map fst _uniqueValueConstructors ++ map head _duplicatedValueConstructors
        (_valueConstructors) =
            listToFM _uniqueValueConstructors
        ((_uniqueTypeConstructors,_duplicatedTypeConstructors)) =
            uniqueKeys (  _body_collectTypeConstructors
                       ++ concatMap (fmToList . typeConstructors) _lhs_importEnvironments
                       ++ [ (n,i) | (n,(i,f)) <- _body_collectTypeSynonyms ]
                       )
        (_allTypeConstructors) =
            map fst _uniqueTypeConstructors ++ map head _duplicatedTypeConstructors
        (_typeConstructors) =
            listToFM _uniqueTypeConstructors
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope (_initialScope ++ _body_declVarNames) _body_unboundNames []
        (_kindErrors) =
            _body_kindErrors
        (_warnings) =
            _body_warnings
        (_topLevelErrors) =
            concat [ _typeConstructorErrors
                   , _valueConstructorErrors
                   , _fixityErrors
                   , _fixityButNoFunDefErrors
                   , _recursiveTypeSynonymErrors
                   , _wrongFileNameErrors
                   ]
        (_typeConstructorErrors) =
            makeDuplicated TypeConstructor _duplicatedTypeConstructors
        (_valueConstructorErrors) =
            makeDuplicated Constructor _duplicatedValueConstructors
        (_fixityErrors) =
            makeDuplicated Fixity _duplicatedFixities
        ((_duplicatedFixities,_correctFixities)) =
            let (xs,ys) = partition ((>1) . length) . group . sort $ (map fst _body_operatorFixities)
            in (xs,map head ys)
        (_fixityButNoFunDefErrors) =
            let list = nub (_body_declVarNames ++ _allValueConstructors)
            in makeNoFunDef Fixity (filter (`notElem` list) _correctFixities) list
        (_recursiveTypeSynonymErrors) =
            let converted  = map (\(name, tuple) -> (show name, tuple)) _body_collectTypeSynonyms
                recursives = snd . getTypeSynonymOrdering . listToFM $ converted
                makeError = let f = foldr add (Just [])
                                add s ml = case (g s, ml) of
                                              ([n], Just ns) -> Just (n:ns)
                                              _              -> Nothing
                                g s = [ n | n <- map fst _body_collectTypeSynonyms, show n == s ]
                            in maybe [] (\x -> [RecursiveTypeSynonyms x]) . f
            in concatMap makeError recursives
        (_wrongFileNameErrors) =
            let moduleString = getNameName  _moduleName
                moduleRange  = getNameRange _moduleName
            in if moduleString == "" || _lhs_baseName == moduleString
              then []
              else [ WrongFileName _lhs_baseName moduleString moduleRange ]
        (_moduleName) =
            case _name_self of
               MaybeName_Just name -> name
               MaybeName_Nothing   -> Name_Identifier noRange [] ""
        (_fileName) =
            Name_Identifier noRange [] _lhs_baseName
        (_miscerrors) =
            _body_miscerrors
        (_exportErrors) =
            _exports_exportErrors
        (_scopeErrors) =
            makeErrors   _collectScopeInfos
        (_scopeWarnings) =
            makeWarnings _collectScopeInfos
        (_collectScopeInfos) =
            (topLevelScopeInfo _scopeInfo, Definition) : _body_collectScopeInfos
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _exports_exportErrors,_exports_self) =
            (_exports (_allValueConstructors)
                      ((_moduleName : _fileName : _body_importedModules))
                      (concat [ _body_declVarNames
                               , concatMap (keysFM . typeEnvironment) _lhs_importEnvironments
                               , map fst _derivedFunctions
                               ])
                      (_allTypeConstructors))
        ( _body_collectScopeInfos,_body_collectTypeConstructors,_body_collectTypeSynonyms,_body_collectValueConstructors,_body_declVarNames,_body_importedModules,_body_kindErrors,_body_miscerrors,_body_operatorFixities,_body_self,_body_typeSignatures,_body_unboundNames,_body_warnings) =
            (_body (_allTypeConstructors) (_allValueConstructors) ([]) ([]) ([]) ([]) ([]) ([]) (_namesInScope) ([]) (_typeConstructors) (_valueConstructors) ([]))
    in  ( _collectEnvironment
         ,filter (\err -> filterRemovedNames _removedEntities err
                       && filterDerivedNames _derivedRanges err) _allErrors
         ,_self
         ,_body_typeSignatures
         ,_scopeWarnings ++ _warnings
         )
-- Name --------------------------------------------------------
-- semantic domain
type T_Name = ( (Name))
-- cata
sem_Name :: (Name) ->
            (T_Name)
sem_Name ((Name_Identifier (_range) (_module) (_name))) =
    (sem_Name_Identifier ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name ((Name_Operator (_range) (_module) (_name))) =
    (sem_Name_Operator ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name ((Name_Special (_range) (_module) (_name))) =
    (sem_Name_Special ((sem_Range (_range))) ((sem_Strings (_module))) (_name))
sem_Name_Identifier :: (T_Range) ->
                       (T_Strings) ->
                       (String) ->
                       (T_Name)
sem_Name_Identifier (_range) (_module) (_name) =
    let (_self) =
            Name_Identifier _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
sem_Name_Operator :: (T_Range) ->
                     (T_Strings) ->
                     (String) ->
                     (T_Name)
sem_Name_Operator (_range) (_module) (_name) =
    let (_self) =
            Name_Operator _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
sem_Name_Special :: (T_Range) ->
                    (T_Strings) ->
                    (String) ->
                    (T_Name)
sem_Name_Special (_range) (_module) (_name) =
    let (_self) =
            Name_Special _range_self _module_self _name
        ( _range_self) =
            (_range )
        ( _module_self) =
            (_module )
    in  ( _self)
-- Names -------------------------------------------------------
-- semantic domain
type T_Names = ( (Names))
-- cata
sem_Names :: (Names) ->
             (T_Names)
sem_Names (list) =
    (foldr (sem_Names_Cons) (sem_Names_Nil) ((map sem_Name list)))
sem_Names_Cons :: (T_Name) ->
                  (T_Names) ->
                  (T_Names)
sem_Names_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_self) =
            (_hd )
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Names_Nil :: (T_Names)
sem_Names_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Pattern -----------------------------------------------------
-- semantic domain
type T_Pattern = (Names) ->
                 (Names) ->
                 ([(ScopeInfo, Entity)]) ->
                 (Bool) ->
                 ([Error]) ->
                 (Names) ->
                 (FiniteMap Name Int) ->
                 (FiniteMap Name TpScheme) ->
                 ([Warning]) ->
                 ( ([(ScopeInfo, Entity)]),([Error]),(Names),(Pattern),(Names),([Warning]))
-- cata
sem_Pattern :: (Pattern) ->
               (T_Pattern)
sem_Pattern ((Pattern_As (_range) (_name) (_pattern))) =
    (sem_Pattern_As ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_Constructor (_range) (_name) (_patterns))) =
    (sem_Pattern_Constructor ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_InfixConstructor (_range) (_leftPattern) (_constructorOperator) (_rightPattern))) =
    (sem_Pattern_InfixConstructor ((sem_Range (_range))) ((sem_Pattern (_leftPattern))) ((sem_Name (_constructorOperator))) ((sem_Pattern (_rightPattern))))
sem_Pattern ((Pattern_Irrefutable (_range) (_pattern))) =
    (sem_Pattern_Irrefutable ((sem_Range (_range))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_List (_range) (_patterns))) =
    (sem_Pattern_List ((sem_Range (_range))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_Literal (_range) (_literal))) =
    (sem_Pattern_Literal ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Negate (_range) (_literal))) =
    (sem_Pattern_Negate ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_NegateFloat (_range) (_literal))) =
    (sem_Pattern_NegateFloat ((sem_Range (_range))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Parenthesized (_range) (_pattern))) =
    (sem_Pattern_Parenthesized ((sem_Range (_range))) ((sem_Pattern (_pattern))))
sem_Pattern ((Pattern_Record (_range) (_name) (_recordPatternBindings))) =
    (sem_Pattern_Record ((sem_Range (_range))) ((sem_Name (_name))) ((sem_RecordPatternBindings (_recordPatternBindings))))
sem_Pattern ((Pattern_Successor (_range) (_name) (_literal))) =
    (sem_Pattern_Successor ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Literal (_literal))))
sem_Pattern ((Pattern_Tuple (_range) (_patterns))) =
    (sem_Pattern_Tuple ((sem_Range (_range))) ((sem_Patterns (_patterns))))
sem_Pattern ((Pattern_Variable (_range) (_name))) =
    (sem_Pattern_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Pattern ((Pattern_Wildcard (_range))) =
    (sem_Pattern_Wildcard ((sem_Range (_range))))
sem_Pattern_As :: (T_Range) ->
                  (T_Name) ->
                  (T_Pattern) ->
                  (T_Pattern)
sem_Pattern_As (_range) (_name) (_pattern) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_As _range_self _name_self _pattern_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_pattern_self,_pattern_unboundNames,_pattern_warnings) =
            (_pattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _pattern_collectScopeInfos,_pattern_miscerrors,_name_self : _pattern_patVarNames,_self,_pattern_unboundNames,_pattern_warnings)
sem_Pattern_Constructor :: (T_Range) ->
                           (T_Name) ->
                           (T_Patterns) ->
                           (T_Pattern)
sem_Pattern_Constructor (_range) (_name) (_patterns) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Constructor _range_self _name_self _patterns_self
        (_patConstructorErrors) =
            patternConstructorErrors _maybetp _name_self _lhs_allValueConstructors _patterns_numberOfPatterns _lhs_lhsPattern _lhs_allTypeConstructors
        (_maybetp) =
            lookupFM _lhs_valueConstructors _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _patterns_collectScopeInfos,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_self,_patterns_unboundNames,_patterns_warnings) =
            (_patterns (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (False) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _patterns_collectScopeInfos,_patConstructorErrors ++ _patterns_miscerrors,_patterns_patVarNames,_self,_patterns_unboundNames,_patterns_warnings)
sem_Pattern_InfixConstructor :: (T_Range) ->
                                (T_Pattern) ->
                                (T_Name) ->
                                (T_Pattern) ->
                                (T_Pattern)
sem_Pattern_InfixConstructor (_range) (_leftPattern) (_constructorOperator) (_rightPattern) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_InfixConstructor _range_self _leftPattern_self _constructorOperator_self _rightPattern_self
        (_patConstructorErrors) =
            patternConstructorErrors _maybetp _constructorOperator_self _lhs_allValueConstructors 2 False _lhs_allTypeConstructors
        (_maybetp) =
            lookupFM _lhs_valueConstructors _constructorOperator_self
        ( _range_self) =
            (_range )
        ( _leftPattern_collectScopeInfos,_leftPattern_miscerrors,_leftPattern_patVarNames,_leftPattern_self,_leftPattern_unboundNames,_leftPattern_warnings) =
            (_leftPattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _constructorOperator_self) =
            (_constructorOperator )
        ( _rightPattern_collectScopeInfos,_rightPattern_miscerrors,_rightPattern_patVarNames,_rightPattern_self,_rightPattern_unboundNames,_rightPattern_warnings) =
            (_rightPattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_leftPattern_collectScopeInfos) (_lhs_lhsPattern) (_leftPattern_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_leftPattern_warnings))
    in  ( _rightPattern_collectScopeInfos,_patConstructorErrors ++ _rightPattern_miscerrors,_leftPattern_patVarNames ++ _rightPattern_patVarNames,_self,_leftPattern_unboundNames ++ _rightPattern_unboundNames,_rightPattern_warnings)
sem_Pattern_Irrefutable :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Pattern)
sem_Pattern_Irrefutable (_range) (_pattern) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Irrefutable _range_self _pattern_self
        ( _range_self) =
            (_range )
        ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_pattern_self,_pattern_unboundNames,_pattern_warnings) =
            (_pattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_self,_pattern_unboundNames,_pattern_warnings)
sem_Pattern_List :: (T_Range) ->
                    (T_Patterns) ->
                    (T_Pattern)
sem_Pattern_List (_range) (_patterns) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_List _range_self _patterns_self
        ( _range_self) =
            (_range )
        ( _patterns_collectScopeInfos,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_self,_patterns_unboundNames,_patterns_warnings) =
            (_patterns (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _patterns_collectScopeInfos,_patterns_miscerrors,_patterns_patVarNames,_self,_patterns_unboundNames,_patterns_warnings)
sem_Pattern_Literal :: (T_Range) ->
                       (T_Literal) ->
                       (T_Pattern)
sem_Pattern_Literal (_range) (_literal) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Literal _range_self _literal_self
        ( _range_self) =
            (_range )
        ( _literal_collectScopeInfos,_literal_miscerrors,_literal_self) =
            (_literal (_lhs_collectScopeInfos) (_lhs_miscerrors))
    in  ( _literal_collectScopeInfos,_literal_miscerrors,[],_self,[],_lhs_warnings)
sem_Pattern_Negate :: (T_Range) ->
                      (T_Literal) ->
                      (T_Pattern)
sem_Pattern_Negate (_range) (_literal) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Negate _range_self _literal_self
        ( _range_self) =
            (_range )
        ( _literal_collectScopeInfos,_literal_miscerrors,_literal_self) =
            (_literal (_lhs_collectScopeInfos) (_lhs_miscerrors))
    in  ( _literal_collectScopeInfos,_literal_miscerrors,[],_self,[],_lhs_warnings)
sem_Pattern_NegateFloat :: (T_Range) ->
                           (T_Literal) ->
                           (T_Pattern)
sem_Pattern_NegateFloat (_range) (_literal) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_NegateFloat _range_self _literal_self
        ( _range_self) =
            (_range )
        ( _literal_collectScopeInfos,_literal_miscerrors,_literal_self) =
            (_literal (_lhs_collectScopeInfos) (_lhs_miscerrors))
    in  ( _literal_collectScopeInfos,_literal_miscerrors,[],_self,[],_lhs_warnings)
sem_Pattern_Parenthesized :: (T_Range) ->
                             (T_Pattern) ->
                             (T_Pattern)
sem_Pattern_Parenthesized (_range) (_pattern) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Parenthesized _range_self _pattern_self
        ( _range_self) =
            (_range )
        ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_pattern_self,_pattern_unboundNames,_pattern_warnings) =
            (_pattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_self,_pattern_unboundNames,_pattern_warnings)
sem_Pattern_Record :: (T_Range) ->
                      (T_Name) ->
                      (T_RecordPatternBindings) ->
                      (T_Pattern)
sem_Pattern_Record (_range) (_name) (_recordPatternBindings) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Record _range_self _name_self _recordPatternBindings_self
        ((_beta,_constraints,_environment)) =
            internalError "PartialSyntax.ag" "n/a" "Pattern.Record"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _recordPatternBindings_collectScopeInfos,_recordPatternBindings_self,_recordPatternBindings_unboundNames) =
            (_recordPatternBindings (_lhs_collectScopeInfos) (_lhs_namesInScope))
    in  ( _recordPatternBindings_collectScopeInfos,_lhs_miscerrors,[],_self,_recordPatternBindings_unboundNames,_lhs_warnings)
sem_Pattern_Successor :: (T_Range) ->
                         (T_Name) ->
                         (T_Literal) ->
                         (T_Pattern)
sem_Pattern_Successor (_range) (_name) (_literal) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Successor _range_self _name_self _literal_self
        ((_beta,_constraints,_environment)) =
            internalError "PartialSyntax.ag" "n/a" "Pattern.Successor"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _literal_collectScopeInfos,_literal_miscerrors,_literal_self) =
            (_literal (_lhs_collectScopeInfos) (_lhs_miscerrors))
    in  ( _literal_collectScopeInfos,_literal_miscerrors,[],_self,[],_lhs_warnings)
sem_Pattern_Tuple :: (T_Range) ->
                     (T_Patterns) ->
                     (T_Pattern)
sem_Pattern_Tuple (_range) (_patterns) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Tuple _range_self _patterns_self
        ( _range_self) =
            (_range )
        ( _patterns_collectScopeInfos,_patterns_miscerrors,_patterns_numberOfPatterns,_patterns_patVarNames,_patterns_self,_patterns_unboundNames,_patterns_warnings) =
            (_patterns (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _patterns_collectScopeInfos,_patterns_miscerrors,_patterns_patVarNames,_self,_patterns_unboundNames,_patterns_warnings)
sem_Pattern_Variable :: (T_Range) ->
                        (T_Name) ->
                        (T_Pattern)
sem_Pattern_Variable (_range) (_name) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _lhs_collectScopeInfos,_lhs_miscerrors,[ _name_self ],_self,[],_lhs_warnings)
sem_Pattern_Wildcard :: (T_Range) ->
                        (T_Pattern)
sem_Pattern_Wildcard (_range) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Pattern_Wildcard _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_lhs_miscerrors,[],_self,[],_lhs_warnings)
-- Patterns ----------------------------------------------------
-- semantic domain
type T_Patterns = (Names) ->
                  (Names) ->
                  ([(ScopeInfo, Entity)]) ->
                  (Bool) ->
                  ([Error]) ->
                  (Names) ->
                  (FiniteMap Name Int) ->
                  (FiniteMap Name TpScheme) ->
                  ([Warning]) ->
                  ( ([(ScopeInfo, Entity)]),([Error]),(Int),(Names),(Patterns),(Names),([Warning]))
-- cata
sem_Patterns :: (Patterns) ->
                (T_Patterns)
sem_Patterns (list) =
    (foldr (sem_Patterns_Cons) (sem_Patterns_Nil) ((map sem_Pattern list)))
sem_Patterns_Cons :: (T_Pattern) ->
                     (T_Patterns) ->
                     (T_Patterns)
sem_Patterns_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_miscerrors,_hd_patVarNames,_hd_self,_hd_unboundNames,_hd_warnings) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _tl_collectScopeInfos,_tl_miscerrors,_tl_numberOfPatterns,_tl_patVarNames,_tl_self,_tl_unboundNames,_tl_warnings) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectScopeInfos) (_lhs_lhsPattern) (_hd_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_hd_warnings))
    in  ( _tl_collectScopeInfos,_tl_miscerrors,1 + _tl_numberOfPatterns,_hd_patVarNames ++ _tl_patVarNames,_self,_hd_unboundNames ++ _tl_unboundNames,_tl_warnings)
sem_Patterns_Nil :: (T_Patterns)
sem_Patterns_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_lhsPattern) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_lhs_miscerrors,0,[],_self,[],_lhs_warnings)
-- Position ----------------------------------------------------
-- semantic domain
type T_Position = ( (Position))
-- cata
sem_Position :: (Position) ->
                (T_Position)
sem_Position ((Position_Position (_filename) (_line) (_column))) =
    (sem_Position_Position (_filename) (_line) (_column))
sem_Position ((Position_Unknown )) =
    (sem_Position_Unknown )
sem_Position_Position :: (String) ->
                         (Int) ->
                         (Int) ->
                         (T_Position)
sem_Position_Position (_filename) (_line) (_column) =
    let (_self) =
            Position_Position _filename _line _column
    in  ( _self)
sem_Position_Unknown :: (T_Position)
sem_Position_Unknown  =
    let (_self) =
            Position_Unknown
    in  ( _self)
-- Qualifier ---------------------------------------------------
-- semantic domain
type T_Qualifier = (Names) ->
                   (Names) ->
                   ([(ScopeInfo, Entity)]) ->
                   ([Error]) ->
                   ([Error]) ->
                   (Names) ->
                   (FiniteMap Name Int) ->
                   (Names) ->
                   (FiniteMap Name TpScheme) ->
                   ([Warning]) ->
                   ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(Names),(Qualifier),(Names),([Warning]))
-- cata
sem_Qualifier :: (Qualifier) ->
                 (T_Qualifier)
sem_Qualifier ((Qualifier_Empty (_range))) =
    (sem_Qualifier_Empty ((sem_Range (_range))))
sem_Qualifier ((Qualifier_Generator (_range) (_pattern) (_expression))) =
    (sem_Qualifier_Generator ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_Expression (_expression))))
sem_Qualifier ((Qualifier_Guard (_range) (_guard))) =
    (sem_Qualifier_Guard ((sem_Range (_range))) ((sem_Expression (_guard))))
sem_Qualifier ((Qualifier_Let (_range) (_declarations))) =
    (sem_Qualifier_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))))
sem_Qualifier_Empty :: (T_Range) ->
                       (T_Qualifier)
sem_Qualifier_Empty (_range) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Qualifier_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_lhs_namesInScope,_self,_lhs_unboundNames,_lhs_warnings)
sem_Qualifier_Generator :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Expression) ->
                           (T_Qualifier)
sem_Qualifier_Generator (_range) (_pattern) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Qualifier_Generator _range_self _pattern_self _expression_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _pattern_patVarNames (_expression_unboundNames  ++ _lhs_unboundNames)  _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_pattern_self,_pattern_unboundNames,_pattern_warnings) =
            (_pattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (False) (_lhs_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_pattern_collectScopeInfos) (_lhs_kindErrors) (_pattern_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_pattern_warnings))
    in  ( (_scopeInfo, Variable)   : _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_namesInScope,_self,_unboundNames,_expression_warnings)
sem_Qualifier_Guard :: (T_Range) ->
                       (T_Expression) ->
                       (T_Qualifier)
sem_Qualifier_Guard (_range) (_guard) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Qualifier_Guard _range_self _guard_self
        ( _range_self) =
            (_range )
        ( _guard_collectScopeInfos,_guard_kindErrors,_guard_miscerrors,_guard_self,_guard_unboundNames,_guard_warnings) =
            (_guard (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _guard_collectScopeInfos,_guard_kindErrors,_guard_miscerrors,_lhs_namesInScope,_self,_guard_unboundNames ++ _lhs_unboundNames,_guard_warnings)
sem_Qualifier_Let :: (T_Range) ->
                     (T_Declarations) ->
                     (T_Qualifier)
sem_Qualifier_Let (_range) (_declarations) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Qualifier_Let _range_self _declarations_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _declarations_declVarNames (_declarations_unboundNames ++ _lhs_unboundNames) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ((_,_doubles)) =
            uniqueAppearance (map fst _declarations_typeSignatures)
        (_typeSignatureErrors) =
            checkTypeSignatures _declarations_declVarNames _declarations_typeSignatures
        ((_collectTypeConstructors,_collectValueConstructors,_collectTypeSynonyms,_collectConstructorEnv,_derivedFunctions,_operatorFixities)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Qualifier"
        ( _range_self) =
            (_range )
        ( _declarations_collectScopeInfos,_declarations_collectTypeConstructors,_declarations_collectTypeSynonyms,_declarations_collectValueConstructors,_declarations_declVarNames,_declarations_kindErrors,_declarations_miscerrors,_declarations_operatorFixities,_declarations_previousWasAlsoFB,_declarations_self,_declarations_suspiciousFBs,_declarations_typeSignatures,_declarations_unboundNames,_declarations_warnings) =
            (_declarations (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_collectTypeConstructors) (_collectTypeSynonyms) (_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_namesInScope) (_operatorFixities) (Nothing) ([]) (_lhs_typeConstructors) ([]) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( (_scopeInfo, Definition) : _declarations_collectScopeInfos
         ,_declarations_kindErrors
         ,_typeSignatureErrors ++ _declarations_miscerrors
         ,_namesInScope
         ,_self
         ,_unboundNames
         ,_declarations_warnings ++
          _suspiciousErrors
         )
-- Qualifiers --------------------------------------------------
-- semantic domain
type T_Qualifiers = (Names) ->
                    (Names) ->
                    ([(ScopeInfo, Entity)]) ->
                    ([Error]) ->
                    ([Error]) ->
                    (Names) ->
                    (FiniteMap Name Int) ->
                    (Names) ->
                    (FiniteMap Name TpScheme) ->
                    ([Warning]) ->
                    ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(Names),(Qualifiers),(Names),([Warning]))
-- cata
sem_Qualifiers :: (Qualifiers) ->
                  (T_Qualifiers)
sem_Qualifiers (list) =
    (foldr (sem_Qualifiers_Cons) (sem_Qualifiers_Nil) ((map sem_Qualifier list)))
sem_Qualifiers_Cons :: (T_Qualifier) ->
                       (T_Qualifiers) ->
                       (T_Qualifiers)
sem_Qualifiers_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_kindErrors,_hd_miscerrors,_hd_namesInScope,_hd_self,_hd_unboundNames,_hd_warnings) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_tl_unboundNames) (_lhs_valueConstructors) (_lhs_warnings))
        ( _tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_tl_namesInScope,_tl_self,_tl_unboundNames,_tl_warnings) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectScopeInfos) (_hd_kindErrors) (_hd_miscerrors) (_hd_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_hd_warnings))
    in  ( _tl_collectScopeInfos,_tl_kindErrors,_tl_miscerrors,_tl_namesInScope,_self,_hd_unboundNames,_tl_warnings)
sem_Qualifiers_Nil :: (T_Qualifiers)
sem_Qualifiers_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_miscerrors,_lhs_namesInScope,_self,_lhs_unboundNames,_lhs_warnings)
-- Range -------------------------------------------------------
-- semantic domain
type T_Range = ( (Range))
-- cata
sem_Range :: (Range) ->
             (T_Range)
sem_Range ((Range_Range (_start) (_stop))) =
    (sem_Range_Range ((sem_Position (_start))) ((sem_Position (_stop))))
sem_Range_Range :: (T_Position) ->
                   (T_Position) ->
                   (T_Range)
sem_Range_Range (_start) (_stop) =
    let (_self) =
            Range_Range _start_self _stop_self
        ( _start_self) =
            (_start )
        ( _stop_self) =
            (_stop )
    in  ( _self)
-- RecordExpressionBinding -------------------------------------
-- semantic domain
type T_RecordExpressionBinding = ([(ScopeInfo, Entity)]) ->
                                 (Names) ->
                                 ( ([(ScopeInfo, Entity)]),(RecordExpressionBinding),(Names))
-- cata
sem_RecordExpressionBinding :: (RecordExpressionBinding) ->
                               (T_RecordExpressionBinding)
sem_RecordExpressionBinding ((RecordExpressionBinding_RecordExpressionBinding (_range) (_name) (_expression))) =
    (sem_RecordExpressionBinding_RecordExpressionBinding ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Expression (_expression))))
sem_RecordExpressionBinding_RecordExpressionBinding :: (T_Range) ->
                                                       (T_Name) ->
                                                       (T_Expression) ->
                                                       (T_RecordExpressionBinding)
sem_RecordExpressionBinding_RecordExpressionBinding (_range) (_name) (_expression) (_lhs_collectScopeInfos) (_lhs_namesInScope) =
    let (_self) =
            RecordExpressionBinding_RecordExpressionBinding _range_self _name_self _expression_self
        ((_monos,_constructorenv,_betaUnique,_miscerrors,_warnings,_kindErrors,_valueConstructors,_allValueConstructors,_typeConstructors,_allTypeConstructors,_importEnvironment)) =
            internalError "PartialSyntax.ag" "n/a" "RecordExpressionBinding.RecordExpressionBinding"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_allTypeConstructors) (_allValueConstructors) (_lhs_collectScopeInfos) (_kindErrors) (_miscerrors) (_lhs_namesInScope) (_typeConstructors) (_valueConstructors) (_warnings))
    in  ( _expression_collectScopeInfos,_self,_expression_unboundNames)
-- RecordExpressionBindings ------------------------------------
-- semantic domain
type T_RecordExpressionBindings = ([(ScopeInfo, Entity)]) ->
                                  (Names) ->
                                  ( ([(ScopeInfo, Entity)]),(RecordExpressionBindings),(Names))
-- cata
sem_RecordExpressionBindings :: (RecordExpressionBindings) ->
                                (T_RecordExpressionBindings)
sem_RecordExpressionBindings (list) =
    (foldr (sem_RecordExpressionBindings_Cons) (sem_RecordExpressionBindings_Nil) ((map sem_RecordExpressionBinding list)))
sem_RecordExpressionBindings_Cons :: (T_RecordExpressionBinding) ->
                                     (T_RecordExpressionBindings) ->
                                     (T_RecordExpressionBindings)
sem_RecordExpressionBindings_Cons (_hd) (_tl) (_lhs_collectScopeInfos) (_lhs_namesInScope) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_self,_hd_unboundNames) =
            (_hd (_lhs_collectScopeInfos) (_lhs_namesInScope))
        ( _tl_collectScopeInfos,_tl_self,_tl_unboundNames) =
            (_tl (_hd_collectScopeInfos) (_lhs_namesInScope))
    in  ( _tl_collectScopeInfos,_self,_hd_unboundNames ++ _tl_unboundNames)
sem_RecordExpressionBindings_Nil :: (T_RecordExpressionBindings)
sem_RecordExpressionBindings_Nil (_lhs_collectScopeInfos) (_lhs_namesInScope) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_self,[])
-- RecordPatternBinding ----------------------------------------
-- semantic domain
type T_RecordPatternBinding = ([(ScopeInfo, Entity)]) ->
                              (Names) ->
                              ( ([(ScopeInfo, Entity)]),(RecordPatternBinding),(Names))
-- cata
sem_RecordPatternBinding :: (RecordPatternBinding) ->
                            (T_RecordPatternBinding)
sem_RecordPatternBinding ((RecordPatternBinding_RecordPatternBinding (_range) (_name) (_pattern))) =
    (sem_RecordPatternBinding_RecordPatternBinding ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Pattern (_pattern))))
sem_RecordPatternBinding_RecordPatternBinding :: (T_Range) ->
                                                 (T_Name) ->
                                                 (T_Pattern) ->
                                                 (T_RecordPatternBinding)
sem_RecordPatternBinding_RecordPatternBinding (_range) (_name) (_pattern) (_lhs_collectScopeInfos) (_lhs_namesInScope) =
    let (_self) =
            RecordPatternBinding_RecordPatternBinding _range_self _name_self _pattern_self
        ((_constructorenv,_betaUnique,_miscerrors,_warnings,_valueConstructors,_allValueConstructors,_typeConstructors,_allTypeConstructors,_importEnvironment)) =
            internalError "PartialSyntax.ag" "n/a" "RecordPatternBinding.RecordPatternBinding"
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_pattern_self,_pattern_unboundNames,_pattern_warnings) =
            (_pattern (_allTypeConstructors) (_allValueConstructors) (_lhs_collectScopeInfos) (False) (_miscerrors) (_lhs_namesInScope) (_typeConstructors) (_valueConstructors) (_warnings))
    in  ( _pattern_collectScopeInfos,_self,_pattern_unboundNames)
-- RecordPatternBindings ---------------------------------------
-- semantic domain
type T_RecordPatternBindings = ([(ScopeInfo, Entity)]) ->
                               (Names) ->
                               ( ([(ScopeInfo, Entity)]),(RecordPatternBindings),(Names))
-- cata
sem_RecordPatternBindings :: (RecordPatternBindings) ->
                             (T_RecordPatternBindings)
sem_RecordPatternBindings (list) =
    (foldr (sem_RecordPatternBindings_Cons) (sem_RecordPatternBindings_Nil) ((map sem_RecordPatternBinding list)))
sem_RecordPatternBindings_Cons :: (T_RecordPatternBinding) ->
                                  (T_RecordPatternBindings) ->
                                  (T_RecordPatternBindings)
sem_RecordPatternBindings_Cons (_hd) (_tl) (_lhs_collectScopeInfos) (_lhs_namesInScope) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_self,_hd_unboundNames) =
            (_hd (_lhs_collectScopeInfos) (_lhs_namesInScope))
        ( _tl_collectScopeInfos,_tl_self,_tl_unboundNames) =
            (_tl (_hd_collectScopeInfos) (_lhs_namesInScope))
    in  ( _tl_collectScopeInfos,_self,_hd_unboundNames ++ _tl_unboundNames)
sem_RecordPatternBindings_Nil :: (T_RecordPatternBindings)
sem_RecordPatternBindings_Nil (_lhs_collectScopeInfos) (_lhs_namesInScope) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_self,[])
-- RightHandSide -----------------------------------------------
-- semantic domain
type T_RightHandSide = (Names) ->
                       (Names) ->
                       ([(ScopeInfo, Entity)]) ->
                       ([Error]) ->
                       ([Error]) ->
                       (Names) ->
                       (FiniteMap Name Int) ->
                       (FiniteMap Name TpScheme) ->
                       ([Warning]) ->
                       ( ([(ScopeInfo, Entity)]),([Error]),([Error]),(RightHandSide),(Names),([Warning]))
-- cata
sem_RightHandSide :: (RightHandSide) ->
                     (T_RightHandSide)
sem_RightHandSide ((RightHandSide_Expression (_range) (_expression) (_where))) =
    (sem_RightHandSide_Expression ((sem_Range (_range))) ((sem_Expression (_expression))) ((sem_MaybeDeclarations (_where))))
sem_RightHandSide ((RightHandSide_Guarded (_range) (_guardedexpressions) (_where))) =
    (sem_RightHandSide_Guarded ((sem_Range (_range))) ((sem_GuardedExpressions (_guardedexpressions))) ((sem_MaybeDeclarations (_where))))
sem_RightHandSide_Expression :: (T_Range) ->
                                (T_Expression) ->
                                (T_MaybeDeclarations) ->
                                (T_RightHandSide)
sem_RightHandSide_Expression (_range) (_expression) (_where) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            RightHandSide_Expression _range_self _expression_self _where_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_where_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _where_collectScopeInfos,_where_kindErrors,_where_miscerrors,_where_namesInScope,_where_self,_where_unboundNames,_where_warnings) =
            (_where (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_expression_collectScopeInfos) (_expression_kindErrors) (_expression_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_expression_unboundNames) (_lhs_valueConstructors) (_expression_warnings))
    in  ( _where_collectScopeInfos,_where_kindErrors,_where_miscerrors,_self,_where_unboundNames,_where_warnings)
sem_RightHandSide_Guarded :: (T_Range) ->
                             (T_GuardedExpressions) ->
                             (T_MaybeDeclarations) ->
                             (T_RightHandSide)
sem_RightHandSide_Guarded (_range) (_guardedexpressions) (_where) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            RightHandSide_Guarded _range_self _guardedexpressions_self _where_self
        ( _range_self) =
            (_range )
        ( _guardedexpressions_collectScopeInfos,_guardedexpressions_kindErrors,_guardedexpressions_miscerrors,_guardedexpressions_self,_guardedexpressions_unboundNames,_guardedexpressions_warnings) =
            (_guardedexpressions (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_where_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _where_collectScopeInfos,_where_kindErrors,_where_miscerrors,_where_namesInScope,_where_self,_where_unboundNames,_where_warnings) =
            (_where (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_guardedexpressions_collectScopeInfos) (_guardedexpressions_kindErrors) (_guardedexpressions_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_guardedexpressions_unboundNames) (_lhs_valueConstructors) (_guardedexpressions_warnings))
    in  ( _where_collectScopeInfos,_where_kindErrors,_where_miscerrors,_self,_where_unboundNames,_where_warnings)
-- SimpleType --------------------------------------------------
-- semantic domain
type T_SimpleType = ( (Name),(SimpleType),(Names))
-- cata
sem_SimpleType :: (SimpleType) ->
                  (T_SimpleType)
sem_SimpleType ((SimpleType_SimpleType (_range) (_name) (_typevariables))) =
    (sem_SimpleType_SimpleType ((sem_Range (_range))) ((sem_Name (_name))) ((sem_Names (_typevariables))))
sem_SimpleType_SimpleType :: (T_Range) ->
                             (T_Name) ->
                             (T_Names) ->
                             (T_SimpleType)
sem_SimpleType_SimpleType (_range) (_name) (_typevariables) =
    let (_self) =
            SimpleType_SimpleType _range_self _name_self _typevariables_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
        ( _typevariables_self) =
            (_typevariables )
    in  ( _name_self,_self,_typevariables_self)
-- Statement ---------------------------------------------------
-- semantic domain
type T_Statement = (Names) ->
                   (Names) ->
                   ([(ScopeInfo, Entity)]) ->
                   ([Error]) ->
                   (Bool) ->
                   ([Error]) ->
                   (Names) ->
                   (FiniteMap Name Int) ->
                   (Names) ->
                   (FiniteMap Name TpScheme) ->
                   ([Warning]) ->
                   ( ([(ScopeInfo, Entity)]),([Error]),(Bool),([Error]),(Names),(Statement),(Names),([Warning]))
-- cata
sem_Statement :: (Statement) ->
                 (T_Statement)
sem_Statement ((Statement_Empty (_range))) =
    (sem_Statement_Empty ((sem_Range (_range))))
sem_Statement ((Statement_Expression (_range) (_expression))) =
    (sem_Statement_Expression ((sem_Range (_range))) ((sem_Expression (_expression))))
sem_Statement ((Statement_Generator (_range) (_pattern) (_expression))) =
    (sem_Statement_Generator ((sem_Range (_range))) ((sem_Pattern (_pattern))) ((sem_Expression (_expression))))
sem_Statement ((Statement_Let (_range) (_declarations))) =
    (sem_Statement_Let ((sem_Range (_range))) ((sem_Declarations (_declarations))))
sem_Statement_Empty :: (T_Range) ->
                       (T_Statement)
sem_Statement_Empty (_range) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_lastStatementIsExpr) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Statement_Empty _range_self
        ( _range_self) =
            (_range )
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_lastStatementIsExpr,_lhs_miscerrors,_lhs_namesInScope,_self,_lhs_unboundNames,_lhs_warnings)
sem_Statement_Expression :: (T_Range) ->
                            (T_Expression) ->
                            (T_Statement)
sem_Statement_Expression (_range) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_lastStatementIsExpr) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Statement_Expression _range_self _expression_self
        ( _range_self) =
            (_range )
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( _expression_collectScopeInfos,_expression_kindErrors,True,_expression_miscerrors,_lhs_namesInScope,_self,_expression_unboundNames ++ _lhs_unboundNames,_expression_warnings)
sem_Statement_Generator :: (T_Range) ->
                           (T_Pattern) ->
                           (T_Expression) ->
                           (T_Statement)
sem_Statement_Generator (_range) (_pattern) (_expression) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_lastStatementIsExpr) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Statement_Generator _range_self _pattern_self _expression_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _pattern_patVarNames (_expression_unboundNames ++ _lhs_unboundNames) _lhs_namesInScope
        ( _range_self) =
            (_range )
        ( _pattern_collectScopeInfos,_pattern_miscerrors,_pattern_patVarNames,_pattern_self,_pattern_unboundNames,_pattern_warnings) =
            (_pattern (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (False) (_lhs_miscerrors) (_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_lhs_warnings))
        ( _expression_collectScopeInfos,_expression_kindErrors,_expression_miscerrors,_expression_self,_expression_unboundNames,_expression_warnings) =
            (_expression (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_pattern_collectScopeInfos) (_lhs_kindErrors) (_pattern_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_valueConstructors) (_pattern_warnings))
    in  ( (_scopeInfo, Variable)   : _expression_collectScopeInfos,_expression_kindErrors,False,_expression_miscerrors,_namesInScope,_self,_unboundNames,_expression_warnings)
sem_Statement_Let :: (T_Range) ->
                     (T_Declarations) ->
                     (T_Statement)
sem_Statement_Let (_range) (_declarations) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_lastStatementIsExpr) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            Statement_Let _range_self _declarations_self
        ((_namesInScope,_unboundNames,_scopeInfo)) =
            changeOfScope _declarations_declVarNames (_declarations_unboundNames ++ _lhs_unboundNames) _lhs_namesInScope
        (_suspiciousErrors) =
            findSimilarFunctionBindings _declarations_typeSignatures _declarations_suspiciousFBs
        ((_,_doubles)) =
            uniqueAppearance (map fst _declarations_typeSignatures)
        (_typeSignatureErrors) =
            checkTypeSignatures _declarations_declVarNames _declarations_typeSignatures
        ((_collectTypeConstructors,_collectValueConstructors,_collectTypeSynonyms,_collectConstructorEnv,_derivedFunctions,_operatorFixities)) =
            internalError "PartialSyntax.ag" "n/a" "toplevel Statement"
        ( _range_self) =
            (_range )
        ( _declarations_collectScopeInfos,_declarations_collectTypeConstructors,_declarations_collectTypeSynonyms,_declarations_collectValueConstructors,_declarations_declVarNames,_declarations_kindErrors,_declarations_miscerrors,_declarations_operatorFixities,_declarations_previousWasAlsoFB,_declarations_self,_declarations_suspiciousFBs,_declarations_typeSignatures,_declarations_unboundNames,_declarations_warnings) =
            (_declarations (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_collectTypeConstructors) (_collectTypeSynonyms) (_collectValueConstructors) (_lhs_kindErrors) (_lhs_miscerrors) (_namesInScope) (_operatorFixities) (Nothing) ([]) (_lhs_typeConstructors) ([]) (_lhs_valueConstructors) (_lhs_warnings))
    in  ( (_scopeInfo, Definition) : _declarations_collectScopeInfos
         ,_declarations_kindErrors
         ,False
         ,_typeSignatureErrors ++ _declarations_miscerrors
         ,_namesInScope
         ,_self
         ,_unboundNames
         ,_declarations_warnings ++
          _suspiciousErrors
         )
-- Statements --------------------------------------------------
-- semantic domain
type T_Statements = (Names) ->
                    (Names) ->
                    ([(ScopeInfo, Entity)]) ->
                    ([Error]) ->
                    (Bool) ->
                    ([Error]) ->
                    (Names) ->
                    (FiniteMap Name Int) ->
                    (Names) ->
                    (FiniteMap Name TpScheme) ->
                    ([Warning]) ->
                    ( ([(ScopeInfo, Entity)]),([Error]),(Bool),([Error]),(Names),(Statements),(Names),([Warning]))
-- cata
sem_Statements :: (Statements) ->
                  (T_Statements)
sem_Statements (list) =
    (foldr (sem_Statements_Cons) (sem_Statements_Nil) ((map sem_Statement list)))
sem_Statements_Cons :: (T_Statement) ->
                       (T_Statements) ->
                       (T_Statements)
sem_Statements_Cons (_hd) (_tl) (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_lastStatementIsExpr) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_collectScopeInfos,_hd_kindErrors,_hd_lastStatementIsExpr,_hd_miscerrors,_hd_namesInScope,_hd_self,_hd_unboundNames,_hd_warnings) =
            (_hd (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_lastStatementIsExpr) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_tl_unboundNames) (_lhs_valueConstructors) (_lhs_warnings))
        ( _tl_collectScopeInfos,_tl_kindErrors,_tl_lastStatementIsExpr,_tl_miscerrors,_tl_namesInScope,_tl_self,_tl_unboundNames,_tl_warnings) =
            (_tl (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_hd_collectScopeInfos) (_hd_kindErrors) (_hd_lastStatementIsExpr) (_hd_miscerrors) (_hd_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_hd_warnings))
    in  ( _tl_collectScopeInfos,_tl_kindErrors,_tl_lastStatementIsExpr,_tl_miscerrors,_tl_namesInScope,_self,_hd_unboundNames,_tl_warnings)
sem_Statements_Nil :: (T_Statements)
sem_Statements_Nil (_lhs_allTypeConstructors) (_lhs_allValueConstructors) (_lhs_collectScopeInfos) (_lhs_kindErrors) (_lhs_lastStatementIsExpr) (_lhs_miscerrors) (_lhs_namesInScope) (_lhs_typeConstructors) (_lhs_unboundNames) (_lhs_valueConstructors) (_lhs_warnings) =
    let (_self) =
            []
    in  ( _lhs_collectScopeInfos,_lhs_kindErrors,_lhs_lastStatementIsExpr,_lhs_miscerrors,_lhs_namesInScope,_self,_lhs_unboundNames,_lhs_warnings)
-- Strings -----------------------------------------------------
-- semantic domain
type T_Strings = ( (Strings))
-- cata
sem_Strings :: (Strings) ->
               (T_Strings)
sem_Strings (list) =
    (foldr (sem_Strings_Cons) (sem_Strings_Nil) (list))
sem_Strings_Cons :: (String) ->
                    (T_Strings) ->
                    (T_Strings)
sem_Strings_Cons (_hd) (_tl) =
    let (_self) =
            (:) _hd _tl_self
        ( _tl_self) =
            (_tl )
    in  ( _self)
sem_Strings_Nil :: (T_Strings)
sem_Strings_Nil  =
    let (_self) =
            []
    in  ( _self)
-- Type --------------------------------------------------------
-- semantic domain
type T_Type = ([Error]) ->
              ( ([Error]),(Type),(Names))
-- cata
sem_Type :: (Type) ->
            (T_Type)
sem_Type ((Type_Application (_range) (_prefix) (_function) (_arguments))) =
    (sem_Type_Application ((sem_Range (_range))) (_prefix) ((sem_Type (_function))) ((sem_Types (_arguments))))
sem_Type ((Type_Constructor (_range) (_name))) =
    (sem_Type_Constructor ((sem_Range (_range))) ((sem_Name (_name))))
sem_Type ((Type_Exists (_range) (_typevariables) (_type))) =
    (sem_Type_Exists ((sem_Range (_range))) ((sem_Names (_typevariables))) ((sem_Type (_type))))
sem_Type ((Type_Forall (_range) (_typevariables) (_type))) =
    (sem_Type_Forall ((sem_Range (_range))) ((sem_Names (_typevariables))) ((sem_Type (_type))))
sem_Type ((Type_Parenthesized (_range) (_type))) =
    (sem_Type_Parenthesized ((sem_Range (_range))) ((sem_Type (_type))))
sem_Type ((Type_Qualified (_range) (_context) (_type))) =
    (sem_Type_Qualified ((sem_Range (_range))) ((sem_ContextItems (_context))) ((sem_Type (_type))))
sem_Type ((Type_Variable (_range) (_name))) =
    (sem_Type_Variable ((sem_Range (_range))) ((sem_Name (_name))))
sem_Type_Application :: (T_Range) ->
                        (Bool) ->
                        (T_Type) ->
                        (T_Types) ->
                        (T_Type)
sem_Type_Application (_range) (_prefix) (_function) (_arguments) (_lhs_miscerrors) =
    let (_self) =
            Type_Application _range_self _prefix _function_self _arguments_self
        ( _range_self) =
            (_range )
        ( _function_miscerrors,_function_self,_function_typevariables) =
            (_function (_lhs_miscerrors))
        ( _arguments_miscerrors,_arguments_self,_arguments_typevariables) =
            (_arguments (_function_miscerrors))
    in  ( _arguments_miscerrors,_self,_function_typevariables  ++  _arguments_typevariables)
sem_Type_Constructor :: (T_Range) ->
                        (T_Name) ->
                        (T_Type)
sem_Type_Constructor (_range) (_name) (_lhs_miscerrors) =
    let (_self) =
            Type_Constructor _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _lhs_miscerrors,_self,[])
sem_Type_Exists :: (T_Range) ->
                   (T_Names) ->
                   (T_Type) ->
                   (T_Type)
sem_Type_Exists (_range) (_typevariables) (_type) (_lhs_miscerrors) =
    let (_self) =
            Type_Exists _range_self _typevariables_self _type_self
        ( _range_self) =
            (_range )
        ( _typevariables_self) =
            (_typevariables )
        ( _type_miscerrors,_type_self,_type_typevariables) =
            (_type (_lhs_miscerrors))
    in  ( _type_miscerrors,_self,_type_typevariables)
sem_Type_Forall :: (T_Range) ->
                   (T_Names) ->
                   (T_Type) ->
                   (T_Type)
sem_Type_Forall (_range) (_typevariables) (_type) (_lhs_miscerrors) =
    let (_self) =
            Type_Forall _range_self _typevariables_self _type_self
        ( _range_self) =
            (_range )
        ( _typevariables_self) =
            (_typevariables )
        ( _type_miscerrors,_type_self,_type_typevariables) =
            (_type (_lhs_miscerrors))
    in  ( _type_miscerrors,_self,_type_typevariables)
sem_Type_Parenthesized :: (T_Range) ->
                          (T_Type) ->
                          (T_Type)
sem_Type_Parenthesized (_range) (_type) (_lhs_miscerrors) =
    let (_self) =
            Type_Parenthesized _range_self _type_self
        ( _range_self) =
            (_range )
        ( _type_miscerrors,_type_self,_type_typevariables) =
            (_type (_lhs_miscerrors))
    in  ( _type_miscerrors,_self,_type_typevariables)
sem_Type_Qualified :: (T_Range) ->
                      (T_ContextItems) ->
                      (T_Type) ->
                      (T_Type)
sem_Type_Qualified (_range) (_context) (_type) (_lhs_miscerrors) =
    let (_self) =
            Type_Qualified _range_self _context_self _type_self
        ( _range_self) =
            (_range )
        ( _context_contextVars,_context_miscerrors,_context_self) =
            (_context (_lhs_miscerrors))
        ( _type_miscerrors,_type_self,_type_typevariables) =
            (_type (_context_miscerrors))
    in  ( [ AmbiguousContext v | v <-  _context_contextVars, v `notElem` _type_typevariables ]
          ++
          _type_miscerrors
         ,_self
         ,_type_typevariables
         )
sem_Type_Variable :: (T_Range) ->
                     (T_Name) ->
                     (T_Type)
sem_Type_Variable (_range) (_name) (_lhs_miscerrors) =
    let (_self) =
            Type_Variable _range_self _name_self
        ( _range_self) =
            (_range )
        ( _name_self) =
            (_name )
    in  ( _lhs_miscerrors,_self,[ _name_self ])
-- Types -------------------------------------------------------
-- semantic domain
type T_Types = ([Error]) ->
               ( ([Error]),(Types),(Names))
-- cata
sem_Types :: (Types) ->
             (T_Types)
sem_Types (list) =
    (foldr (sem_Types_Cons) (sem_Types_Nil) ((map sem_Type list)))
sem_Types_Cons :: (T_Type) ->
                  (T_Types) ->
                  (T_Types)
sem_Types_Cons (_hd) (_tl) (_lhs_miscerrors) =
    let (_self) =
            (:) _hd_self _tl_self
        ( _hd_miscerrors,_hd_self,_hd_typevariables) =
            (_hd (_lhs_miscerrors))
        ( _tl_miscerrors,_tl_self,_tl_typevariables) =
            (_tl (_hd_miscerrors))
    in  ( _tl_miscerrors,_self,_hd_typevariables  ++  _tl_typevariables)
sem_Types_Nil :: (T_Types)
sem_Types_Nil (_lhs_miscerrors) =
    let (_self) =
            []
    in  ( _lhs_miscerrors,_self,[])

