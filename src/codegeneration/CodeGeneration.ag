ATTR Module
   [   additionalDecls  : { [Core.CoreDecl] }
       dictionaryEnv    : DictionaryEnvironment
       importEnv        : ImportEnvironment
       toplevelTypes    : TypeEnvironment
   |
   |   core             : { Core.CoreModule }
   ]

ATTR Body Declarations Declaration Expressions Expression Statements Statement
     Qualifiers Qualifier GuardedExpressions GuardedExpression 
     Alternatives Alternative FunctionBindings FunctionBinding
     RightHandSide MaybeDeclarations MaybeExpression RecordExpressionBinding
     RecordExpressionBindings Constructors Constructor
    [ importEnv     : ImportEnvironment 
      dictionaryEnv : DictionaryEnvironment
    |
    |
    ]
    
-- UHA
INCLUDE "../syntax/UHA_Syntax.ag"

-- Transformation into Core
INCLUDE "ToCoreModule.ag"
INCLUDE "ToCoreDecl.ag"
INCLUDE "ToCoreExpr.ag"
INCLUDE "ToCorePat.ag"
INCLUDE "ToCoreName.ag"

imports{
import UHA_Syntax
import UHA_Utils
import UHA_Range 
import List (union)
import ImportEnvironment
import DictionaryEnvironment
import Data.FiniteMap
import TypeConversion
import Char (ord)

import Id
import IdSet 
import Utils(internalError)

import Types

import PatternMatch
import DerivingShow

-- Semi-Daan
import CoreUtils

-- Daan
import qualified Core
import qualified Module
import qualified Byte
import qualified CoreParse
}

{

type CoreDecl = Core.Decl Core.Expr
}

--Collect.ag

SEM Expression        | Let  loc.importEnv = internalError "CodeGeneration.ag" "Expression.Let" ""
SEM MaybeDeclarations | Just loc.importEnv = internalError "CodeGeneration.ag" "MaybeDeclarations.Just" ""      
SEM Qualifier         | Let  loc.importEnv = internalError "CodeGeneration.ag" "Qualifier.Let" ""       
SEM Statement         | Let  loc.importEnv = internalError "CodeGeneration.ag" "Statement.Let" ""       

ATTR SimpleType [ | | name:Name typevariables:Names ]

SEM SimpleType
  | SimpleType  lhs . name          = @name.self                   
                    . typevariables = @typevariables.self
