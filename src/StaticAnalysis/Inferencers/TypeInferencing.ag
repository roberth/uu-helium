
-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- Type inferencing.
--
-----------------------------------------------------------------------------

{
typeInferencing :: [Option] -> ImportEnvironment -> Module
                      -> (IO (), DictionaryEnvironment, TypeEnvironment, TypeErrors, Warnings)
typeInferencing options importEnv module_ =
   let (_, dictionaryEnv, _, logEntries, _, _, toplevelTypes, typeErrors, warnings) =
            sem_Module module_ importEnv options
       debugIO = putStrLn (show logEntries)
   in (debugIO, dictionaryEnv, toplevelTypes, typeErrors, warnings)

proximaTypeInferencing :: [Option] -> ImportEnvironment -> Module
                      -> (TypeErrors, Warnings, TypeEnvironment, [(Range, TpScheme)])  
proximaTypeInferencing options importEnv module_ =
   let (_, _, infoTree, _, _, solveResult, toplevelTypes, typeErrors, warnings) =
            sem_Module module_ importEnv options
       localTypeSchemes = typeSchemesInInfoTree (substitutionFromResult solveResult)
                                                (qualifiersFromResult solveResult) 
                                                infoTree
   in (typeErrors, warnings, toplevelTypes, localTypeSchemes)
}

-------------------------------------------------------------------------------
-- Attributes for type inferencing

ATTR Module
   [ importEnvironment     : ImportEnvironment
     options               : {[Option]}
   |
   | assumptions           : Assumptions
     dictionaryEnvironment : DictionaryEnvironment
     infoTree              : InfoTree
     logEntries            : LogEntries
     solveResult           : {SolveResult ConstraintInfo}
     toplevelTypes         : TypeEnvironment
     typeErrors            : TypeErrors
     warnings              : Warnings
   ]

-------------------------------------------------------------------------------
-- Includes

INCLUDE "TypeInferenceRules.ag"
INCLUDE "TypeInferenceOverloading.ag"
INCLUDE "TypeInferenceCollect.ag"
INCLUDE "TypeInferenceInfo.ag"
INCLUDE "LocalInfo.ag"
INCLUDE "GlobalInfo.ag"
INCLUDE "HeliumPartialSyntax.ag"
INCLUDE "Scope.ag"  
INCLUDE "UHA_Syntax.ag"

--- Type Inference Directives (may be turned off)
INCLUDE "TS_PatternMatching.ag"

-- SEM Module | Module   lhs . solveResult = @solveResult { debugFromResult =  debugFromResult @solveResult 
--                                                                          ++ "Inference Strategies:" 
--                                                                          } -- ++ [ ] @body.matchIO }

-- Pattern Match Warnings (may be turned off)
INCLUDE "PatternMatchWarnings.ag"
SEM Module 
  | Module lhs . warnings = @loc.warnings ++ @body.patternMatchWarnings
  
-------------------------------------------------------------------------------
-- Imports

imports {

-- types
import Top.Types
import StaticAnalysis.Miscellaneous.TypeConversion

-- error messages and warnings
import StaticAnalysis.Messages.Messages
import StaticAnalysis.Messages.TypeErrors
import StaticAnalysis.Messages.Warnings
import StaticAnalysis.Miscellaneous.ConstraintInfo
import StaticAnalysis.Miscellaneous.DoublyLinkedTree
import StaticAnalysis.Miscellaneous.UHA_Source

-- constraints and constraint trees
import StaticAnalysis.Miscellaneous.TypeConstraints
import Top.Ordering.Tree

-- constraint solving

import StaticAnalysis.Inferencers.SelectConstraintSolver (selectConstraintSolver)
import Top.Solver (SolveResult(..), LogEntries, emptyResult, noLogEntries)
import StaticAnalysis.Heuristics.HeuristicsInfo (makeUnifier, skip_UHA_FB_RHS)
import StaticAnalysis.Inferencers.BindingGroupAnalysis


-- UHA syntax
import Syntax.UHA_Syntax
import Syntax.UHA_Range                 
         
-- other

import Utils.Utils (internalError, hole)
import ModuleSystem.ImportEnvironment  hiding (setTypeSynonyms)
import ModuleSystem.DictionaryEnvironment
import Main.Args

-- standard
import qualified Data.Map as M
import Data.Maybe 
}